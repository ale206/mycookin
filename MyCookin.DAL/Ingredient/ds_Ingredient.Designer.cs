//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace MyCookin.DAL.Ingredient {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ds_Ingredient")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ds_Ingredient : global::System.Data.DataSet {
        
        private GetIngredientsLanguagesDataTable tableGetIngredientsLanguages;
        
        private GetIngredientsCategoriesDataTable tableGetIngredientsCategories;
        
        private GetIngredientsCategoriesLanguagesDataTable tableGetIngredientsCategoriesLanguages;
        
        private GetIngredientsIngredientsCategoriesDataTable tableGetIngredientsIngredientsCategories;
        
        private GetIngredientsQuantityTypesDataTable tableGetIngredientsQuantityTypes;
        
        private GetIngredientsQuantityTypesLanguagesDataTable tableGetIngredientsQuantityTypesLanguages;
        
        private GetIngredientsAllowedQuantityTypesDataTable tableGetIngredientsAllowedQuantityTypes;
        
        private ManageIngredientDataTable tableManageIngredient;
        
        private GetIngredientsDataTable tableGetIngredients;
        
        private GetQuantityNotStdDataTable tableGetQuantityNotStd;
        
        private GetQuantityNotStdLanguageDataTable tableGetQuantityNotStdLanguage;
        
        private GetIngredientsAlternativesDataTable tableGetIngredientsAlternatives;
        
        private GETSiteMapIngredientDataTable tableGETSiteMapIngredient;
        
        private global::System.Data.DataRelation relationFK_IngredientsQuantityTypesLanguages_IngredientsQuantityTypes;
        
        private global::System.Data.DataRelation relationFK_IngredientsAllowedQuantityTypes_IngredientsQuantityTypes;
        
        private global::System.Data.DataRelation relationFK_IngredientsLanguages_Ingredients;
        
        private global::System.Data.DataRelation relationFK_IngredientsIngredientsCategories_Ingredients;
        
        private global::System.Data.DataRelation relationFK_IngredientsAllowedQuantityTypes_Ingredients;
        
        private global::System.Data.DataRelation relationFK_QuantityNotStdLanguage_QuantityNotStd;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ds_Ingredient() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected ds_Ingredient(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetIngredientsLanguages"] != null)) {
                    base.Tables.Add(new GetIngredientsLanguagesDataTable(ds.Tables["GetIngredientsLanguages"]));
                }
                if ((ds.Tables["GetIngredientsCategories"] != null)) {
                    base.Tables.Add(new GetIngredientsCategoriesDataTable(ds.Tables["GetIngredientsCategories"]));
                }
                if ((ds.Tables["GetIngredientsCategoriesLanguages"] != null)) {
                    base.Tables.Add(new GetIngredientsCategoriesLanguagesDataTable(ds.Tables["GetIngredientsCategoriesLanguages"]));
                }
                if ((ds.Tables["GetIngredientsIngredientsCategories"] != null)) {
                    base.Tables.Add(new GetIngredientsIngredientsCategoriesDataTable(ds.Tables["GetIngredientsIngredientsCategories"]));
                }
                if ((ds.Tables["GetIngredientsQuantityTypes"] != null)) {
                    base.Tables.Add(new GetIngredientsQuantityTypesDataTable(ds.Tables["GetIngredientsQuantityTypes"]));
                }
                if ((ds.Tables["GetIngredientsQuantityTypesLanguages"] != null)) {
                    base.Tables.Add(new GetIngredientsQuantityTypesLanguagesDataTable(ds.Tables["GetIngredientsQuantityTypesLanguages"]));
                }
                if ((ds.Tables["GetIngredientsAllowedQuantityTypes"] != null)) {
                    base.Tables.Add(new GetIngredientsAllowedQuantityTypesDataTable(ds.Tables["GetIngredientsAllowedQuantityTypes"]));
                }
                if ((ds.Tables["ManageIngredient"] != null)) {
                    base.Tables.Add(new ManageIngredientDataTable(ds.Tables["ManageIngredient"]));
                }
                if ((ds.Tables["GetIngredients"] != null)) {
                    base.Tables.Add(new GetIngredientsDataTable(ds.Tables["GetIngredients"]));
                }
                if ((ds.Tables["GetQuantityNotStd"] != null)) {
                    base.Tables.Add(new GetQuantityNotStdDataTable(ds.Tables["GetQuantityNotStd"]));
                }
                if ((ds.Tables["GetQuantityNotStdLanguage"] != null)) {
                    base.Tables.Add(new GetQuantityNotStdLanguageDataTable(ds.Tables["GetQuantityNotStdLanguage"]));
                }
                if ((ds.Tables["GetIngredientsAlternatives"] != null)) {
                    base.Tables.Add(new GetIngredientsAlternativesDataTable(ds.Tables["GetIngredientsAlternatives"]));
                }
                if ((ds.Tables["GETSiteMapIngredient"] != null)) {
                    base.Tables.Add(new GETSiteMapIngredientDataTable(ds.Tables["GETSiteMapIngredient"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetIngredientsLanguagesDataTable GetIngredientsLanguages {
            get {
                return this.tableGetIngredientsLanguages;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetIngredientsCategoriesDataTable GetIngredientsCategories {
            get {
                return this.tableGetIngredientsCategories;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetIngredientsCategoriesLanguagesDataTable GetIngredientsCategoriesLanguages {
            get {
                return this.tableGetIngredientsCategoriesLanguages;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetIngredientsIngredientsCategoriesDataTable GetIngredientsIngredientsCategories {
            get {
                return this.tableGetIngredientsIngredientsCategories;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetIngredientsQuantityTypesDataTable GetIngredientsQuantityTypes {
            get {
                return this.tableGetIngredientsQuantityTypes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetIngredientsQuantityTypesLanguagesDataTable GetIngredientsQuantityTypesLanguages {
            get {
                return this.tableGetIngredientsQuantityTypesLanguages;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetIngredientsAllowedQuantityTypesDataTable GetIngredientsAllowedQuantityTypes {
            get {
                return this.tableGetIngredientsAllowedQuantityTypes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ManageIngredientDataTable ManageIngredient {
            get {
                return this.tableManageIngredient;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetIngredientsDataTable GetIngredients {
            get {
                return this.tableGetIngredients;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetQuantityNotStdDataTable GetQuantityNotStd {
            get {
                return this.tableGetQuantityNotStd;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetQuantityNotStdLanguageDataTable GetQuantityNotStdLanguage {
            get {
                return this.tableGetQuantityNotStdLanguage;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetIngredientsAlternativesDataTable GetIngredientsAlternatives {
            get {
                return this.tableGetIngredientsAlternatives;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GETSiteMapIngredientDataTable GETSiteMapIngredient {
            get {
                return this.tableGETSiteMapIngredient;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            ds_Ingredient cln = ((ds_Ingredient)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GetIngredientsLanguages"] != null)) {
                    base.Tables.Add(new GetIngredientsLanguagesDataTable(ds.Tables["GetIngredientsLanguages"]));
                }
                if ((ds.Tables["GetIngredientsCategories"] != null)) {
                    base.Tables.Add(new GetIngredientsCategoriesDataTable(ds.Tables["GetIngredientsCategories"]));
                }
                if ((ds.Tables["GetIngredientsCategoriesLanguages"] != null)) {
                    base.Tables.Add(new GetIngredientsCategoriesLanguagesDataTable(ds.Tables["GetIngredientsCategoriesLanguages"]));
                }
                if ((ds.Tables["GetIngredientsIngredientsCategories"] != null)) {
                    base.Tables.Add(new GetIngredientsIngredientsCategoriesDataTable(ds.Tables["GetIngredientsIngredientsCategories"]));
                }
                if ((ds.Tables["GetIngredientsQuantityTypes"] != null)) {
                    base.Tables.Add(new GetIngredientsQuantityTypesDataTable(ds.Tables["GetIngredientsQuantityTypes"]));
                }
                if ((ds.Tables["GetIngredientsQuantityTypesLanguages"] != null)) {
                    base.Tables.Add(new GetIngredientsQuantityTypesLanguagesDataTable(ds.Tables["GetIngredientsQuantityTypesLanguages"]));
                }
                if ((ds.Tables["GetIngredientsAllowedQuantityTypes"] != null)) {
                    base.Tables.Add(new GetIngredientsAllowedQuantityTypesDataTable(ds.Tables["GetIngredientsAllowedQuantityTypes"]));
                }
                if ((ds.Tables["ManageIngredient"] != null)) {
                    base.Tables.Add(new ManageIngredientDataTable(ds.Tables["ManageIngredient"]));
                }
                if ((ds.Tables["GetIngredients"] != null)) {
                    base.Tables.Add(new GetIngredientsDataTable(ds.Tables["GetIngredients"]));
                }
                if ((ds.Tables["GetQuantityNotStd"] != null)) {
                    base.Tables.Add(new GetQuantityNotStdDataTable(ds.Tables["GetQuantityNotStd"]));
                }
                if ((ds.Tables["GetQuantityNotStdLanguage"] != null)) {
                    base.Tables.Add(new GetQuantityNotStdLanguageDataTable(ds.Tables["GetQuantityNotStdLanguage"]));
                }
                if ((ds.Tables["GetIngredientsAlternatives"] != null)) {
                    base.Tables.Add(new GetIngredientsAlternativesDataTable(ds.Tables["GetIngredientsAlternatives"]));
                }
                if ((ds.Tables["GETSiteMapIngredient"] != null)) {
                    base.Tables.Add(new GETSiteMapIngredientDataTable(ds.Tables["GETSiteMapIngredient"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableGetIngredientsLanguages = ((GetIngredientsLanguagesDataTable)(base.Tables["GetIngredientsLanguages"]));
            if ((initTable == true)) {
                if ((this.tableGetIngredientsLanguages != null)) {
                    this.tableGetIngredientsLanguages.InitVars();
                }
            }
            this.tableGetIngredientsCategories = ((GetIngredientsCategoriesDataTable)(base.Tables["GetIngredientsCategories"]));
            if ((initTable == true)) {
                if ((this.tableGetIngredientsCategories != null)) {
                    this.tableGetIngredientsCategories.InitVars();
                }
            }
            this.tableGetIngredientsCategoriesLanguages = ((GetIngredientsCategoriesLanguagesDataTable)(base.Tables["GetIngredientsCategoriesLanguages"]));
            if ((initTable == true)) {
                if ((this.tableGetIngredientsCategoriesLanguages != null)) {
                    this.tableGetIngredientsCategoriesLanguages.InitVars();
                }
            }
            this.tableGetIngredientsIngredientsCategories = ((GetIngredientsIngredientsCategoriesDataTable)(base.Tables["GetIngredientsIngredientsCategories"]));
            if ((initTable == true)) {
                if ((this.tableGetIngredientsIngredientsCategories != null)) {
                    this.tableGetIngredientsIngredientsCategories.InitVars();
                }
            }
            this.tableGetIngredientsQuantityTypes = ((GetIngredientsQuantityTypesDataTable)(base.Tables["GetIngredientsQuantityTypes"]));
            if ((initTable == true)) {
                if ((this.tableGetIngredientsQuantityTypes != null)) {
                    this.tableGetIngredientsQuantityTypes.InitVars();
                }
            }
            this.tableGetIngredientsQuantityTypesLanguages = ((GetIngredientsQuantityTypesLanguagesDataTable)(base.Tables["GetIngredientsQuantityTypesLanguages"]));
            if ((initTable == true)) {
                if ((this.tableGetIngredientsQuantityTypesLanguages != null)) {
                    this.tableGetIngredientsQuantityTypesLanguages.InitVars();
                }
            }
            this.tableGetIngredientsAllowedQuantityTypes = ((GetIngredientsAllowedQuantityTypesDataTable)(base.Tables["GetIngredientsAllowedQuantityTypes"]));
            if ((initTable == true)) {
                if ((this.tableGetIngredientsAllowedQuantityTypes != null)) {
                    this.tableGetIngredientsAllowedQuantityTypes.InitVars();
                }
            }
            this.tableManageIngredient = ((ManageIngredientDataTable)(base.Tables["ManageIngredient"]));
            if ((initTable == true)) {
                if ((this.tableManageIngredient != null)) {
                    this.tableManageIngredient.InitVars();
                }
            }
            this.tableGetIngredients = ((GetIngredientsDataTable)(base.Tables["GetIngredients"]));
            if ((initTable == true)) {
                if ((this.tableGetIngredients != null)) {
                    this.tableGetIngredients.InitVars();
                }
            }
            this.tableGetQuantityNotStd = ((GetQuantityNotStdDataTable)(base.Tables["GetQuantityNotStd"]));
            if ((initTable == true)) {
                if ((this.tableGetQuantityNotStd != null)) {
                    this.tableGetQuantityNotStd.InitVars();
                }
            }
            this.tableGetQuantityNotStdLanguage = ((GetQuantityNotStdLanguageDataTable)(base.Tables["GetQuantityNotStdLanguage"]));
            if ((initTable == true)) {
                if ((this.tableGetQuantityNotStdLanguage != null)) {
                    this.tableGetQuantityNotStdLanguage.InitVars();
                }
            }
            this.tableGetIngredientsAlternatives = ((GetIngredientsAlternativesDataTable)(base.Tables["GetIngredientsAlternatives"]));
            if ((initTable == true)) {
                if ((this.tableGetIngredientsAlternatives != null)) {
                    this.tableGetIngredientsAlternatives.InitVars();
                }
            }
            this.tableGETSiteMapIngredient = ((GETSiteMapIngredientDataTable)(base.Tables["GETSiteMapIngredient"]));
            if ((initTable == true)) {
                if ((this.tableGETSiteMapIngredient != null)) {
                    this.tableGETSiteMapIngredient.InitVars();
                }
            }
            this.relationFK_IngredientsQuantityTypesLanguages_IngredientsQuantityTypes = this.Relations["FK_IngredientsQuantityTypesLanguages_IngredientsQuantityTypes"];
            this.relationFK_IngredientsAllowedQuantityTypes_IngredientsQuantityTypes = this.Relations["FK_IngredientsAllowedQuantityTypes_IngredientsQuantityTypes"];
            this.relationFK_IngredientsLanguages_Ingredients = this.Relations["FK_IngredientsLanguages_Ingredients"];
            this.relationFK_IngredientsIngredientsCategories_Ingredients = this.Relations["FK_IngredientsIngredientsCategories_Ingredients"];
            this.relationFK_IngredientsAllowedQuantityTypes_Ingredients = this.Relations["FK_IngredientsAllowedQuantityTypes_Ingredients"];
            this.relationFK_QuantityNotStdLanguage_QuantityNotStd = this.Relations["FK_QuantityNotStdLanguage_QuantityNotStd"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "ds_Ingredient";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ds_Ingredient.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGetIngredientsLanguages = new GetIngredientsLanguagesDataTable();
            base.Tables.Add(this.tableGetIngredientsLanguages);
            this.tableGetIngredientsCategories = new GetIngredientsCategoriesDataTable();
            base.Tables.Add(this.tableGetIngredientsCategories);
            this.tableGetIngredientsCategoriesLanguages = new GetIngredientsCategoriesLanguagesDataTable();
            base.Tables.Add(this.tableGetIngredientsCategoriesLanguages);
            this.tableGetIngredientsIngredientsCategories = new GetIngredientsIngredientsCategoriesDataTable();
            base.Tables.Add(this.tableGetIngredientsIngredientsCategories);
            this.tableGetIngredientsQuantityTypes = new GetIngredientsQuantityTypesDataTable();
            base.Tables.Add(this.tableGetIngredientsQuantityTypes);
            this.tableGetIngredientsQuantityTypesLanguages = new GetIngredientsQuantityTypesLanguagesDataTable();
            base.Tables.Add(this.tableGetIngredientsQuantityTypesLanguages);
            this.tableGetIngredientsAllowedQuantityTypes = new GetIngredientsAllowedQuantityTypesDataTable();
            base.Tables.Add(this.tableGetIngredientsAllowedQuantityTypes);
            this.tableManageIngredient = new ManageIngredientDataTable();
            base.Tables.Add(this.tableManageIngredient);
            this.tableGetIngredients = new GetIngredientsDataTable();
            base.Tables.Add(this.tableGetIngredients);
            this.tableGetQuantityNotStd = new GetQuantityNotStdDataTable();
            base.Tables.Add(this.tableGetQuantityNotStd);
            this.tableGetQuantityNotStdLanguage = new GetQuantityNotStdLanguageDataTable();
            base.Tables.Add(this.tableGetQuantityNotStdLanguage);
            this.tableGetIngredientsAlternatives = new GetIngredientsAlternativesDataTable();
            base.Tables.Add(this.tableGetIngredientsAlternatives);
            this.tableGETSiteMapIngredient = new GETSiteMapIngredientDataTable();
            base.Tables.Add(this.tableGETSiteMapIngredient);
            this.relationFK_IngredientsQuantityTypesLanguages_IngredientsQuantityTypes = new global::System.Data.DataRelation("FK_IngredientsQuantityTypesLanguages_IngredientsQuantityTypes", new global::System.Data.DataColumn[] {
                        this.tableGetIngredientsQuantityTypes.IDIngredientQuantityTypeColumn}, new global::System.Data.DataColumn[] {
                        this.tableGetIngredientsQuantityTypesLanguages.IDIngredientQuantityTypeColumn}, false);
            this.Relations.Add(this.relationFK_IngredientsQuantityTypesLanguages_IngredientsQuantityTypes);
            this.relationFK_IngredientsAllowedQuantityTypes_IngredientsQuantityTypes = new global::System.Data.DataRelation("FK_IngredientsAllowedQuantityTypes_IngredientsQuantityTypes", new global::System.Data.DataColumn[] {
                        this.tableGetIngredientsQuantityTypes.IDIngredientQuantityTypeColumn}, new global::System.Data.DataColumn[] {
                        this.tableGetIngredientsAllowedQuantityTypes.IDIngredientQuantityTypeColumn}, false);
            this.Relations.Add(this.relationFK_IngredientsAllowedQuantityTypes_IngredientsQuantityTypes);
            this.relationFK_IngredientsLanguages_Ingredients = new global::System.Data.DataRelation("FK_IngredientsLanguages_Ingredients", new global::System.Data.DataColumn[] {
                        this.tableGetIngredients.IDIngredientColumn}, new global::System.Data.DataColumn[] {
                        this.tableGetIngredientsLanguages.IDIngredientColumn}, false);
            this.Relations.Add(this.relationFK_IngredientsLanguages_Ingredients);
            this.relationFK_IngredientsIngredientsCategories_Ingredients = new global::System.Data.DataRelation("FK_IngredientsIngredientsCategories_Ingredients", new global::System.Data.DataColumn[] {
                        this.tableGetIngredients.IDIngredientColumn}, new global::System.Data.DataColumn[] {
                        this.tableGetIngredientsIngredientsCategories.IDIngredientColumn}, false);
            this.Relations.Add(this.relationFK_IngredientsIngredientsCategories_Ingredients);
            this.relationFK_IngredientsAllowedQuantityTypes_Ingredients = new global::System.Data.DataRelation("FK_IngredientsAllowedQuantityTypes_Ingredients", new global::System.Data.DataColumn[] {
                        this.tableGetIngredients.IDIngredientColumn}, new global::System.Data.DataColumn[] {
                        this.tableGetIngredientsAllowedQuantityTypes.IDingredientColumn}, false);
            this.Relations.Add(this.relationFK_IngredientsAllowedQuantityTypes_Ingredients);
            this.relationFK_QuantityNotStdLanguage_QuantityNotStd = new global::System.Data.DataRelation("FK_QuantityNotStdLanguage_QuantityNotStd", new global::System.Data.DataColumn[] {
                        this.tableGetQuantityNotStd.IDQuantityNotStdColumn}, new global::System.Data.DataColumn[] {
                        this.tableGetQuantityNotStdLanguage.IDQuantityNotStdColumn}, false);
            this.Relations.Add(this.relationFK_QuantityNotStdLanguage_QuantityNotStd);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeGetIngredientsLanguages() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeGetIngredientsCategories() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeGetIngredientsCategoriesLanguages() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeGetIngredientsIngredientsCategories() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeGetIngredientsQuantityTypes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeGetIngredientsQuantityTypesLanguages() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeGetIngredientsAllowedQuantityTypes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeManageIngredient() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeGetIngredients() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeGetQuantityNotStd() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeGetQuantityNotStdLanguage() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeGetIngredientsAlternatives() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeGETSiteMapIngredient() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ds_Ingredient ds = new ds_Ingredient();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void GetIngredientsLanguagesRowChangeEventHandler(object sender, GetIngredientsLanguagesRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void GetIngredientsCategoriesRowChangeEventHandler(object sender, GetIngredientsCategoriesRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void GetIngredientsCategoriesLanguagesRowChangeEventHandler(object sender, GetIngredientsCategoriesLanguagesRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void GetIngredientsIngredientsCategoriesRowChangeEventHandler(object sender, GetIngredientsIngredientsCategoriesRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void GetIngredientsQuantityTypesRowChangeEventHandler(object sender, GetIngredientsQuantityTypesRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void GetIngredientsQuantityTypesLanguagesRowChangeEventHandler(object sender, GetIngredientsQuantityTypesLanguagesRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void GetIngredientsAllowedQuantityTypesRowChangeEventHandler(object sender, GetIngredientsAllowedQuantityTypesRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ManageIngredientRowChangeEventHandler(object sender, ManageIngredientRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void GetIngredientsRowChangeEventHandler(object sender, GetIngredientsRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void GetQuantityNotStdRowChangeEventHandler(object sender, GetQuantityNotStdRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void GetQuantityNotStdLanguageRowChangeEventHandler(object sender, GetQuantityNotStdLanguageRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void GetIngredientsAlternativesRowChangeEventHandler(object sender, GetIngredientsAlternativesRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void GETSiteMapIngredientRowChangeEventHandler(object sender, GETSiteMapIngredientRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetIngredientsLanguagesDataTable : global::System.Data.TypedTableBase<GetIngredientsLanguagesRow> {
            
            private global::System.Data.DataColumn columnIDIngredientLanguage;
            
            private global::System.Data.DataColumn columnIDIngredient;
            
            private global::System.Data.DataColumn columnIDLanguage;
            
            private global::System.Data.DataColumn columnIngredientSingular;
            
            private global::System.Data.DataColumn columnIngredientPlural;
            
            private global::System.Data.DataColumn columnIngredientDescription;
            
            private global::System.Data.DataColumn columnisAutoTranslate;
            
            private global::System.Data.DataColumn columnGeoIDRegion;
            
            private global::System.Data.DataColumn columnIDIngredientImage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsLanguagesDataTable() {
                this.TableName = "GetIngredientsLanguages";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GetIngredientsLanguagesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected GetIngredientsLanguagesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDIngredientLanguageColumn {
                get {
                    return this.columnIDIngredientLanguage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDIngredientColumn {
                get {
                    return this.columnIDIngredient;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDLanguageColumn {
                get {
                    return this.columnIDLanguage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IngredientSingularColumn {
                get {
                    return this.columnIngredientSingular;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IngredientPluralColumn {
                get {
                    return this.columnIngredientPlural;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IngredientDescriptionColumn {
                get {
                    return this.columnIngredientDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn isAutoTranslateColumn {
                get {
                    return this.columnisAutoTranslate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GeoIDRegionColumn {
                get {
                    return this.columnGeoIDRegion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDIngredientImageColumn {
                get {
                    return this.columnIDIngredientImage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsLanguagesRow this[int index] {
                get {
                    return ((GetIngredientsLanguagesRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsLanguagesRowChangeEventHandler GetIngredientsLanguagesRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsLanguagesRowChangeEventHandler GetIngredientsLanguagesRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsLanguagesRowChangeEventHandler GetIngredientsLanguagesRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsLanguagesRowChangeEventHandler GetIngredientsLanguagesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddGetIngredientsLanguagesRow(GetIngredientsLanguagesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsLanguagesRow AddGetIngredientsLanguagesRow(System.Guid IDIngredientLanguage, GetIngredientsRow parentGetIngredientsRowByFK_IngredientsLanguages_Ingredients, int IDLanguage, string IngredientSingular, string IngredientPlural, string IngredientDescription, bool isAutoTranslate, int GeoIDRegion, System.Guid IDIngredientImage) {
                GetIngredientsLanguagesRow rowGetIngredientsLanguagesRow = ((GetIngredientsLanguagesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IDIngredientLanguage,
                        null,
                        IDLanguage,
                        IngredientSingular,
                        IngredientPlural,
                        IngredientDescription,
                        isAutoTranslate,
                        GeoIDRegion,
                        IDIngredientImage};
                if ((parentGetIngredientsRowByFK_IngredientsLanguages_Ingredients != null)) {
                    columnValuesArray[1] = parentGetIngredientsRowByFK_IngredientsLanguages_Ingredients[0];
                }
                rowGetIngredientsLanguagesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetIngredientsLanguagesRow);
                return rowGetIngredientsLanguagesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsLanguagesRow FindByIDIngredientLanguage(System.Guid IDIngredientLanguage) {
                return ((GetIngredientsLanguagesRow)(this.Rows.Find(new object[] {
                            IDIngredientLanguage})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                GetIngredientsLanguagesDataTable cln = ((GetIngredientsLanguagesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetIngredientsLanguagesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnIDIngredientLanguage = base.Columns["IDIngredientLanguage"];
                this.columnIDIngredient = base.Columns["IDIngredient"];
                this.columnIDLanguage = base.Columns["IDLanguage"];
                this.columnIngredientSingular = base.Columns["IngredientSingular"];
                this.columnIngredientPlural = base.Columns["IngredientPlural"];
                this.columnIngredientDescription = base.Columns["IngredientDescription"];
                this.columnisAutoTranslate = base.Columns["isAutoTranslate"];
                this.columnGeoIDRegion = base.Columns["GeoIDRegion"];
                this.columnIDIngredientImage = base.Columns["IDIngredientImage"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnIDIngredientLanguage = new global::System.Data.DataColumn("IDIngredientLanguage", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDIngredientLanguage);
                this.columnIDIngredient = new global::System.Data.DataColumn("IDIngredient", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDIngredient);
                this.columnIDLanguage = new global::System.Data.DataColumn("IDLanguage", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDLanguage);
                this.columnIngredientSingular = new global::System.Data.DataColumn("IngredientSingular", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIngredientSingular);
                this.columnIngredientPlural = new global::System.Data.DataColumn("IngredientPlural", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIngredientPlural);
                this.columnIngredientDescription = new global::System.Data.DataColumn("IngredientDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIngredientDescription);
                this.columnisAutoTranslate = new global::System.Data.DataColumn("isAutoTranslate", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisAutoTranslate);
                this.columnGeoIDRegion = new global::System.Data.DataColumn("GeoIDRegion", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGeoIDRegion);
                this.columnIDIngredientImage = new global::System.Data.DataColumn("IDIngredientImage", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDIngredientImage);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDIngredientLanguage}, true));
                this.columnIDIngredientLanguage.AllowDBNull = false;
                this.columnIDIngredientLanguage.Unique = true;
                this.columnIngredientSingular.MaxLength = 250;
                this.columnIngredientPlural.MaxLength = 250;
                this.columnIngredientDescription.MaxLength = 4000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsLanguagesRow NewGetIngredientsLanguagesRow() {
                return ((GetIngredientsLanguagesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetIngredientsLanguagesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(GetIngredientsLanguagesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetIngredientsLanguagesRowChanged != null)) {
                    this.GetIngredientsLanguagesRowChanged(this, new GetIngredientsLanguagesRowChangeEvent(((GetIngredientsLanguagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetIngredientsLanguagesRowChanging != null)) {
                    this.GetIngredientsLanguagesRowChanging(this, new GetIngredientsLanguagesRowChangeEvent(((GetIngredientsLanguagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetIngredientsLanguagesRowDeleted != null)) {
                    this.GetIngredientsLanguagesRowDeleted(this, new GetIngredientsLanguagesRowChangeEvent(((GetIngredientsLanguagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetIngredientsLanguagesRowDeleting != null)) {
                    this.GetIngredientsLanguagesRowDeleting(this, new GetIngredientsLanguagesRowChangeEvent(((GetIngredientsLanguagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveGetIngredientsLanguagesRow(GetIngredientsLanguagesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ds_Ingredient ds = new ds_Ingredient();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetIngredientsLanguagesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetIngredientsCategoriesDataTable : global::System.Data.TypedTableBase<GetIngredientsCategoriesRow> {
            
            private global::System.Data.DataColumn columnIDIngredientCategoryFather;
            
            private global::System.Data.DataColumn columnEnabled;
            
            private global::System.Data.DataColumn columnIngredientCategoryLanguage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsCategoriesDataTable() {
                this.TableName = "GetIngredientsCategories";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GetIngredientsCategoriesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected GetIngredientsCategoriesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDIngredientCategoryFatherColumn {
                get {
                    return this.columnIDIngredientCategoryFather;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn EnabledColumn {
                get {
                    return this.columnEnabled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IngredientCategoryLanguageColumn {
                get {
                    return this.columnIngredientCategoryLanguage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsCategoriesRow this[int index] {
                get {
                    return ((GetIngredientsCategoriesRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsCategoriesRowChangeEventHandler GetIngredientsCategoriesRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsCategoriesRowChangeEventHandler GetIngredientsCategoriesRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsCategoriesRowChangeEventHandler GetIngredientsCategoriesRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsCategoriesRowChangeEventHandler GetIngredientsCategoriesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddGetIngredientsCategoriesRow(GetIngredientsCategoriesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsCategoriesRow AddGetIngredientsCategoriesRow(int IDIngredientCategoryFather, bool Enabled, string IngredientCategoryLanguage) {
                GetIngredientsCategoriesRow rowGetIngredientsCategoriesRow = ((GetIngredientsCategoriesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IDIngredientCategoryFather,
                        Enabled,
                        IngredientCategoryLanguage};
                rowGetIngredientsCategoriesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetIngredientsCategoriesRow);
                return rowGetIngredientsCategoriesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                GetIngredientsCategoriesDataTable cln = ((GetIngredientsCategoriesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetIngredientsCategoriesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnIDIngredientCategoryFather = base.Columns["IDIngredientCategoryFather"];
                this.columnEnabled = base.Columns["Enabled"];
                this.columnIngredientCategoryLanguage = base.Columns["IngredientCategoryLanguage"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnIDIngredientCategoryFather = new global::System.Data.DataColumn("IDIngredientCategoryFather", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDIngredientCategoryFather);
                this.columnEnabled = new global::System.Data.DataColumn("Enabled", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnabled);
                this.columnIngredientCategoryLanguage = new global::System.Data.DataColumn("IngredientCategoryLanguage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIngredientCategoryLanguage);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsCategoriesRow NewGetIngredientsCategoriesRow() {
                return ((GetIngredientsCategoriesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetIngredientsCategoriesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(GetIngredientsCategoriesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetIngredientsCategoriesRowChanged != null)) {
                    this.GetIngredientsCategoriesRowChanged(this, new GetIngredientsCategoriesRowChangeEvent(((GetIngredientsCategoriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetIngredientsCategoriesRowChanging != null)) {
                    this.GetIngredientsCategoriesRowChanging(this, new GetIngredientsCategoriesRowChangeEvent(((GetIngredientsCategoriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetIngredientsCategoriesRowDeleted != null)) {
                    this.GetIngredientsCategoriesRowDeleted(this, new GetIngredientsCategoriesRowChangeEvent(((GetIngredientsCategoriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetIngredientsCategoriesRowDeleting != null)) {
                    this.GetIngredientsCategoriesRowDeleting(this, new GetIngredientsCategoriesRowChangeEvent(((GetIngredientsCategoriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveGetIngredientsCategoriesRow(GetIngredientsCategoriesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ds_Ingredient ds = new ds_Ingredient();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetIngredientsCategoriesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetIngredientsCategoriesLanguagesDataTable : global::System.Data.TypedTableBase<GetIngredientsCategoriesLanguagesRow> {
            
            private global::System.Data.DataColumn columnIDIngredientCategoryLanguage;
            
            private global::System.Data.DataColumn columnIDIngredientCategory;
            
            private global::System.Data.DataColumn columnIDLanguage;
            
            private global::System.Data.DataColumn columnIngredientCategoryLanguage;
            
            private global::System.Data.DataColumn columnIngredientCategoryLanguageDesc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsCategoriesLanguagesDataTable() {
                this.TableName = "GetIngredientsCategoriesLanguages";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GetIngredientsCategoriesLanguagesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected GetIngredientsCategoriesLanguagesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDIngredientCategoryLanguageColumn {
                get {
                    return this.columnIDIngredientCategoryLanguage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDIngredientCategoryColumn {
                get {
                    return this.columnIDIngredientCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDLanguageColumn {
                get {
                    return this.columnIDLanguage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IngredientCategoryLanguageColumn {
                get {
                    return this.columnIngredientCategoryLanguage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IngredientCategoryLanguageDescColumn {
                get {
                    return this.columnIngredientCategoryLanguageDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsCategoriesLanguagesRow this[int index] {
                get {
                    return ((GetIngredientsCategoriesLanguagesRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsCategoriesLanguagesRowChangeEventHandler GetIngredientsCategoriesLanguagesRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsCategoriesLanguagesRowChangeEventHandler GetIngredientsCategoriesLanguagesRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsCategoriesLanguagesRowChangeEventHandler GetIngredientsCategoriesLanguagesRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsCategoriesLanguagesRowChangeEventHandler GetIngredientsCategoriesLanguagesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddGetIngredientsCategoriesLanguagesRow(GetIngredientsCategoriesLanguagesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsCategoriesLanguagesRow AddGetIngredientsCategoriesLanguagesRow(int IDIngredientCategory, int IDLanguage, string IngredientCategoryLanguage, string IngredientCategoryLanguageDesc) {
                GetIngredientsCategoriesLanguagesRow rowGetIngredientsCategoriesLanguagesRow = ((GetIngredientsCategoriesLanguagesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        IDIngredientCategory,
                        IDLanguage,
                        IngredientCategoryLanguage,
                        IngredientCategoryLanguageDesc};
                rowGetIngredientsCategoriesLanguagesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetIngredientsCategoriesLanguagesRow);
                return rowGetIngredientsCategoriesLanguagesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                GetIngredientsCategoriesLanguagesDataTable cln = ((GetIngredientsCategoriesLanguagesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetIngredientsCategoriesLanguagesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnIDIngredientCategoryLanguage = base.Columns["IDIngredientCategoryLanguage"];
                this.columnIDIngredientCategory = base.Columns["IDIngredientCategory"];
                this.columnIDLanguage = base.Columns["IDLanguage"];
                this.columnIngredientCategoryLanguage = base.Columns["IngredientCategoryLanguage"];
                this.columnIngredientCategoryLanguageDesc = base.Columns["IngredientCategoryLanguageDesc"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnIDIngredientCategoryLanguage = new global::System.Data.DataColumn("IDIngredientCategoryLanguage", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDIngredientCategoryLanguage);
                this.columnIDIngredientCategory = new global::System.Data.DataColumn("IDIngredientCategory", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDIngredientCategory);
                this.columnIDLanguage = new global::System.Data.DataColumn("IDLanguage", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDLanguage);
                this.columnIngredientCategoryLanguage = new global::System.Data.DataColumn("IngredientCategoryLanguage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIngredientCategoryLanguage);
                this.columnIngredientCategoryLanguageDesc = new global::System.Data.DataColumn("IngredientCategoryLanguageDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIngredientCategoryLanguageDesc);
                this.columnIDIngredientCategoryLanguage.AutoIncrement = true;
                this.columnIDIngredientCategoryLanguage.AutoIncrementSeed = -1;
                this.columnIDIngredientCategoryLanguage.AutoIncrementStep = -1;
                this.columnIDIngredientCategoryLanguage.AllowDBNull = false;
                this.columnIDIngredientCategoryLanguage.ReadOnly = true;
                this.columnIngredientCategoryLanguage.MaxLength = 100;
                this.columnIngredientCategoryLanguageDesc.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsCategoriesLanguagesRow NewGetIngredientsCategoriesLanguagesRow() {
                return ((GetIngredientsCategoriesLanguagesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetIngredientsCategoriesLanguagesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(GetIngredientsCategoriesLanguagesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetIngredientsCategoriesLanguagesRowChanged != null)) {
                    this.GetIngredientsCategoriesLanguagesRowChanged(this, new GetIngredientsCategoriesLanguagesRowChangeEvent(((GetIngredientsCategoriesLanguagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetIngredientsCategoriesLanguagesRowChanging != null)) {
                    this.GetIngredientsCategoriesLanguagesRowChanging(this, new GetIngredientsCategoriesLanguagesRowChangeEvent(((GetIngredientsCategoriesLanguagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetIngredientsCategoriesLanguagesRowDeleted != null)) {
                    this.GetIngredientsCategoriesLanguagesRowDeleted(this, new GetIngredientsCategoriesLanguagesRowChangeEvent(((GetIngredientsCategoriesLanguagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetIngredientsCategoriesLanguagesRowDeleting != null)) {
                    this.GetIngredientsCategoriesLanguagesRowDeleting(this, new GetIngredientsCategoriesLanguagesRowChangeEvent(((GetIngredientsCategoriesLanguagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveGetIngredientsCategoriesLanguagesRow(GetIngredientsCategoriesLanguagesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ds_Ingredient ds = new ds_Ingredient();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetIngredientsCategoriesLanguagesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetIngredientsIngredientsCategoriesDataTable : global::System.Data.TypedTableBase<GetIngredientsIngredientsCategoriesRow> {
            
            private global::System.Data.DataColumn columnIDIngredientIngredientCategory;
            
            private global::System.Data.DataColumn columnIDIngredient;
            
            private global::System.Data.DataColumn columnIDIngredientCategory;
            
            private global::System.Data.DataColumn columnisPrincipalCategory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsIngredientsCategoriesDataTable() {
                this.TableName = "GetIngredientsIngredientsCategories";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GetIngredientsIngredientsCategoriesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected GetIngredientsIngredientsCategoriesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDIngredientIngredientCategoryColumn {
                get {
                    return this.columnIDIngredientIngredientCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDIngredientColumn {
                get {
                    return this.columnIDIngredient;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDIngredientCategoryColumn {
                get {
                    return this.columnIDIngredientCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn isPrincipalCategoryColumn {
                get {
                    return this.columnisPrincipalCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsIngredientsCategoriesRow this[int index] {
                get {
                    return ((GetIngredientsIngredientsCategoriesRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsIngredientsCategoriesRowChangeEventHandler GetIngredientsIngredientsCategoriesRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsIngredientsCategoriesRowChangeEventHandler GetIngredientsIngredientsCategoriesRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsIngredientsCategoriesRowChangeEventHandler GetIngredientsIngredientsCategoriesRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsIngredientsCategoriesRowChangeEventHandler GetIngredientsIngredientsCategoriesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddGetIngredientsIngredientsCategoriesRow(GetIngredientsIngredientsCategoriesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsIngredientsCategoriesRow AddGetIngredientsIngredientsCategoriesRow(System.Guid IDIngredientIngredientCategory, GetIngredientsRow parentGetIngredientsRowByFK_IngredientsIngredientsCategories_Ingredients, int IDIngredientCategory, bool isPrincipalCategory) {
                GetIngredientsIngredientsCategoriesRow rowGetIngredientsIngredientsCategoriesRow = ((GetIngredientsIngredientsCategoriesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IDIngredientIngredientCategory,
                        null,
                        IDIngredientCategory,
                        isPrincipalCategory};
                if ((parentGetIngredientsRowByFK_IngredientsIngredientsCategories_Ingredients != null)) {
                    columnValuesArray[1] = parentGetIngredientsRowByFK_IngredientsIngredientsCategories_Ingredients[0];
                }
                rowGetIngredientsIngredientsCategoriesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetIngredientsIngredientsCategoriesRow);
                return rowGetIngredientsIngredientsCategoriesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsIngredientsCategoriesRow FindByIDIngredientIngredientCategory(System.Guid IDIngredientIngredientCategory) {
                return ((GetIngredientsIngredientsCategoriesRow)(this.Rows.Find(new object[] {
                            IDIngredientIngredientCategory})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                GetIngredientsIngredientsCategoriesDataTable cln = ((GetIngredientsIngredientsCategoriesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetIngredientsIngredientsCategoriesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnIDIngredientIngredientCategory = base.Columns["IDIngredientIngredientCategory"];
                this.columnIDIngredient = base.Columns["IDIngredient"];
                this.columnIDIngredientCategory = base.Columns["IDIngredientCategory"];
                this.columnisPrincipalCategory = base.Columns["isPrincipalCategory"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnIDIngredientIngredientCategory = new global::System.Data.DataColumn("IDIngredientIngredientCategory", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDIngredientIngredientCategory);
                this.columnIDIngredient = new global::System.Data.DataColumn("IDIngredient", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDIngredient);
                this.columnIDIngredientCategory = new global::System.Data.DataColumn("IDIngredientCategory", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDIngredientCategory);
                this.columnisPrincipalCategory = new global::System.Data.DataColumn("isPrincipalCategory", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisPrincipalCategory);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDIngredientIngredientCategory}, true));
                this.columnIDIngredientIngredientCategory.AllowDBNull = false;
                this.columnIDIngredientIngredientCategory.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsIngredientsCategoriesRow NewGetIngredientsIngredientsCategoriesRow() {
                return ((GetIngredientsIngredientsCategoriesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetIngredientsIngredientsCategoriesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(GetIngredientsIngredientsCategoriesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetIngredientsIngredientsCategoriesRowChanged != null)) {
                    this.GetIngredientsIngredientsCategoriesRowChanged(this, new GetIngredientsIngredientsCategoriesRowChangeEvent(((GetIngredientsIngredientsCategoriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetIngredientsIngredientsCategoriesRowChanging != null)) {
                    this.GetIngredientsIngredientsCategoriesRowChanging(this, new GetIngredientsIngredientsCategoriesRowChangeEvent(((GetIngredientsIngredientsCategoriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetIngredientsIngredientsCategoriesRowDeleted != null)) {
                    this.GetIngredientsIngredientsCategoriesRowDeleted(this, new GetIngredientsIngredientsCategoriesRowChangeEvent(((GetIngredientsIngredientsCategoriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetIngredientsIngredientsCategoriesRowDeleting != null)) {
                    this.GetIngredientsIngredientsCategoriesRowDeleting(this, new GetIngredientsIngredientsCategoriesRowChangeEvent(((GetIngredientsIngredientsCategoriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveGetIngredientsIngredientsCategoriesRow(GetIngredientsIngredientsCategoriesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ds_Ingredient ds = new ds_Ingredient();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetIngredientsIngredientsCategoriesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetIngredientsQuantityTypesDataTable : global::System.Data.TypedTableBase<GetIngredientsQuantityTypesRow> {
            
            private global::System.Data.DataColumn columnIDIngredientQuantityType;
            
            private global::System.Data.DataColumn columnisWeight;
            
            private global::System.Data.DataColumn columnisLiquid;
            
            private global::System.Data.DataColumn columnisPiece;
            
            private global::System.Data.DataColumn columnisStandardQuantityType;
            
            private global::System.Data.DataColumn columnNoStdAvgWeight;
            
            private global::System.Data.DataColumn columnEnabledToUser;
            
            private global::System.Data.DataColumn columnShowInIngredientList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsQuantityTypesDataTable() {
                this.TableName = "GetIngredientsQuantityTypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GetIngredientsQuantityTypesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected GetIngredientsQuantityTypesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDIngredientQuantityTypeColumn {
                get {
                    return this.columnIDIngredientQuantityType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn isWeightColumn {
                get {
                    return this.columnisWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn isLiquidColumn {
                get {
                    return this.columnisLiquid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn isPieceColumn {
                get {
                    return this.columnisPiece;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn isStandardQuantityTypeColumn {
                get {
                    return this.columnisStandardQuantityType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NoStdAvgWeightColumn {
                get {
                    return this.columnNoStdAvgWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn EnabledToUserColumn {
                get {
                    return this.columnEnabledToUser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShowInIngredientListColumn {
                get {
                    return this.columnShowInIngredientList;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsQuantityTypesRow this[int index] {
                get {
                    return ((GetIngredientsQuantityTypesRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsQuantityTypesRowChangeEventHandler GetIngredientsQuantityTypesRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsQuantityTypesRowChangeEventHandler GetIngredientsQuantityTypesRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsQuantityTypesRowChangeEventHandler GetIngredientsQuantityTypesRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsQuantityTypesRowChangeEventHandler GetIngredientsQuantityTypesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddGetIngredientsQuantityTypesRow(GetIngredientsQuantityTypesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsQuantityTypesRow AddGetIngredientsQuantityTypesRow(bool isWeight, bool isLiquid, bool isPiece, bool isStandardQuantityType, double NoStdAvgWeight, bool EnabledToUser, bool ShowInIngredientList) {
                GetIngredientsQuantityTypesRow rowGetIngredientsQuantityTypesRow = ((GetIngredientsQuantityTypesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        isWeight,
                        isLiquid,
                        isPiece,
                        isStandardQuantityType,
                        NoStdAvgWeight,
                        EnabledToUser,
                        ShowInIngredientList};
                rowGetIngredientsQuantityTypesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetIngredientsQuantityTypesRow);
                return rowGetIngredientsQuantityTypesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsQuantityTypesRow FindByIDIngredientQuantityType(int IDIngredientQuantityType) {
                return ((GetIngredientsQuantityTypesRow)(this.Rows.Find(new object[] {
                            IDIngredientQuantityType})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                GetIngredientsQuantityTypesDataTable cln = ((GetIngredientsQuantityTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetIngredientsQuantityTypesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnIDIngredientQuantityType = base.Columns["IDIngredientQuantityType"];
                this.columnisWeight = base.Columns["isWeight"];
                this.columnisLiquid = base.Columns["isLiquid"];
                this.columnisPiece = base.Columns["isPiece"];
                this.columnisStandardQuantityType = base.Columns["isStandardQuantityType"];
                this.columnNoStdAvgWeight = base.Columns["NoStdAvgWeight"];
                this.columnEnabledToUser = base.Columns["EnabledToUser"];
                this.columnShowInIngredientList = base.Columns["ShowInIngredientList"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnIDIngredientQuantityType = new global::System.Data.DataColumn("IDIngredientQuantityType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDIngredientQuantityType);
                this.columnisWeight = new global::System.Data.DataColumn("isWeight", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisWeight);
                this.columnisLiquid = new global::System.Data.DataColumn("isLiquid", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisLiquid);
                this.columnisPiece = new global::System.Data.DataColumn("isPiece", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisPiece);
                this.columnisStandardQuantityType = new global::System.Data.DataColumn("isStandardQuantityType", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisStandardQuantityType);
                this.columnNoStdAvgWeight = new global::System.Data.DataColumn("NoStdAvgWeight", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNoStdAvgWeight);
                this.columnEnabledToUser = new global::System.Data.DataColumn("EnabledToUser", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnabledToUser);
                this.columnShowInIngredientList = new global::System.Data.DataColumn("ShowInIngredientList", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShowInIngredientList);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDIngredientQuantityType}, true));
                this.columnIDIngredientQuantityType.AutoIncrement = true;
                this.columnIDIngredientQuantityType.AutoIncrementSeed = -1;
                this.columnIDIngredientQuantityType.AutoIncrementStep = -1;
                this.columnIDIngredientQuantityType.AllowDBNull = false;
                this.columnIDIngredientQuantityType.ReadOnly = true;
                this.columnIDIngredientQuantityType.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsQuantityTypesRow NewGetIngredientsQuantityTypesRow() {
                return ((GetIngredientsQuantityTypesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetIngredientsQuantityTypesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(GetIngredientsQuantityTypesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetIngredientsQuantityTypesRowChanged != null)) {
                    this.GetIngredientsQuantityTypesRowChanged(this, new GetIngredientsQuantityTypesRowChangeEvent(((GetIngredientsQuantityTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetIngredientsQuantityTypesRowChanging != null)) {
                    this.GetIngredientsQuantityTypesRowChanging(this, new GetIngredientsQuantityTypesRowChangeEvent(((GetIngredientsQuantityTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetIngredientsQuantityTypesRowDeleted != null)) {
                    this.GetIngredientsQuantityTypesRowDeleted(this, new GetIngredientsQuantityTypesRowChangeEvent(((GetIngredientsQuantityTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetIngredientsQuantityTypesRowDeleting != null)) {
                    this.GetIngredientsQuantityTypesRowDeleting(this, new GetIngredientsQuantityTypesRowChangeEvent(((GetIngredientsQuantityTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveGetIngredientsQuantityTypesRow(GetIngredientsQuantityTypesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ds_Ingredient ds = new ds_Ingredient();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetIngredientsQuantityTypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetIngredientsQuantityTypesLanguagesDataTable : global::System.Data.TypedTableBase<GetIngredientsQuantityTypesLanguagesRow> {
            
            private global::System.Data.DataColumn columnIDIngredientQuantityTypeLanguage;
            
            private global::System.Data.DataColumn columnIDIngredientQuantityType;
            
            private global::System.Data.DataColumn columnIDLanguage;
            
            private global::System.Data.DataColumn columnIngredientQuantityTypeSingular;
            
            private global::System.Data.DataColumn columnIngredientQuantityTypePlural;
            
            private global::System.Data.DataColumn columnConvertionRatio;
            
            private global::System.Data.DataColumn columnIngredientQuantityTypeX1000Singular;
            
            private global::System.Data.DataColumn columnIngredientQuantityTypeX1000Plural;
            
            private global::System.Data.DataColumn columnIngredientQuantityTypeWordsShowBefore;
            
            private global::System.Data.DataColumn columnIngredientQuantityTypeWordsShowAfter;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsQuantityTypesLanguagesDataTable() {
                this.TableName = "GetIngredientsQuantityTypesLanguages";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GetIngredientsQuantityTypesLanguagesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected GetIngredientsQuantityTypesLanguagesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDIngredientQuantityTypeLanguageColumn {
                get {
                    return this.columnIDIngredientQuantityTypeLanguage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDIngredientQuantityTypeColumn {
                get {
                    return this.columnIDIngredientQuantityType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDLanguageColumn {
                get {
                    return this.columnIDLanguage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IngredientQuantityTypeSingularColumn {
                get {
                    return this.columnIngredientQuantityTypeSingular;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IngredientQuantityTypePluralColumn {
                get {
                    return this.columnIngredientQuantityTypePlural;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ConvertionRatioColumn {
                get {
                    return this.columnConvertionRatio;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IngredientQuantityTypeX1000SingularColumn {
                get {
                    return this.columnIngredientQuantityTypeX1000Singular;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IngredientQuantityTypeX1000PluralColumn {
                get {
                    return this.columnIngredientQuantityTypeX1000Plural;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IngredientQuantityTypeWordsShowBeforeColumn {
                get {
                    return this.columnIngredientQuantityTypeWordsShowBefore;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IngredientQuantityTypeWordsShowAfterColumn {
                get {
                    return this.columnIngredientQuantityTypeWordsShowAfter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsQuantityTypesLanguagesRow this[int index] {
                get {
                    return ((GetIngredientsQuantityTypesLanguagesRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsQuantityTypesLanguagesRowChangeEventHandler GetIngredientsQuantityTypesLanguagesRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsQuantityTypesLanguagesRowChangeEventHandler GetIngredientsQuantityTypesLanguagesRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsQuantityTypesLanguagesRowChangeEventHandler GetIngredientsQuantityTypesLanguagesRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsQuantityTypesLanguagesRowChangeEventHandler GetIngredientsQuantityTypesLanguagesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddGetIngredientsQuantityTypesLanguagesRow(GetIngredientsQuantityTypesLanguagesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsQuantityTypesLanguagesRow AddGetIngredientsQuantityTypesLanguagesRow(GetIngredientsQuantityTypesRow parentGetIngredientsQuantityTypesRowByFK_IngredientsQuantityTypesLanguages_IngredientsQuantityTypes, int IDLanguage, string IngredientQuantityTypeSingular, string IngredientQuantityTypePlural, double ConvertionRatio, string IngredientQuantityTypeX1000Singular, string IngredientQuantityTypeX1000Plural, string IngredientQuantityTypeWordsShowBefore, string IngredientQuantityTypeWordsShowAfter) {
                GetIngredientsQuantityTypesLanguagesRow rowGetIngredientsQuantityTypesLanguagesRow = ((GetIngredientsQuantityTypesLanguagesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        IDLanguage,
                        IngredientQuantityTypeSingular,
                        IngredientQuantityTypePlural,
                        ConvertionRatio,
                        IngredientQuantityTypeX1000Singular,
                        IngredientQuantityTypeX1000Plural,
                        IngredientQuantityTypeWordsShowBefore,
                        IngredientQuantityTypeWordsShowAfter};
                if ((parentGetIngredientsQuantityTypesRowByFK_IngredientsQuantityTypesLanguages_IngredientsQuantityTypes != null)) {
                    columnValuesArray[1] = parentGetIngredientsQuantityTypesRowByFK_IngredientsQuantityTypesLanguages_IngredientsQuantityTypes[0];
                }
                rowGetIngredientsQuantityTypesLanguagesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetIngredientsQuantityTypesLanguagesRow);
                return rowGetIngredientsQuantityTypesLanguagesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsQuantityTypesLanguagesRow FindByIDIngredientQuantityTypeLanguage(int IDIngredientQuantityTypeLanguage) {
                return ((GetIngredientsQuantityTypesLanguagesRow)(this.Rows.Find(new object[] {
                            IDIngredientQuantityTypeLanguage})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                GetIngredientsQuantityTypesLanguagesDataTable cln = ((GetIngredientsQuantityTypesLanguagesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetIngredientsQuantityTypesLanguagesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnIDIngredientQuantityTypeLanguage = base.Columns["IDIngredientQuantityTypeLanguage"];
                this.columnIDIngredientQuantityType = base.Columns["IDIngredientQuantityType"];
                this.columnIDLanguage = base.Columns["IDLanguage"];
                this.columnIngredientQuantityTypeSingular = base.Columns["IngredientQuantityTypeSingular"];
                this.columnIngredientQuantityTypePlural = base.Columns["IngredientQuantityTypePlural"];
                this.columnConvertionRatio = base.Columns["ConvertionRatio"];
                this.columnIngredientQuantityTypeX1000Singular = base.Columns["IngredientQuantityTypeX1000Singular"];
                this.columnIngredientQuantityTypeX1000Plural = base.Columns["IngredientQuantityTypeX1000Plural"];
                this.columnIngredientQuantityTypeWordsShowBefore = base.Columns["IngredientQuantityTypeWordsShowBefore"];
                this.columnIngredientQuantityTypeWordsShowAfter = base.Columns["IngredientQuantityTypeWordsShowAfter"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnIDIngredientQuantityTypeLanguage = new global::System.Data.DataColumn("IDIngredientQuantityTypeLanguage", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDIngredientQuantityTypeLanguage);
                this.columnIDIngredientQuantityType = new global::System.Data.DataColumn("IDIngredientQuantityType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDIngredientQuantityType);
                this.columnIDLanguage = new global::System.Data.DataColumn("IDLanguage", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDLanguage);
                this.columnIngredientQuantityTypeSingular = new global::System.Data.DataColumn("IngredientQuantityTypeSingular", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIngredientQuantityTypeSingular);
                this.columnIngredientQuantityTypePlural = new global::System.Data.DataColumn("IngredientQuantityTypePlural", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIngredientQuantityTypePlural);
                this.columnConvertionRatio = new global::System.Data.DataColumn("ConvertionRatio", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConvertionRatio);
                this.columnIngredientQuantityTypeX1000Singular = new global::System.Data.DataColumn("IngredientQuantityTypeX1000Singular", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIngredientQuantityTypeX1000Singular);
                this.columnIngredientQuantityTypeX1000Plural = new global::System.Data.DataColumn("IngredientQuantityTypeX1000Plural", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIngredientQuantityTypeX1000Plural);
                this.columnIngredientQuantityTypeWordsShowBefore = new global::System.Data.DataColumn("IngredientQuantityTypeWordsShowBefore", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIngredientQuantityTypeWordsShowBefore);
                this.columnIngredientQuantityTypeWordsShowAfter = new global::System.Data.DataColumn("IngredientQuantityTypeWordsShowAfter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIngredientQuantityTypeWordsShowAfter);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDIngredientQuantityTypeLanguage}, true));
                this.columnIDIngredientQuantityTypeLanguage.AutoIncrement = true;
                this.columnIDIngredientQuantityTypeLanguage.AutoIncrementSeed = -1;
                this.columnIDIngredientQuantityTypeLanguage.AutoIncrementStep = -1;
                this.columnIDIngredientQuantityTypeLanguage.AllowDBNull = false;
                this.columnIDIngredientQuantityTypeLanguage.ReadOnly = true;
                this.columnIDIngredientQuantityTypeLanguage.Unique = true;
                this.columnIngredientQuantityTypeSingular.MaxLength = 250;
                this.columnIngredientQuantityTypePlural.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsQuantityTypesLanguagesRow NewGetIngredientsQuantityTypesLanguagesRow() {
                return ((GetIngredientsQuantityTypesLanguagesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetIngredientsQuantityTypesLanguagesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(GetIngredientsQuantityTypesLanguagesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetIngredientsQuantityTypesLanguagesRowChanged != null)) {
                    this.GetIngredientsQuantityTypesLanguagesRowChanged(this, new GetIngredientsQuantityTypesLanguagesRowChangeEvent(((GetIngredientsQuantityTypesLanguagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetIngredientsQuantityTypesLanguagesRowChanging != null)) {
                    this.GetIngredientsQuantityTypesLanguagesRowChanging(this, new GetIngredientsQuantityTypesLanguagesRowChangeEvent(((GetIngredientsQuantityTypesLanguagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetIngredientsQuantityTypesLanguagesRowDeleted != null)) {
                    this.GetIngredientsQuantityTypesLanguagesRowDeleted(this, new GetIngredientsQuantityTypesLanguagesRowChangeEvent(((GetIngredientsQuantityTypesLanguagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetIngredientsQuantityTypesLanguagesRowDeleting != null)) {
                    this.GetIngredientsQuantityTypesLanguagesRowDeleting(this, new GetIngredientsQuantityTypesLanguagesRowChangeEvent(((GetIngredientsQuantityTypesLanguagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveGetIngredientsQuantityTypesLanguagesRow(GetIngredientsQuantityTypesLanguagesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ds_Ingredient ds = new ds_Ingredient();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetIngredientsQuantityTypesLanguagesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetIngredientsAllowedQuantityTypesDataTable : global::System.Data.TypedTableBase<GetIngredientsAllowedQuantityTypesRow> {
            
            private global::System.Data.DataColumn columnIDIngredientAllowedQuantityType;
            
            private global::System.Data.DataColumn columnIDingredient;
            
            private global::System.Data.DataColumn columnIDIngredientQuantityType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsAllowedQuantityTypesDataTable() {
                this.TableName = "GetIngredientsAllowedQuantityTypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GetIngredientsAllowedQuantityTypesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected GetIngredientsAllowedQuantityTypesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDIngredientAllowedQuantityTypeColumn {
                get {
                    return this.columnIDIngredientAllowedQuantityType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDingredientColumn {
                get {
                    return this.columnIDingredient;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDIngredientQuantityTypeColumn {
                get {
                    return this.columnIDIngredientQuantityType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsAllowedQuantityTypesRow this[int index] {
                get {
                    return ((GetIngredientsAllowedQuantityTypesRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsAllowedQuantityTypesRowChangeEventHandler GetIngredientsAllowedQuantityTypesRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsAllowedQuantityTypesRowChangeEventHandler GetIngredientsAllowedQuantityTypesRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsAllowedQuantityTypesRowChangeEventHandler GetIngredientsAllowedQuantityTypesRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsAllowedQuantityTypesRowChangeEventHandler GetIngredientsAllowedQuantityTypesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddGetIngredientsAllowedQuantityTypesRow(GetIngredientsAllowedQuantityTypesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsAllowedQuantityTypesRow AddGetIngredientsAllowedQuantityTypesRow(System.Guid IDIngredientAllowedQuantityType, GetIngredientsRow parentGetIngredientsRowByFK_IngredientsAllowedQuantityTypes_Ingredients, GetIngredientsQuantityTypesRow parentGetIngredientsQuantityTypesRowByFK_IngredientsAllowedQuantityTypes_IngredientsQuantityTypes) {
                GetIngredientsAllowedQuantityTypesRow rowGetIngredientsAllowedQuantityTypesRow = ((GetIngredientsAllowedQuantityTypesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IDIngredientAllowedQuantityType,
                        null,
                        null};
                if ((parentGetIngredientsRowByFK_IngredientsAllowedQuantityTypes_Ingredients != null)) {
                    columnValuesArray[1] = parentGetIngredientsRowByFK_IngredientsAllowedQuantityTypes_Ingredients[0];
                }
                if ((parentGetIngredientsQuantityTypesRowByFK_IngredientsAllowedQuantityTypes_IngredientsQuantityTypes != null)) {
                    columnValuesArray[2] = parentGetIngredientsQuantityTypesRowByFK_IngredientsAllowedQuantityTypes_IngredientsQuantityTypes[0];
                }
                rowGetIngredientsAllowedQuantityTypesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetIngredientsAllowedQuantityTypesRow);
                return rowGetIngredientsAllowedQuantityTypesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsAllowedQuantityTypesRow FindByIDIngredientAllowedQuantityType(System.Guid IDIngredientAllowedQuantityType) {
                return ((GetIngredientsAllowedQuantityTypesRow)(this.Rows.Find(new object[] {
                            IDIngredientAllowedQuantityType})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                GetIngredientsAllowedQuantityTypesDataTable cln = ((GetIngredientsAllowedQuantityTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetIngredientsAllowedQuantityTypesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnIDIngredientAllowedQuantityType = base.Columns["IDIngredientAllowedQuantityType"];
                this.columnIDingredient = base.Columns["IDingredient"];
                this.columnIDIngredientQuantityType = base.Columns["IDIngredientQuantityType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnIDIngredientAllowedQuantityType = new global::System.Data.DataColumn("IDIngredientAllowedQuantityType", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDIngredientAllowedQuantityType);
                this.columnIDingredient = new global::System.Data.DataColumn("IDingredient", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDingredient);
                this.columnIDIngredientQuantityType = new global::System.Data.DataColumn("IDIngredientQuantityType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDIngredientQuantityType);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDIngredientAllowedQuantityType}, true));
                this.columnIDIngredientAllowedQuantityType.AllowDBNull = false;
                this.columnIDIngredientAllowedQuantityType.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsAllowedQuantityTypesRow NewGetIngredientsAllowedQuantityTypesRow() {
                return ((GetIngredientsAllowedQuantityTypesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetIngredientsAllowedQuantityTypesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(GetIngredientsAllowedQuantityTypesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetIngredientsAllowedQuantityTypesRowChanged != null)) {
                    this.GetIngredientsAllowedQuantityTypesRowChanged(this, new GetIngredientsAllowedQuantityTypesRowChangeEvent(((GetIngredientsAllowedQuantityTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetIngredientsAllowedQuantityTypesRowChanging != null)) {
                    this.GetIngredientsAllowedQuantityTypesRowChanging(this, new GetIngredientsAllowedQuantityTypesRowChangeEvent(((GetIngredientsAllowedQuantityTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetIngredientsAllowedQuantityTypesRowDeleted != null)) {
                    this.GetIngredientsAllowedQuantityTypesRowDeleted(this, new GetIngredientsAllowedQuantityTypesRowChangeEvent(((GetIngredientsAllowedQuantityTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetIngredientsAllowedQuantityTypesRowDeleting != null)) {
                    this.GetIngredientsAllowedQuantityTypesRowDeleting(this, new GetIngredientsAllowedQuantityTypesRowChangeEvent(((GetIngredientsAllowedQuantityTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveGetIngredientsAllowedQuantityTypesRow(GetIngredientsAllowedQuantityTypesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ds_Ingredient ds = new ds_Ingredient();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetIngredientsAllowedQuantityTypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ManageIngredientDataTable : global::System.Data.TypedTableBase<ManageIngredientRow> {
            
            private global::System.Data.DataColumn columnResultExecutionCode;
            
            private global::System.Data.DataColumn columnUSPReturnValue;
            
            private global::System.Data.DataColumn columnisError;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ManageIngredientDataTable() {
                this.TableName = "ManageIngredient";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ManageIngredientDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ManageIngredientDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ResultExecutionCodeColumn {
                get {
                    return this.columnResultExecutionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn USPReturnValueColumn {
                get {
                    return this.columnUSPReturnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn isErrorColumn {
                get {
                    return this.columnisError;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ManageIngredientRow this[int index] {
                get {
                    return ((ManageIngredientRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ManageIngredientRowChangeEventHandler ManageIngredientRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ManageIngredientRowChangeEventHandler ManageIngredientRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ManageIngredientRowChangeEventHandler ManageIngredientRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ManageIngredientRowChangeEventHandler ManageIngredientRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddManageIngredientRow(ManageIngredientRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ManageIngredientRow AddManageIngredientRow(string ResultExecutionCode, string USPReturnValue, bool isError) {
                ManageIngredientRow rowManageIngredientRow = ((ManageIngredientRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ResultExecutionCode,
                        USPReturnValue,
                        isError};
                rowManageIngredientRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowManageIngredientRow);
                return rowManageIngredientRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ManageIngredientDataTable cln = ((ManageIngredientDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ManageIngredientDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnResultExecutionCode = base.Columns["ResultExecutionCode"];
                this.columnUSPReturnValue = base.Columns["USPReturnValue"];
                this.columnisError = base.Columns["isError"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnResultExecutionCode = new global::System.Data.DataColumn("ResultExecutionCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResultExecutionCode);
                this.columnUSPReturnValue = new global::System.Data.DataColumn("USPReturnValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSPReturnValue);
                this.columnisError = new global::System.Data.DataColumn("isError", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisError);
                this.columnResultExecutionCode.ReadOnly = true;
                this.columnResultExecutionCode.MaxLength = 2147483647;
                this.columnUSPReturnValue.ReadOnly = true;
                this.columnUSPReturnValue.MaxLength = 2147483647;
                this.columnisError.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ManageIngredientRow NewManageIngredientRow() {
                return ((ManageIngredientRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ManageIngredientRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ManageIngredientRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ManageIngredientRowChanged != null)) {
                    this.ManageIngredientRowChanged(this, new ManageIngredientRowChangeEvent(((ManageIngredientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ManageIngredientRowChanging != null)) {
                    this.ManageIngredientRowChanging(this, new ManageIngredientRowChangeEvent(((ManageIngredientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ManageIngredientRowDeleted != null)) {
                    this.ManageIngredientRowDeleted(this, new ManageIngredientRowChangeEvent(((ManageIngredientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ManageIngredientRowDeleting != null)) {
                    this.ManageIngredientRowDeleting(this, new ManageIngredientRowChangeEvent(((ManageIngredientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveManageIngredientRow(ManageIngredientRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ds_Ingredient ds = new ds_Ingredient();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ManageIngredientDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetIngredientsDataTable : global::System.Data.TypedTableBase<GetIngredientsRow> {
            
            private global::System.Data.DataColumn columnIDIngredient;
            
            private global::System.Data.DataColumn columnIDIngredientPreparationRecipe;
            
            private global::System.Data.DataColumn columnIDIngredientImage;
            
            private global::System.Data.DataColumn columnAverageWeightOfOnePiece;
            
            private global::System.Data.DataColumn columnKcal100gr;
            
            private global::System.Data.DataColumn columngrProteins;
            
            private global::System.Data.DataColumn columngrFats;
            
            private global::System.Data.DataColumn columngrCarbohydrates;
            
            private global::System.Data.DataColumn columngrAlcohol;
            
            private global::System.Data.DataColumn columnmgCalcium;
            
            private global::System.Data.DataColumn columnmgSodium;
            
            private global::System.Data.DataColumn columnmgPhosphorus;
            
            private global::System.Data.DataColumn columnmgPotassium;
            
            private global::System.Data.DataColumn columnmgIron;
            
            private global::System.Data.DataColumn columnmgMagnesium;
            
            private global::System.Data.DataColumn columnmcgVitaminA;
            
            private global::System.Data.DataColumn columnmgVitaminB1;
            
            private global::System.Data.DataColumn columnmgVitaminB2;
            
            private global::System.Data.DataColumn columnmcgVitaminB9;
            
            private global::System.Data.DataColumn columnmcgVitaminB12;
            
            private global::System.Data.DataColumn columnmgVitaminC;
            
            private global::System.Data.DataColumn columngrSaturatedFat;
            
            private global::System.Data.DataColumn columngrMonounsaturredFat;
            
            private global::System.Data.DataColumn columngrPolyunsaturredFat;
            
            private global::System.Data.DataColumn columnmgCholesterol;
            
            private global::System.Data.DataColumn columnmgPhytosterols;
            
            private global::System.Data.DataColumn columnmgOmega3;
            
            private global::System.Data.DataColumn columnIsForBaby;
            
            private global::System.Data.DataColumn columnIsMeat;
            
            private global::System.Data.DataColumn columnIsFish;
            
            private global::System.Data.DataColumn columnIsVegetarian;
            
            private global::System.Data.DataColumn columnIsVegan;
            
            private global::System.Data.DataColumn columnIsGlutenFree;
            
            private global::System.Data.DataColumn columnIsHotSpicy;
            
            private global::System.Data.DataColumn columnChecked;
            
            private global::System.Data.DataColumn columnIngredientCreatedBy;
            
            private global::System.Data.DataColumn columnIngredientCreationDate;
            
            private global::System.Data.DataColumn columnIngredientModifiedByUser;
            
            private global::System.Data.DataColumn columnIngredientLastMod;
            
            private global::System.Data.DataColumn columnIngredientEnabled;
            
            private global::System.Data.DataColumn columnJanuary;
            
            private global::System.Data.DataColumn columnFebruary;
            
            private global::System.Data.DataColumn columnMarch;
            
            private global::System.Data.DataColumn columnApril;
            
            private global::System.Data.DataColumn columnMay;
            
            private global::System.Data.DataColumn columnJune;
            
            private global::System.Data.DataColumn columnJuly;
            
            private global::System.Data.DataColumn columnAugust;
            
            private global::System.Data.DataColumn columnSeptember;
            
            private global::System.Data.DataColumn columnOctober;
            
            private global::System.Data.DataColumn columnNovember;
            
            private global::System.Data.DataColumn columnDecember;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsDataTable() {
                this.TableName = "GetIngredients";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GetIngredientsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected GetIngredientsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDIngredientColumn {
                get {
                    return this.columnIDIngredient;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDIngredientPreparationRecipeColumn {
                get {
                    return this.columnIDIngredientPreparationRecipe;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDIngredientImageColumn {
                get {
                    return this.columnIDIngredientImage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AverageWeightOfOnePieceColumn {
                get {
                    return this.columnAverageWeightOfOnePiece;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Kcal100grColumn {
                get {
                    return this.columnKcal100gr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn grProteinsColumn {
                get {
                    return this.columngrProteins;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn grFatsColumn {
                get {
                    return this.columngrFats;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn grCarbohydratesColumn {
                get {
                    return this.columngrCarbohydrates;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn grAlcoholColumn {
                get {
                    return this.columngrAlcohol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn mgCalciumColumn {
                get {
                    return this.columnmgCalcium;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn mgSodiumColumn {
                get {
                    return this.columnmgSodium;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn mgPhosphorusColumn {
                get {
                    return this.columnmgPhosphorus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn mgPotassiumColumn {
                get {
                    return this.columnmgPotassium;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn mgIronColumn {
                get {
                    return this.columnmgIron;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn mgMagnesiumColumn {
                get {
                    return this.columnmgMagnesium;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn mcgVitaminAColumn {
                get {
                    return this.columnmcgVitaminA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn mgVitaminB1Column {
                get {
                    return this.columnmgVitaminB1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn mgVitaminB2Column {
                get {
                    return this.columnmgVitaminB2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn mcgVitaminB9Column {
                get {
                    return this.columnmcgVitaminB9;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn mcgVitaminB12Column {
                get {
                    return this.columnmcgVitaminB12;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn mgVitaminCColumn {
                get {
                    return this.columnmgVitaminC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn grSaturatedFatColumn {
                get {
                    return this.columngrSaturatedFat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn grMonounsaturredFatColumn {
                get {
                    return this.columngrMonounsaturredFat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn grPolyunsaturredFatColumn {
                get {
                    return this.columngrPolyunsaturredFat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn mgCholesterolColumn {
                get {
                    return this.columnmgCholesterol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn mgPhytosterolsColumn {
                get {
                    return this.columnmgPhytosterols;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn mgOmega3Column {
                get {
                    return this.columnmgOmega3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsForBabyColumn {
                get {
                    return this.columnIsForBaby;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsMeatColumn {
                get {
                    return this.columnIsMeat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsFishColumn {
                get {
                    return this.columnIsFish;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsVegetarianColumn {
                get {
                    return this.columnIsVegetarian;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsVeganColumn {
                get {
                    return this.columnIsVegan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsGlutenFreeColumn {
                get {
                    return this.columnIsGlutenFree;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsHotSpicyColumn {
                get {
                    return this.columnIsHotSpicy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CheckedColumn {
                get {
                    return this.columnChecked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IngredientCreatedByColumn {
                get {
                    return this.columnIngredientCreatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IngredientCreationDateColumn {
                get {
                    return this.columnIngredientCreationDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IngredientModifiedByUserColumn {
                get {
                    return this.columnIngredientModifiedByUser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IngredientLastModColumn {
                get {
                    return this.columnIngredientLastMod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IngredientEnabledColumn {
                get {
                    return this.columnIngredientEnabled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn JanuaryColumn {
                get {
                    return this.columnJanuary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FebruaryColumn {
                get {
                    return this.columnFebruary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MarchColumn {
                get {
                    return this.columnMarch;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AprilColumn {
                get {
                    return this.columnApril;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MayColumn {
                get {
                    return this.columnMay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn JuneColumn {
                get {
                    return this.columnJune;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn JulyColumn {
                get {
                    return this.columnJuly;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AugustColumn {
                get {
                    return this.columnAugust;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SeptemberColumn {
                get {
                    return this.columnSeptember;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn OctoberColumn {
                get {
                    return this.columnOctober;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NovemberColumn {
                get {
                    return this.columnNovember;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DecemberColumn {
                get {
                    return this.columnDecember;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsRow this[int index] {
                get {
                    return ((GetIngredientsRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsRowChangeEventHandler GetIngredientsRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsRowChangeEventHandler GetIngredientsRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsRowChangeEventHandler GetIngredientsRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsRowChangeEventHandler GetIngredientsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddGetIngredientsRow(GetIngredientsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsRow AddGetIngredientsRow(
                        System.Guid IDIngredient, 
                        System.Guid IDIngredientPreparationRecipe, 
                        System.Guid IDIngredientImage, 
                        double AverageWeightOfOnePiece, 
                        double Kcal100gr, 
                        double grProteins, 
                        double grFats, 
                        double grCarbohydrates, 
                        double grAlcohol, 
                        double mgCalcium, 
                        double mgSodium, 
                        double mgPhosphorus, 
                        double mgPotassium, 
                        double mgIron, 
                        double mgMagnesium, 
                        double mcgVitaminA, 
                        double mgVitaminB1, 
                        double mgVitaminB2, 
                        double mcgVitaminB9, 
                        double mcgVitaminB12, 
                        double mgVitaminC, 
                        double grSaturatedFat, 
                        double grMonounsaturredFat, 
                        double grPolyunsaturredFat, 
                        double mgCholesterol, 
                        double mgPhytosterols, 
                        double mgOmega3, 
                        bool IsForBaby, 
                        bool IsMeat, 
                        bool IsFish, 
                        bool IsVegetarian, 
                        bool IsVegan, 
                        bool IsGlutenFree, 
                        bool IsHotSpicy, 
                        bool Checked, 
                        System.Guid IngredientCreatedBy, 
                        System.DateTime IngredientCreationDate, 
                        System.Guid IngredientModifiedByUser, 
                        System.DateTime IngredientLastMod, 
                        bool IngredientEnabled, 
                        bool January, 
                        bool February, 
                        bool March, 
                        bool April, 
                        bool May, 
                        bool June, 
                        bool July, 
                        bool August, 
                        bool September, 
                        bool October, 
                        bool November, 
                        bool December) {
                GetIngredientsRow rowGetIngredientsRow = ((GetIngredientsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IDIngredient,
                        IDIngredientPreparationRecipe,
                        IDIngredientImage,
                        AverageWeightOfOnePiece,
                        Kcal100gr,
                        grProteins,
                        grFats,
                        grCarbohydrates,
                        grAlcohol,
                        mgCalcium,
                        mgSodium,
                        mgPhosphorus,
                        mgPotassium,
                        mgIron,
                        mgMagnesium,
                        mcgVitaminA,
                        mgVitaminB1,
                        mgVitaminB2,
                        mcgVitaminB9,
                        mcgVitaminB12,
                        mgVitaminC,
                        grSaturatedFat,
                        grMonounsaturredFat,
                        grPolyunsaturredFat,
                        mgCholesterol,
                        mgPhytosterols,
                        mgOmega3,
                        IsForBaby,
                        IsMeat,
                        IsFish,
                        IsVegetarian,
                        IsVegan,
                        IsGlutenFree,
                        IsHotSpicy,
                        Checked,
                        IngredientCreatedBy,
                        IngredientCreationDate,
                        IngredientModifiedByUser,
                        IngredientLastMod,
                        IngredientEnabled,
                        January,
                        February,
                        March,
                        April,
                        May,
                        June,
                        July,
                        August,
                        September,
                        October,
                        November,
                        December};
                rowGetIngredientsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetIngredientsRow);
                return rowGetIngredientsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsRow FindByIDIngredient(System.Guid IDIngredient) {
                return ((GetIngredientsRow)(this.Rows.Find(new object[] {
                            IDIngredient})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                GetIngredientsDataTable cln = ((GetIngredientsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetIngredientsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnIDIngredient = base.Columns["IDIngredient"];
                this.columnIDIngredientPreparationRecipe = base.Columns["IDIngredientPreparationRecipe"];
                this.columnIDIngredientImage = base.Columns["IDIngredientImage"];
                this.columnAverageWeightOfOnePiece = base.Columns["AverageWeightOfOnePiece"];
                this.columnKcal100gr = base.Columns["Kcal100gr"];
                this.columngrProteins = base.Columns["grProteins"];
                this.columngrFats = base.Columns["grFats"];
                this.columngrCarbohydrates = base.Columns["grCarbohydrates"];
                this.columngrAlcohol = base.Columns["grAlcohol"];
                this.columnmgCalcium = base.Columns["mgCalcium"];
                this.columnmgSodium = base.Columns["mgSodium"];
                this.columnmgPhosphorus = base.Columns["mgPhosphorus"];
                this.columnmgPotassium = base.Columns["mgPotassium"];
                this.columnmgIron = base.Columns["mgIron"];
                this.columnmgMagnesium = base.Columns["mgMagnesium"];
                this.columnmcgVitaminA = base.Columns["mcgVitaminA"];
                this.columnmgVitaminB1 = base.Columns["mgVitaminB1"];
                this.columnmgVitaminB2 = base.Columns["mgVitaminB2"];
                this.columnmcgVitaminB9 = base.Columns["mcgVitaminB9"];
                this.columnmcgVitaminB12 = base.Columns["mcgVitaminB12"];
                this.columnmgVitaminC = base.Columns["mgVitaminC"];
                this.columngrSaturatedFat = base.Columns["grSaturatedFat"];
                this.columngrMonounsaturredFat = base.Columns["grMonounsaturredFat"];
                this.columngrPolyunsaturredFat = base.Columns["grPolyunsaturredFat"];
                this.columnmgCholesterol = base.Columns["mgCholesterol"];
                this.columnmgPhytosterols = base.Columns["mgPhytosterols"];
                this.columnmgOmega3 = base.Columns["mgOmega3"];
                this.columnIsForBaby = base.Columns["IsForBaby"];
                this.columnIsMeat = base.Columns["IsMeat"];
                this.columnIsFish = base.Columns["IsFish"];
                this.columnIsVegetarian = base.Columns["IsVegetarian"];
                this.columnIsVegan = base.Columns["IsVegan"];
                this.columnIsGlutenFree = base.Columns["IsGlutenFree"];
                this.columnIsHotSpicy = base.Columns["IsHotSpicy"];
                this.columnChecked = base.Columns["Checked"];
                this.columnIngredientCreatedBy = base.Columns["IngredientCreatedBy"];
                this.columnIngredientCreationDate = base.Columns["IngredientCreationDate"];
                this.columnIngredientModifiedByUser = base.Columns["IngredientModifiedByUser"];
                this.columnIngredientLastMod = base.Columns["IngredientLastMod"];
                this.columnIngredientEnabled = base.Columns["IngredientEnabled"];
                this.columnJanuary = base.Columns["January"];
                this.columnFebruary = base.Columns["February"];
                this.columnMarch = base.Columns["March"];
                this.columnApril = base.Columns["April"];
                this.columnMay = base.Columns["May"];
                this.columnJune = base.Columns["June"];
                this.columnJuly = base.Columns["July"];
                this.columnAugust = base.Columns["August"];
                this.columnSeptember = base.Columns["September"];
                this.columnOctober = base.Columns["October"];
                this.columnNovember = base.Columns["November"];
                this.columnDecember = base.Columns["December"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnIDIngredient = new global::System.Data.DataColumn("IDIngredient", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDIngredient);
                this.columnIDIngredientPreparationRecipe = new global::System.Data.DataColumn("IDIngredientPreparationRecipe", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDIngredientPreparationRecipe);
                this.columnIDIngredientImage = new global::System.Data.DataColumn("IDIngredientImage", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDIngredientImage);
                this.columnAverageWeightOfOnePiece = new global::System.Data.DataColumn("AverageWeightOfOnePiece", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverageWeightOfOnePiece);
                this.columnKcal100gr = new global::System.Data.DataColumn("Kcal100gr", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKcal100gr);
                this.columngrProteins = new global::System.Data.DataColumn("grProteins", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngrProteins);
                this.columngrFats = new global::System.Data.DataColumn("grFats", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngrFats);
                this.columngrCarbohydrates = new global::System.Data.DataColumn("grCarbohydrates", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngrCarbohydrates);
                this.columngrAlcohol = new global::System.Data.DataColumn("grAlcohol", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngrAlcohol);
                this.columnmgCalcium = new global::System.Data.DataColumn("mgCalcium", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmgCalcium);
                this.columnmgSodium = new global::System.Data.DataColumn("mgSodium", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmgSodium);
                this.columnmgPhosphorus = new global::System.Data.DataColumn("mgPhosphorus", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmgPhosphorus);
                this.columnmgPotassium = new global::System.Data.DataColumn("mgPotassium", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmgPotassium);
                this.columnmgIron = new global::System.Data.DataColumn("mgIron", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmgIron);
                this.columnmgMagnesium = new global::System.Data.DataColumn("mgMagnesium", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmgMagnesium);
                this.columnmcgVitaminA = new global::System.Data.DataColumn("mcgVitaminA", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmcgVitaminA);
                this.columnmgVitaminB1 = new global::System.Data.DataColumn("mgVitaminB1", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmgVitaminB1);
                this.columnmgVitaminB2 = new global::System.Data.DataColumn("mgVitaminB2", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmgVitaminB2);
                this.columnmcgVitaminB9 = new global::System.Data.DataColumn("mcgVitaminB9", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmcgVitaminB9);
                this.columnmcgVitaminB12 = new global::System.Data.DataColumn("mcgVitaminB12", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmcgVitaminB12);
                this.columnmgVitaminC = new global::System.Data.DataColumn("mgVitaminC", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmgVitaminC);
                this.columngrSaturatedFat = new global::System.Data.DataColumn("grSaturatedFat", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngrSaturatedFat);
                this.columngrMonounsaturredFat = new global::System.Data.DataColumn("grMonounsaturredFat", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngrMonounsaturredFat);
                this.columngrPolyunsaturredFat = new global::System.Data.DataColumn("grPolyunsaturredFat", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngrPolyunsaturredFat);
                this.columnmgCholesterol = new global::System.Data.DataColumn("mgCholesterol", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmgCholesterol);
                this.columnmgPhytosterols = new global::System.Data.DataColumn("mgPhytosterols", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmgPhytosterols);
                this.columnmgOmega3 = new global::System.Data.DataColumn("mgOmega3", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmgOmega3);
                this.columnIsForBaby = new global::System.Data.DataColumn("IsForBaby", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsForBaby);
                this.columnIsMeat = new global::System.Data.DataColumn("IsMeat", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsMeat);
                this.columnIsFish = new global::System.Data.DataColumn("IsFish", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsFish);
                this.columnIsVegetarian = new global::System.Data.DataColumn("IsVegetarian", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsVegetarian);
                this.columnIsVegan = new global::System.Data.DataColumn("IsVegan", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsVegan);
                this.columnIsGlutenFree = new global::System.Data.DataColumn("IsGlutenFree", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsGlutenFree);
                this.columnIsHotSpicy = new global::System.Data.DataColumn("IsHotSpicy", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsHotSpicy);
                this.columnChecked = new global::System.Data.DataColumn("Checked", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChecked);
                this.columnIngredientCreatedBy = new global::System.Data.DataColumn("IngredientCreatedBy", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIngredientCreatedBy);
                this.columnIngredientCreationDate = new global::System.Data.DataColumn("IngredientCreationDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIngredientCreationDate);
                this.columnIngredientModifiedByUser = new global::System.Data.DataColumn("IngredientModifiedByUser", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIngredientModifiedByUser);
                this.columnIngredientLastMod = new global::System.Data.DataColumn("IngredientLastMod", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIngredientLastMod);
                this.columnIngredientEnabled = new global::System.Data.DataColumn("IngredientEnabled", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIngredientEnabled);
                this.columnJanuary = new global::System.Data.DataColumn("January", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJanuary);
                this.columnFebruary = new global::System.Data.DataColumn("February", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFebruary);
                this.columnMarch = new global::System.Data.DataColumn("March", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarch);
                this.columnApril = new global::System.Data.DataColumn("April", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApril);
                this.columnMay = new global::System.Data.DataColumn("May", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMay);
                this.columnJune = new global::System.Data.DataColumn("June", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJune);
                this.columnJuly = new global::System.Data.DataColumn("July", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJuly);
                this.columnAugust = new global::System.Data.DataColumn("August", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAugust);
                this.columnSeptember = new global::System.Data.DataColumn("September", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeptember);
                this.columnOctober = new global::System.Data.DataColumn("October", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOctober);
                this.columnNovember = new global::System.Data.DataColumn("November", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNovember);
                this.columnDecember = new global::System.Data.DataColumn("December", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDecember);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDIngredient}, true));
                this.columnIDIngredient.AllowDBNull = false;
                this.columnIDIngredient.Unique = true;
                this.columngrFats.Caption = "grlFats";
                this.columnIsVegetarian.AllowDBNull = false;
                this.columnIsVegan.AllowDBNull = false;
                this.columnIsGlutenFree.AllowDBNull = false;
                this.columnIsHotSpicy.AllowDBNull = false;
                this.columnChecked.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsRow NewGetIngredientsRow() {
                return ((GetIngredientsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetIngredientsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(GetIngredientsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetIngredientsRowChanged != null)) {
                    this.GetIngredientsRowChanged(this, new GetIngredientsRowChangeEvent(((GetIngredientsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetIngredientsRowChanging != null)) {
                    this.GetIngredientsRowChanging(this, new GetIngredientsRowChangeEvent(((GetIngredientsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetIngredientsRowDeleted != null)) {
                    this.GetIngredientsRowDeleted(this, new GetIngredientsRowChangeEvent(((GetIngredientsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetIngredientsRowDeleting != null)) {
                    this.GetIngredientsRowDeleting(this, new GetIngredientsRowChangeEvent(((GetIngredientsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveGetIngredientsRow(GetIngredientsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ds_Ingredient ds = new ds_Ingredient();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetIngredientsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetQuantityNotStdDataTable : global::System.Data.TypedTableBase<GetQuantityNotStdRow> {
            
            private global::System.Data.DataColumn columnIDQuantityNotStd;
            
            private global::System.Data.DataColumn columnPercentageFactor;
            
            private global::System.Data.DataColumn columnEnabledToUser;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetQuantityNotStdDataTable() {
                this.TableName = "GetQuantityNotStd";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GetQuantityNotStdDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected GetQuantityNotStdDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDQuantityNotStdColumn {
                get {
                    return this.columnIDQuantityNotStd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PercentageFactorColumn {
                get {
                    return this.columnPercentageFactor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn EnabledToUserColumn {
                get {
                    return this.columnEnabledToUser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetQuantityNotStdRow this[int index] {
                get {
                    return ((GetQuantityNotStdRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetQuantityNotStdRowChangeEventHandler GetQuantityNotStdRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetQuantityNotStdRowChangeEventHandler GetQuantityNotStdRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetQuantityNotStdRowChangeEventHandler GetQuantityNotStdRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetQuantityNotStdRowChangeEventHandler GetQuantityNotStdRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddGetQuantityNotStdRow(GetQuantityNotStdRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetQuantityNotStdRow AddGetQuantityNotStdRow(int PercentageFactor, bool EnabledToUser) {
                GetQuantityNotStdRow rowGetQuantityNotStdRow = ((GetQuantityNotStdRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PercentageFactor,
                        EnabledToUser};
                rowGetQuantityNotStdRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetQuantityNotStdRow);
                return rowGetQuantityNotStdRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetQuantityNotStdRow FindByIDQuantityNotStd(int IDQuantityNotStd) {
                return ((GetQuantityNotStdRow)(this.Rows.Find(new object[] {
                            IDQuantityNotStd})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                GetQuantityNotStdDataTable cln = ((GetQuantityNotStdDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetQuantityNotStdDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnIDQuantityNotStd = base.Columns["IDQuantityNotStd"];
                this.columnPercentageFactor = base.Columns["PercentageFactor"];
                this.columnEnabledToUser = base.Columns["EnabledToUser"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnIDQuantityNotStd = new global::System.Data.DataColumn("IDQuantityNotStd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDQuantityNotStd);
                this.columnPercentageFactor = new global::System.Data.DataColumn("PercentageFactor", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPercentageFactor);
                this.columnEnabledToUser = new global::System.Data.DataColumn("EnabledToUser", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnabledToUser);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDQuantityNotStd}, true));
                this.columnIDQuantityNotStd.AutoIncrement = true;
                this.columnIDQuantityNotStd.AutoIncrementSeed = -1;
                this.columnIDQuantityNotStd.AutoIncrementStep = -1;
                this.columnIDQuantityNotStd.AllowDBNull = false;
                this.columnIDQuantityNotStd.ReadOnly = true;
                this.columnIDQuantityNotStd.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetQuantityNotStdRow NewGetQuantityNotStdRow() {
                return ((GetQuantityNotStdRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetQuantityNotStdRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(GetQuantityNotStdRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetQuantityNotStdRowChanged != null)) {
                    this.GetQuantityNotStdRowChanged(this, new GetQuantityNotStdRowChangeEvent(((GetQuantityNotStdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetQuantityNotStdRowChanging != null)) {
                    this.GetQuantityNotStdRowChanging(this, new GetQuantityNotStdRowChangeEvent(((GetQuantityNotStdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetQuantityNotStdRowDeleted != null)) {
                    this.GetQuantityNotStdRowDeleted(this, new GetQuantityNotStdRowChangeEvent(((GetQuantityNotStdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetQuantityNotStdRowDeleting != null)) {
                    this.GetQuantityNotStdRowDeleting(this, new GetQuantityNotStdRowChangeEvent(((GetQuantityNotStdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveGetQuantityNotStdRow(GetQuantityNotStdRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ds_Ingredient ds = new ds_Ingredient();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetQuantityNotStdDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetQuantityNotStdLanguageDataTable : global::System.Data.TypedTableBase<GetQuantityNotStdLanguageRow> {
            
            private global::System.Data.DataColumn columnIDQuantityNotStdLanguage;
            
            private global::System.Data.DataColumn columnIDQuantityNotStd;
            
            private global::System.Data.DataColumn columnIDLanguage;
            
            private global::System.Data.DataColumn columnQuantityNotStdSingular;
            
            private global::System.Data.DataColumn columnQuantityNotStdPlural;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetQuantityNotStdLanguageDataTable() {
                this.TableName = "GetQuantityNotStdLanguage";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GetQuantityNotStdLanguageDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected GetQuantityNotStdLanguageDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDQuantityNotStdLanguageColumn {
                get {
                    return this.columnIDQuantityNotStdLanguage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDQuantityNotStdColumn {
                get {
                    return this.columnIDQuantityNotStd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDLanguageColumn {
                get {
                    return this.columnIDLanguage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn QuantityNotStdSingularColumn {
                get {
                    return this.columnQuantityNotStdSingular;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn QuantityNotStdPluralColumn {
                get {
                    return this.columnQuantityNotStdPlural;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetQuantityNotStdLanguageRow this[int index] {
                get {
                    return ((GetQuantityNotStdLanguageRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetQuantityNotStdLanguageRowChangeEventHandler GetQuantityNotStdLanguageRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetQuantityNotStdLanguageRowChangeEventHandler GetQuantityNotStdLanguageRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetQuantityNotStdLanguageRowChangeEventHandler GetQuantityNotStdLanguageRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetQuantityNotStdLanguageRowChangeEventHandler GetQuantityNotStdLanguageRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddGetQuantityNotStdLanguageRow(GetQuantityNotStdLanguageRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetQuantityNotStdLanguageRow AddGetQuantityNotStdLanguageRow(GetQuantityNotStdRow parentGetQuantityNotStdRowByFK_QuantityNotStdLanguage_QuantityNotStd, int IDLanguage, string QuantityNotStdSingular, string QuantityNotStdPlural) {
                GetQuantityNotStdLanguageRow rowGetQuantityNotStdLanguageRow = ((GetQuantityNotStdLanguageRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        IDLanguage,
                        QuantityNotStdSingular,
                        QuantityNotStdPlural};
                if ((parentGetQuantityNotStdRowByFK_QuantityNotStdLanguage_QuantityNotStd != null)) {
                    columnValuesArray[1] = parentGetQuantityNotStdRowByFK_QuantityNotStdLanguage_QuantityNotStd[0];
                }
                rowGetQuantityNotStdLanguageRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetQuantityNotStdLanguageRow);
                return rowGetQuantityNotStdLanguageRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetQuantityNotStdLanguageRow FindByIDQuantityNotStdLanguage(int IDQuantityNotStdLanguage) {
                return ((GetQuantityNotStdLanguageRow)(this.Rows.Find(new object[] {
                            IDQuantityNotStdLanguage})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                GetQuantityNotStdLanguageDataTable cln = ((GetQuantityNotStdLanguageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetQuantityNotStdLanguageDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnIDQuantityNotStdLanguage = base.Columns["IDQuantityNotStdLanguage"];
                this.columnIDQuantityNotStd = base.Columns["IDQuantityNotStd"];
                this.columnIDLanguage = base.Columns["IDLanguage"];
                this.columnQuantityNotStdSingular = base.Columns["QuantityNotStdSingular"];
                this.columnQuantityNotStdPlural = base.Columns["QuantityNotStdPlural"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnIDQuantityNotStdLanguage = new global::System.Data.DataColumn("IDQuantityNotStdLanguage", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDQuantityNotStdLanguage);
                this.columnIDQuantityNotStd = new global::System.Data.DataColumn("IDQuantityNotStd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDQuantityNotStd);
                this.columnIDLanguage = new global::System.Data.DataColumn("IDLanguage", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDLanguage);
                this.columnQuantityNotStdSingular = new global::System.Data.DataColumn("QuantityNotStdSingular", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantityNotStdSingular);
                this.columnQuantityNotStdPlural = new global::System.Data.DataColumn("QuantityNotStdPlural", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantityNotStdPlural);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDQuantityNotStdLanguage}, true));
                this.columnIDQuantityNotStdLanguage.AutoIncrement = true;
                this.columnIDQuantityNotStdLanguage.AutoIncrementSeed = -1;
                this.columnIDQuantityNotStdLanguage.AutoIncrementStep = -1;
                this.columnIDQuantityNotStdLanguage.AllowDBNull = false;
                this.columnIDQuantityNotStdLanguage.ReadOnly = true;
                this.columnIDQuantityNotStdLanguage.Unique = true;
                this.columnQuantityNotStdSingular.MaxLength = 150;
                this.columnQuantityNotStdPlural.MaxLength = 150;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetQuantityNotStdLanguageRow NewGetQuantityNotStdLanguageRow() {
                return ((GetQuantityNotStdLanguageRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetQuantityNotStdLanguageRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(GetQuantityNotStdLanguageRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetQuantityNotStdLanguageRowChanged != null)) {
                    this.GetQuantityNotStdLanguageRowChanged(this, new GetQuantityNotStdLanguageRowChangeEvent(((GetQuantityNotStdLanguageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetQuantityNotStdLanguageRowChanging != null)) {
                    this.GetQuantityNotStdLanguageRowChanging(this, new GetQuantityNotStdLanguageRowChangeEvent(((GetQuantityNotStdLanguageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetQuantityNotStdLanguageRowDeleted != null)) {
                    this.GetQuantityNotStdLanguageRowDeleted(this, new GetQuantityNotStdLanguageRowChangeEvent(((GetQuantityNotStdLanguageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetQuantityNotStdLanguageRowDeleting != null)) {
                    this.GetQuantityNotStdLanguageRowDeleting(this, new GetQuantityNotStdLanguageRowChangeEvent(((GetQuantityNotStdLanguageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveGetQuantityNotStdLanguageRow(GetQuantityNotStdLanguageRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ds_Ingredient ds = new ds_Ingredient();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetQuantityNotStdLanguageDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetIngredientsAlternativesDataTable : global::System.Data.TypedTableBase<GetIngredientsAlternativesRow> {
            
            private global::System.Data.DataColumn columnIDIngredientAlternative;
            
            private global::System.Data.DataColumn columnIDIngredientMain;
            
            private global::System.Data.DataColumn columnIDIngredientSlave;
            
            private global::System.Data.DataColumn columnAddedByUser;
            
            private global::System.Data.DataColumn columnAddedOn;
            
            private global::System.Data.DataColumn columnCheckedBy;
            
            private global::System.Data.DataColumn columnCheckedOn;
            
            private global::System.Data.DataColumn columnChecked;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsAlternativesDataTable() {
                this.TableName = "GetIngredientsAlternatives";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GetIngredientsAlternativesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected GetIngredientsAlternativesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDIngredientAlternativeColumn {
                get {
                    return this.columnIDIngredientAlternative;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDIngredientMainColumn {
                get {
                    return this.columnIDIngredientMain;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDIngredientSlaveColumn {
                get {
                    return this.columnIDIngredientSlave;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AddedByUserColumn {
                get {
                    return this.columnAddedByUser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AddedOnColumn {
                get {
                    return this.columnAddedOn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CheckedByColumn {
                get {
                    return this.columnCheckedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CheckedOnColumn {
                get {
                    return this.columnCheckedOn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CheckedColumn {
                get {
                    return this.columnChecked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsAlternativesRow this[int index] {
                get {
                    return ((GetIngredientsAlternativesRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsAlternativesRowChangeEventHandler GetIngredientsAlternativesRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsAlternativesRowChangeEventHandler GetIngredientsAlternativesRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsAlternativesRowChangeEventHandler GetIngredientsAlternativesRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GetIngredientsAlternativesRowChangeEventHandler GetIngredientsAlternativesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddGetIngredientsAlternativesRow(GetIngredientsAlternativesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsAlternativesRow AddGetIngredientsAlternativesRow(System.Guid IDIngredientAlternative, System.Guid IDIngredientMain, System.Guid IDIngredientSlave, System.Guid AddedByUser, System.DateTime AddedOn, System.Guid CheckedBy, System.DateTime CheckedOn, bool Checked) {
                GetIngredientsAlternativesRow rowGetIngredientsAlternativesRow = ((GetIngredientsAlternativesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IDIngredientAlternative,
                        IDIngredientMain,
                        IDIngredientSlave,
                        AddedByUser,
                        AddedOn,
                        CheckedBy,
                        CheckedOn,
                        Checked};
                rowGetIngredientsAlternativesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetIngredientsAlternativesRow);
                return rowGetIngredientsAlternativesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsAlternativesRow FindByIDIngredientAlternative(System.Guid IDIngredientAlternative) {
                return ((GetIngredientsAlternativesRow)(this.Rows.Find(new object[] {
                            IDIngredientAlternative})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                GetIngredientsAlternativesDataTable cln = ((GetIngredientsAlternativesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetIngredientsAlternativesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnIDIngredientAlternative = base.Columns["IDIngredientAlternative"];
                this.columnIDIngredientMain = base.Columns["IDIngredientMain"];
                this.columnIDIngredientSlave = base.Columns["IDIngredientSlave"];
                this.columnAddedByUser = base.Columns["AddedByUser"];
                this.columnAddedOn = base.Columns["AddedOn"];
                this.columnCheckedBy = base.Columns["CheckedBy"];
                this.columnCheckedOn = base.Columns["CheckedOn"];
                this.columnChecked = base.Columns["Checked"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnIDIngredientAlternative = new global::System.Data.DataColumn("IDIngredientAlternative", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDIngredientAlternative);
                this.columnIDIngredientMain = new global::System.Data.DataColumn("IDIngredientMain", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDIngredientMain);
                this.columnIDIngredientSlave = new global::System.Data.DataColumn("IDIngredientSlave", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDIngredientSlave);
                this.columnAddedByUser = new global::System.Data.DataColumn("AddedByUser", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddedByUser);
                this.columnAddedOn = new global::System.Data.DataColumn("AddedOn", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddedOn);
                this.columnCheckedBy = new global::System.Data.DataColumn("CheckedBy", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckedBy);
                this.columnCheckedOn = new global::System.Data.DataColumn("CheckedOn", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckedOn);
                this.columnChecked = new global::System.Data.DataColumn("Checked", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChecked);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDIngredientAlternative}, true));
                this.columnIDIngredientAlternative.AllowDBNull = false;
                this.columnIDIngredientAlternative.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsAlternativesRow NewGetIngredientsAlternativesRow() {
                return ((GetIngredientsAlternativesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetIngredientsAlternativesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(GetIngredientsAlternativesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetIngredientsAlternativesRowChanged != null)) {
                    this.GetIngredientsAlternativesRowChanged(this, new GetIngredientsAlternativesRowChangeEvent(((GetIngredientsAlternativesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetIngredientsAlternativesRowChanging != null)) {
                    this.GetIngredientsAlternativesRowChanging(this, new GetIngredientsAlternativesRowChangeEvent(((GetIngredientsAlternativesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetIngredientsAlternativesRowDeleted != null)) {
                    this.GetIngredientsAlternativesRowDeleted(this, new GetIngredientsAlternativesRowChangeEvent(((GetIngredientsAlternativesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetIngredientsAlternativesRowDeleting != null)) {
                    this.GetIngredientsAlternativesRowDeleting(this, new GetIngredientsAlternativesRowChangeEvent(((GetIngredientsAlternativesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveGetIngredientsAlternativesRow(GetIngredientsAlternativesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ds_Ingredient ds = new ds_Ingredient();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetIngredientsAlternativesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GETSiteMapIngredientDataTable : global::System.Data.TypedTableBase<GETSiteMapIngredientRow> {
            
            private global::System.Data.DataColumn columnSitemapURL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GETSiteMapIngredientDataTable() {
                this.TableName = "GETSiteMapIngredient";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GETSiteMapIngredientDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected GETSiteMapIngredientDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SitemapURLColumn {
                get {
                    return this.columnSitemapURL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GETSiteMapIngredientRow this[int index] {
                get {
                    return ((GETSiteMapIngredientRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GETSiteMapIngredientRowChangeEventHandler GETSiteMapIngredientRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GETSiteMapIngredientRowChangeEventHandler GETSiteMapIngredientRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GETSiteMapIngredientRowChangeEventHandler GETSiteMapIngredientRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GETSiteMapIngredientRowChangeEventHandler GETSiteMapIngredientRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddGETSiteMapIngredientRow(GETSiteMapIngredientRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GETSiteMapIngredientRow AddGETSiteMapIngredientRow(string SitemapURL) {
                GETSiteMapIngredientRow rowGETSiteMapIngredientRow = ((GETSiteMapIngredientRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SitemapURL};
                rowGETSiteMapIngredientRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGETSiteMapIngredientRow);
                return rowGETSiteMapIngredientRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                GETSiteMapIngredientDataTable cln = ((GETSiteMapIngredientDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GETSiteMapIngredientDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnSitemapURL = base.Columns["SitemapURL"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnSitemapURL = new global::System.Data.DataColumn("SitemapURL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSitemapURL);
                this.columnSitemapURL.ReadOnly = true;
                this.columnSitemapURL.MaxLength = 4000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GETSiteMapIngredientRow NewGETSiteMapIngredientRow() {
                return ((GETSiteMapIngredientRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GETSiteMapIngredientRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(GETSiteMapIngredientRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GETSiteMapIngredientRowChanged != null)) {
                    this.GETSiteMapIngredientRowChanged(this, new GETSiteMapIngredientRowChangeEvent(((GETSiteMapIngredientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GETSiteMapIngredientRowChanging != null)) {
                    this.GETSiteMapIngredientRowChanging(this, new GETSiteMapIngredientRowChangeEvent(((GETSiteMapIngredientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GETSiteMapIngredientRowDeleted != null)) {
                    this.GETSiteMapIngredientRowDeleted(this, new GETSiteMapIngredientRowChangeEvent(((GETSiteMapIngredientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GETSiteMapIngredientRowDeleting != null)) {
                    this.GETSiteMapIngredientRowDeleting(this, new GETSiteMapIngredientRowChangeEvent(((GETSiteMapIngredientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveGETSiteMapIngredientRow(GETSiteMapIngredientRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ds_Ingredient ds = new ds_Ingredient();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GETSiteMapIngredientDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class GetIngredientsLanguagesRow : global::System.Data.DataRow {
            
            private GetIngredientsLanguagesDataTable tableGetIngredientsLanguages;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GetIngredientsLanguagesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetIngredientsLanguages = ((GetIngredientsLanguagesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.Guid IDIngredientLanguage {
                get {
                    return ((global::System.Guid)(this[this.tableGetIngredientsLanguages.IDIngredientLanguageColumn]));
                }
                set {
                    this[this.tableGetIngredientsLanguages.IDIngredientLanguageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.Guid IDIngredient {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableGetIngredientsLanguages.IDIngredientColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDIngredient\' in table \'GetIngredientsLanguages\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsLanguages.IDIngredientColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDLanguage {
                get {
                    try {
                        return ((int)(this[this.tableGetIngredientsLanguages.IDLanguageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDLanguage\' in table \'GetIngredientsLanguages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsLanguages.IDLanguageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string IngredientSingular {
                get {
                    try {
                        return ((string)(this[this.tableGetIngredientsLanguages.IngredientSingularColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IngredientSingular\' in table \'GetIngredientsLanguages\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsLanguages.IngredientSingularColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string IngredientPlural {
                get {
                    try {
                        return ((string)(this[this.tableGetIngredientsLanguages.IngredientPluralColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IngredientPlural\' in table \'GetIngredientsLanguages\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsLanguages.IngredientPluralColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string IngredientDescription {
                get {
                    try {
                        return ((string)(this[this.tableGetIngredientsLanguages.IngredientDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IngredientDescription\' in table \'GetIngredientsLanguages\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsLanguages.IngredientDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool isAutoTranslate {
                get {
                    try {
                        return ((bool)(this[this.tableGetIngredientsLanguages.isAutoTranslateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isAutoTranslate\' in table \'GetIngredientsLanguages\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsLanguages.isAutoTranslateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int GeoIDRegion {
                get {
                    try {
                        return ((int)(this[this.tableGetIngredientsLanguages.GeoIDRegionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GeoIDRegion\' in table \'GetIngredientsLanguages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsLanguages.GeoIDRegionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.Guid IDIngredientImage {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableGetIngredientsLanguages.IDIngredientImageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDIngredientImage\' in table \'GetIngredientsLanguages\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsLanguages.IDIngredientImageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsRow GetIngredientsRow {
                get {
                    return ((GetIngredientsRow)(this.GetParentRow(this.Table.ParentRelations["FK_IngredientsLanguages_Ingredients"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_IngredientsLanguages_Ingredients"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIDIngredientNull() {
                return this.IsNull(this.tableGetIngredientsLanguages.IDIngredientColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIDIngredientNull() {
                this[this.tableGetIngredientsLanguages.IDIngredientColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIDLanguageNull() {
                return this.IsNull(this.tableGetIngredientsLanguages.IDLanguageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIDLanguageNull() {
                this[this.tableGetIngredientsLanguages.IDLanguageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIngredientSingularNull() {
                return this.IsNull(this.tableGetIngredientsLanguages.IngredientSingularColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIngredientSingularNull() {
                this[this.tableGetIngredientsLanguages.IngredientSingularColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIngredientPluralNull() {
                return this.IsNull(this.tableGetIngredientsLanguages.IngredientPluralColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIngredientPluralNull() {
                this[this.tableGetIngredientsLanguages.IngredientPluralColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIngredientDescriptionNull() {
                return this.IsNull(this.tableGetIngredientsLanguages.IngredientDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIngredientDescriptionNull() {
                this[this.tableGetIngredientsLanguages.IngredientDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsisAutoTranslateNull() {
                return this.IsNull(this.tableGetIngredientsLanguages.isAutoTranslateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetisAutoTranslateNull() {
                this[this.tableGetIngredientsLanguages.isAutoTranslateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGeoIDRegionNull() {
                return this.IsNull(this.tableGetIngredientsLanguages.GeoIDRegionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGeoIDRegionNull() {
                this[this.tableGetIngredientsLanguages.GeoIDRegionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIDIngredientImageNull() {
                return this.IsNull(this.tableGetIngredientsLanguages.IDIngredientImageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIDIngredientImageNull() {
                this[this.tableGetIngredientsLanguages.IDIngredientImageColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class GetIngredientsCategoriesRow : global::System.Data.DataRow {
            
            private GetIngredientsCategoriesDataTable tableGetIngredientsCategories;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GetIngredientsCategoriesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetIngredientsCategories = ((GetIngredientsCategoriesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDIngredientCategoryFather {
                get {
                    try {
                        return ((int)(this[this.tableGetIngredientsCategories.IDIngredientCategoryFatherColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDIngredientCategoryFather\' in table \'GetIngredientsCategor" +
                                "ies\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsCategories.IDIngredientCategoryFatherColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Enabled {
                get {
                    try {
                        return ((bool)(this[this.tableGetIngredientsCategories.EnabledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Enabled\' in table \'GetIngredientsCategories\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsCategories.EnabledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string IngredientCategoryLanguage {
                get {
                    try {
                        return ((string)(this[this.tableGetIngredientsCategories.IngredientCategoryLanguageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IngredientCategoryLanguage\' in table \'GetIngredientsCategor" +
                                "ies\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsCategories.IngredientCategoryLanguageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIDIngredientCategoryFatherNull() {
                return this.IsNull(this.tableGetIngredientsCategories.IDIngredientCategoryFatherColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIDIngredientCategoryFatherNull() {
                this[this.tableGetIngredientsCategories.IDIngredientCategoryFatherColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEnabledNull() {
                return this.IsNull(this.tableGetIngredientsCategories.EnabledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEnabledNull() {
                this[this.tableGetIngredientsCategories.EnabledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIngredientCategoryLanguageNull() {
                return this.IsNull(this.tableGetIngredientsCategories.IngredientCategoryLanguageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIngredientCategoryLanguageNull() {
                this[this.tableGetIngredientsCategories.IngredientCategoryLanguageColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class GetIngredientsCategoriesLanguagesRow : global::System.Data.DataRow {
            
            private GetIngredientsCategoriesLanguagesDataTable tableGetIngredientsCategoriesLanguages;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GetIngredientsCategoriesLanguagesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetIngredientsCategoriesLanguages = ((GetIngredientsCategoriesLanguagesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDIngredientCategoryLanguage {
                get {
                    return ((int)(this[this.tableGetIngredientsCategoriesLanguages.IDIngredientCategoryLanguageColumn]));
                }
                set {
                    this[this.tableGetIngredientsCategoriesLanguages.IDIngredientCategoryLanguageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDIngredientCategory {
                get {
                    try {
                        return ((int)(this[this.tableGetIngredientsCategoriesLanguages.IDIngredientCategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDIngredientCategory\' in table \'GetIngredientsCategoriesLan" +
                                "guages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsCategoriesLanguages.IDIngredientCategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDLanguage {
                get {
                    try {
                        return ((int)(this[this.tableGetIngredientsCategoriesLanguages.IDLanguageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDLanguage\' in table \'GetIngredientsCategoriesLanguages\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsCategoriesLanguages.IDLanguageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string IngredientCategoryLanguage {
                get {
                    try {
                        return ((string)(this[this.tableGetIngredientsCategoriesLanguages.IngredientCategoryLanguageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IngredientCategoryLanguage\' in table \'GetIngredientsCategor" +
                                "iesLanguages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsCategoriesLanguages.IngredientCategoryLanguageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string IngredientCategoryLanguageDesc {
                get {
                    try {
                        return ((string)(this[this.tableGetIngredientsCategoriesLanguages.IngredientCategoryLanguageDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IngredientCategoryLanguageDesc\' in table \'GetIngredientsCat" +
                                "egoriesLanguages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsCategoriesLanguages.IngredientCategoryLanguageDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIDIngredientCategoryNull() {
                return this.IsNull(this.tableGetIngredientsCategoriesLanguages.IDIngredientCategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIDIngredientCategoryNull() {
                this[this.tableGetIngredientsCategoriesLanguages.IDIngredientCategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIDLanguageNull() {
                return this.IsNull(this.tableGetIngredientsCategoriesLanguages.IDLanguageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIDLanguageNull() {
                this[this.tableGetIngredientsCategoriesLanguages.IDLanguageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIngredientCategoryLanguageNull() {
                return this.IsNull(this.tableGetIngredientsCategoriesLanguages.IngredientCategoryLanguageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIngredientCategoryLanguageNull() {
                this[this.tableGetIngredientsCategoriesLanguages.IngredientCategoryLanguageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIngredientCategoryLanguageDescNull() {
                return this.IsNull(this.tableGetIngredientsCategoriesLanguages.IngredientCategoryLanguageDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIngredientCategoryLanguageDescNull() {
                this[this.tableGetIngredientsCategoriesLanguages.IngredientCategoryLanguageDescColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class GetIngredientsIngredientsCategoriesRow : global::System.Data.DataRow {
            
            private GetIngredientsIngredientsCategoriesDataTable tableGetIngredientsIngredientsCategories;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GetIngredientsIngredientsCategoriesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetIngredientsIngredientsCategories = ((GetIngredientsIngredientsCategoriesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.Guid IDIngredientIngredientCategory {
                get {
                    return ((global::System.Guid)(this[this.tableGetIngredientsIngredientsCategories.IDIngredientIngredientCategoryColumn]));
                }
                set {
                    this[this.tableGetIngredientsIngredientsCategories.IDIngredientIngredientCategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.Guid IDIngredient {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableGetIngredientsIngredientsCategories.IDIngredientColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDIngredient\' in table \'GetIngredientsIngredientsCategories" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsIngredientsCategories.IDIngredientColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDIngredientCategory {
                get {
                    try {
                        return ((int)(this[this.tableGetIngredientsIngredientsCategories.IDIngredientCategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDIngredientCategory\' in table \'GetIngredientsIngredientsCa" +
                                "tegories\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsIngredientsCategories.IDIngredientCategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool isPrincipalCategory {
                get {
                    try {
                        return ((bool)(this[this.tableGetIngredientsIngredientsCategories.isPrincipalCategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isPrincipalCategory\' in table \'GetIngredientsIngredientsCat" +
                                "egories\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsIngredientsCategories.isPrincipalCategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsRow GetIngredientsRow {
                get {
                    return ((GetIngredientsRow)(this.GetParentRow(this.Table.ParentRelations["FK_IngredientsIngredientsCategories_Ingredients"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_IngredientsIngredientsCategories_Ingredients"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIDIngredientNull() {
                return this.IsNull(this.tableGetIngredientsIngredientsCategories.IDIngredientColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIDIngredientNull() {
                this[this.tableGetIngredientsIngredientsCategories.IDIngredientColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIDIngredientCategoryNull() {
                return this.IsNull(this.tableGetIngredientsIngredientsCategories.IDIngredientCategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIDIngredientCategoryNull() {
                this[this.tableGetIngredientsIngredientsCategories.IDIngredientCategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsisPrincipalCategoryNull() {
                return this.IsNull(this.tableGetIngredientsIngredientsCategories.isPrincipalCategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetisPrincipalCategoryNull() {
                this[this.tableGetIngredientsIngredientsCategories.isPrincipalCategoryColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class GetIngredientsQuantityTypesRow : global::System.Data.DataRow {
            
            private GetIngredientsQuantityTypesDataTable tableGetIngredientsQuantityTypes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GetIngredientsQuantityTypesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetIngredientsQuantityTypes = ((GetIngredientsQuantityTypesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDIngredientQuantityType {
                get {
                    return ((int)(this[this.tableGetIngredientsQuantityTypes.IDIngredientQuantityTypeColumn]));
                }
                set {
                    this[this.tableGetIngredientsQuantityTypes.IDIngredientQuantityTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool isWeight {
                get {
                    try {
                        return ((bool)(this[this.tableGetIngredientsQuantityTypes.isWeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isWeight\' in table \'GetIngredientsQuantityTypes\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsQuantityTypes.isWeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool isLiquid {
                get {
                    try {
                        return ((bool)(this[this.tableGetIngredientsQuantityTypes.isLiquidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isLiquid\' in table \'GetIngredientsQuantityTypes\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsQuantityTypes.isLiquidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool isPiece {
                get {
                    try {
                        return ((bool)(this[this.tableGetIngredientsQuantityTypes.isPieceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isPiece\' in table \'GetIngredientsQuantityTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsQuantityTypes.isPieceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool isStandardQuantityType {
                get {
                    try {
                        return ((bool)(this[this.tableGetIngredientsQuantityTypes.isStandardQuantityTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isStandardQuantityType\' in table \'GetIngredientsQuantityTyp" +
                                "es\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsQuantityTypes.isStandardQuantityTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double NoStdAvgWeight {
                get {
                    try {
                        return ((double)(this[this.tableGetIngredientsQuantityTypes.NoStdAvgWeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NoStdAvgWeight\' in table \'GetIngredientsQuantityTypes\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsQuantityTypes.NoStdAvgWeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool EnabledToUser {
                get {
                    try {
                        return ((bool)(this[this.tableGetIngredientsQuantityTypes.EnabledToUserColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EnabledToUser\' in table \'GetIngredientsQuantityTypes\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsQuantityTypes.EnabledToUserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ShowInIngredientList {
                get {
                    try {
                        return ((bool)(this[this.tableGetIngredientsQuantityTypes.ShowInIngredientListColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShowInIngredientList\' in table \'GetIngredientsQuantityTypes" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsQuantityTypes.ShowInIngredientListColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsisWeightNull() {
                return this.IsNull(this.tableGetIngredientsQuantityTypes.isWeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetisWeightNull() {
                this[this.tableGetIngredientsQuantityTypes.isWeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsisLiquidNull() {
                return this.IsNull(this.tableGetIngredientsQuantityTypes.isLiquidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetisLiquidNull() {
                this[this.tableGetIngredientsQuantityTypes.isLiquidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsisPieceNull() {
                return this.IsNull(this.tableGetIngredientsQuantityTypes.isPieceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetisPieceNull() {
                this[this.tableGetIngredientsQuantityTypes.isPieceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsisStandardQuantityTypeNull() {
                return this.IsNull(this.tableGetIngredientsQuantityTypes.isStandardQuantityTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetisStandardQuantityTypeNull() {
                this[this.tableGetIngredientsQuantityTypes.isStandardQuantityTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNoStdAvgWeightNull() {
                return this.IsNull(this.tableGetIngredientsQuantityTypes.NoStdAvgWeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNoStdAvgWeightNull() {
                this[this.tableGetIngredientsQuantityTypes.NoStdAvgWeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEnabledToUserNull() {
                return this.IsNull(this.tableGetIngredientsQuantityTypes.EnabledToUserColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEnabledToUserNull() {
                this[this.tableGetIngredientsQuantityTypes.EnabledToUserColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsShowInIngredientListNull() {
                return this.IsNull(this.tableGetIngredientsQuantityTypes.ShowInIngredientListColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetShowInIngredientListNull() {
                this[this.tableGetIngredientsQuantityTypes.ShowInIngredientListColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsQuantityTypesLanguagesRow[] GetGetIngredientsQuantityTypesLanguagesRows() {
                if ((this.Table.ChildRelations["FK_IngredientsQuantityTypesLanguages_IngredientsQuantityTypes"] == null)) {
                    return new GetIngredientsQuantityTypesLanguagesRow[0];
                }
                else {
                    return ((GetIngredientsQuantityTypesLanguagesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_IngredientsQuantityTypesLanguages_IngredientsQuantityTypes"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsAllowedQuantityTypesRow[] GetGetIngredientsAllowedQuantityTypesRows() {
                if ((this.Table.ChildRelations["FK_IngredientsAllowedQuantityTypes_IngredientsQuantityTypes"] == null)) {
                    return new GetIngredientsAllowedQuantityTypesRow[0];
                }
                else {
                    return ((GetIngredientsAllowedQuantityTypesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_IngredientsAllowedQuantityTypes_IngredientsQuantityTypes"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class GetIngredientsQuantityTypesLanguagesRow : global::System.Data.DataRow {
            
            private GetIngredientsQuantityTypesLanguagesDataTable tableGetIngredientsQuantityTypesLanguages;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GetIngredientsQuantityTypesLanguagesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetIngredientsQuantityTypesLanguages = ((GetIngredientsQuantityTypesLanguagesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDIngredientQuantityTypeLanguage {
                get {
                    return ((int)(this[this.tableGetIngredientsQuantityTypesLanguages.IDIngredientQuantityTypeLanguageColumn]));
                }
                set {
                    this[this.tableGetIngredientsQuantityTypesLanguages.IDIngredientQuantityTypeLanguageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDIngredientQuantityType {
                get {
                    try {
                        return ((int)(this[this.tableGetIngredientsQuantityTypesLanguages.IDIngredientQuantityTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDIngredientQuantityType\' in table \'GetIngredientsQuantityT" +
                                "ypesLanguages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsQuantityTypesLanguages.IDIngredientQuantityTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDLanguage {
                get {
                    try {
                        return ((int)(this[this.tableGetIngredientsQuantityTypesLanguages.IDLanguageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDLanguage\' in table \'GetIngredientsQuantityTypesLanguages\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsQuantityTypesLanguages.IDLanguageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string IngredientQuantityTypeSingular {
                get {
                    try {
                        return ((string)(this[this.tableGetIngredientsQuantityTypesLanguages.IngredientQuantityTypeSingularColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IngredientQuantityTypeSingular\' in table \'GetIngredientsQua" +
                                "ntityTypesLanguages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsQuantityTypesLanguages.IngredientQuantityTypeSingularColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string IngredientQuantityTypePlural {
                get {
                    try {
                        return ((string)(this[this.tableGetIngredientsQuantityTypesLanguages.IngredientQuantityTypePluralColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IngredientQuantityTypePlural\' in table \'GetIngredientsQuant" +
                                "ityTypesLanguages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsQuantityTypesLanguages.IngredientQuantityTypePluralColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double ConvertionRatio {
                get {
                    try {
                        return ((double)(this[this.tableGetIngredientsQuantityTypesLanguages.ConvertionRatioColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConvertionRatio\' in table \'GetIngredientsQuantityTypesLangu" +
                                "ages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsQuantityTypesLanguages.ConvertionRatioColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string IngredientQuantityTypeX1000Singular {
                get {
                    try {
                        return ((string)(this[this.tableGetIngredientsQuantityTypesLanguages.IngredientQuantityTypeX1000SingularColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IngredientQuantityTypeX1000Singular\' in table \'GetIngredien" +
                                "tsQuantityTypesLanguages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsQuantityTypesLanguages.IngredientQuantityTypeX1000SingularColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string IngredientQuantityTypeX1000Plural {
                get {
                    try {
                        return ((string)(this[this.tableGetIngredientsQuantityTypesLanguages.IngredientQuantityTypeX1000PluralColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IngredientQuantityTypeX1000Plural\' in table \'GetIngredients" +
                                "QuantityTypesLanguages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsQuantityTypesLanguages.IngredientQuantityTypeX1000PluralColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string IngredientQuantityTypeWordsShowBefore {
                get {
                    try {
                        return ((string)(this[this.tableGetIngredientsQuantityTypesLanguages.IngredientQuantityTypeWordsShowBeforeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IngredientQuantityTypeWordsShowBefore\' in table \'GetIngredi" +
                                "entsQuantityTypesLanguages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsQuantityTypesLanguages.IngredientQuantityTypeWordsShowBeforeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string IngredientQuantityTypeWordsShowAfter {
                get {
                    try {
                        return ((string)(this[this.tableGetIngredientsQuantityTypesLanguages.IngredientQuantityTypeWordsShowAfterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IngredientQuantityTypeWordsShowAfter\' in table \'GetIngredie" +
                                "ntsQuantityTypesLanguages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsQuantityTypesLanguages.IngredientQuantityTypeWordsShowAfterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsQuantityTypesRow GetIngredientsQuantityTypesRow {
                get {
                    return ((GetIngredientsQuantityTypesRow)(this.GetParentRow(this.Table.ParentRelations["FK_IngredientsQuantityTypesLanguages_IngredientsQuantityTypes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_IngredientsQuantityTypesLanguages_IngredientsQuantityTypes"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIDIngredientQuantityTypeNull() {
                return this.IsNull(this.tableGetIngredientsQuantityTypesLanguages.IDIngredientQuantityTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIDIngredientQuantityTypeNull() {
                this[this.tableGetIngredientsQuantityTypesLanguages.IDIngredientQuantityTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIDLanguageNull() {
                return this.IsNull(this.tableGetIngredientsQuantityTypesLanguages.IDLanguageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIDLanguageNull() {
                this[this.tableGetIngredientsQuantityTypesLanguages.IDLanguageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIngredientQuantityTypeSingularNull() {
                return this.IsNull(this.tableGetIngredientsQuantityTypesLanguages.IngredientQuantityTypeSingularColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIngredientQuantityTypeSingularNull() {
                this[this.tableGetIngredientsQuantityTypesLanguages.IngredientQuantityTypeSingularColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIngredientQuantityTypePluralNull() {
                return this.IsNull(this.tableGetIngredientsQuantityTypesLanguages.IngredientQuantityTypePluralColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIngredientQuantityTypePluralNull() {
                this[this.tableGetIngredientsQuantityTypesLanguages.IngredientQuantityTypePluralColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsConvertionRatioNull() {
                return this.IsNull(this.tableGetIngredientsQuantityTypesLanguages.ConvertionRatioColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetConvertionRatioNull() {
                this[this.tableGetIngredientsQuantityTypesLanguages.ConvertionRatioColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIngredientQuantityTypeX1000SingularNull() {
                return this.IsNull(this.tableGetIngredientsQuantityTypesLanguages.IngredientQuantityTypeX1000SingularColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIngredientQuantityTypeX1000SingularNull() {
                this[this.tableGetIngredientsQuantityTypesLanguages.IngredientQuantityTypeX1000SingularColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIngredientQuantityTypeX1000PluralNull() {
                return this.IsNull(this.tableGetIngredientsQuantityTypesLanguages.IngredientQuantityTypeX1000PluralColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIngredientQuantityTypeX1000PluralNull() {
                this[this.tableGetIngredientsQuantityTypesLanguages.IngredientQuantityTypeX1000PluralColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIngredientQuantityTypeWordsShowBeforeNull() {
                return this.IsNull(this.tableGetIngredientsQuantityTypesLanguages.IngredientQuantityTypeWordsShowBeforeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIngredientQuantityTypeWordsShowBeforeNull() {
                this[this.tableGetIngredientsQuantityTypesLanguages.IngredientQuantityTypeWordsShowBeforeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIngredientQuantityTypeWordsShowAfterNull() {
                return this.IsNull(this.tableGetIngredientsQuantityTypesLanguages.IngredientQuantityTypeWordsShowAfterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIngredientQuantityTypeWordsShowAfterNull() {
                this[this.tableGetIngredientsQuantityTypesLanguages.IngredientQuantityTypeWordsShowAfterColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class GetIngredientsAllowedQuantityTypesRow : global::System.Data.DataRow {
            
            private GetIngredientsAllowedQuantityTypesDataTable tableGetIngredientsAllowedQuantityTypes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GetIngredientsAllowedQuantityTypesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetIngredientsAllowedQuantityTypes = ((GetIngredientsAllowedQuantityTypesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.Guid IDIngredientAllowedQuantityType {
                get {
                    return ((global::System.Guid)(this[this.tableGetIngredientsAllowedQuantityTypes.IDIngredientAllowedQuantityTypeColumn]));
                }
                set {
                    this[this.tableGetIngredientsAllowedQuantityTypes.IDIngredientAllowedQuantityTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.Guid IDingredient {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableGetIngredientsAllowedQuantityTypes.IDingredientColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDingredient\' in table \'GetIngredientsAllowedQuantityTypes\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsAllowedQuantityTypes.IDingredientColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDIngredientQuantityType {
                get {
                    try {
                        return ((int)(this[this.tableGetIngredientsAllowedQuantityTypes.IDIngredientQuantityTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDIngredientQuantityType\' in table \'GetIngredientsAllowedQu" +
                                "antityTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsAllowedQuantityTypes.IDIngredientQuantityTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsQuantityTypesRow GetIngredientsQuantityTypesRow {
                get {
                    return ((GetIngredientsQuantityTypesRow)(this.GetParentRow(this.Table.ParentRelations["FK_IngredientsAllowedQuantityTypes_IngredientsQuantityTypes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_IngredientsAllowedQuantityTypes_IngredientsQuantityTypes"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsRow GetIngredientsRow {
                get {
                    return ((GetIngredientsRow)(this.GetParentRow(this.Table.ParentRelations["FK_IngredientsAllowedQuantityTypes_Ingredients"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_IngredientsAllowedQuantityTypes_Ingredients"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIDingredientNull() {
                return this.IsNull(this.tableGetIngredientsAllowedQuantityTypes.IDingredientColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIDingredientNull() {
                this[this.tableGetIngredientsAllowedQuantityTypes.IDingredientColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIDIngredientQuantityTypeNull() {
                return this.IsNull(this.tableGetIngredientsAllowedQuantityTypes.IDIngredientQuantityTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIDIngredientQuantityTypeNull() {
                this[this.tableGetIngredientsAllowedQuantityTypes.IDIngredientQuantityTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ManageIngredientRow : global::System.Data.DataRow {
            
            private ManageIngredientDataTable tableManageIngredient;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ManageIngredientRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableManageIngredient = ((ManageIngredientDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ResultExecutionCode {
                get {
                    try {
                        return ((string)(this[this.tableManageIngredient.ResultExecutionCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ResultExecutionCode\' in table \'ManageIngredient\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableManageIngredient.ResultExecutionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string USPReturnValue {
                get {
                    try {
                        return ((string)(this[this.tableManageIngredient.USPReturnValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USPReturnValue\' in table \'ManageIngredient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManageIngredient.USPReturnValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool isError {
                get {
                    try {
                        return ((bool)(this[this.tableManageIngredient.isErrorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isError\' in table \'ManageIngredient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManageIngredient.isErrorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsResultExecutionCodeNull() {
                return this.IsNull(this.tableManageIngredient.ResultExecutionCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetResultExecutionCodeNull() {
                this[this.tableManageIngredient.ResultExecutionCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsUSPReturnValueNull() {
                return this.IsNull(this.tableManageIngredient.USPReturnValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetUSPReturnValueNull() {
                this[this.tableManageIngredient.USPReturnValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsisErrorNull() {
                return this.IsNull(this.tableManageIngredient.isErrorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetisErrorNull() {
                this[this.tableManageIngredient.isErrorColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class GetIngredientsRow : global::System.Data.DataRow {
            
            private GetIngredientsDataTable tableGetIngredients;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GetIngredientsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetIngredients = ((GetIngredientsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.Guid IDIngredient {
                get {
                    return ((global::System.Guid)(this[this.tableGetIngredients.IDIngredientColumn]));
                }
                set {
                    this[this.tableGetIngredients.IDIngredientColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.Guid IDIngredientPreparationRecipe {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableGetIngredients.IDIngredientPreparationRecipeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDIngredientPreparationRecipe\' in table \'GetIngredients\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.IDIngredientPreparationRecipeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.Guid IDIngredientImage {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableGetIngredients.IDIngredientImageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDIngredientImage\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.IDIngredientImageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double AverageWeightOfOnePiece {
                get {
                    try {
                        return ((double)(this[this.tableGetIngredients.AverageWeightOfOnePieceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AverageWeightOfOnePiece\' in table \'GetIngredients\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.AverageWeightOfOnePieceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double Kcal100gr {
                get {
                    try {
                        return ((double)(this[this.tableGetIngredients.Kcal100grColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Kcal100gr\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.Kcal100grColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double grProteins {
                get {
                    try {
                        return ((double)(this[this.tableGetIngredients.grProteinsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'grProteins\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.grProteinsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double grFats {
                get {
                    try {
                        return ((double)(this[this.tableGetIngredients.grFatsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'grFats\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.grFatsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double grCarbohydrates {
                get {
                    try {
                        return ((double)(this[this.tableGetIngredients.grCarbohydratesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'grCarbohydrates\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.grCarbohydratesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double grAlcohol {
                get {
                    try {
                        return ((double)(this[this.tableGetIngredients.grAlcoholColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'grAlcohol\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.grAlcoholColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double mgCalcium {
                get {
                    try {
                        return ((double)(this[this.tableGetIngredients.mgCalciumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mgCalcium\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.mgCalciumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double mgSodium {
                get {
                    try {
                        return ((double)(this[this.tableGetIngredients.mgSodiumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mgSodium\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.mgSodiumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double mgPhosphorus {
                get {
                    try {
                        return ((double)(this[this.tableGetIngredients.mgPhosphorusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mgPhosphorus\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.mgPhosphorusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double mgPotassium {
                get {
                    try {
                        return ((double)(this[this.tableGetIngredients.mgPotassiumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mgPotassium\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.mgPotassiumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double mgIron {
                get {
                    try {
                        return ((double)(this[this.tableGetIngredients.mgIronColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mgIron\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.mgIronColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double mgMagnesium {
                get {
                    try {
                        return ((double)(this[this.tableGetIngredients.mgMagnesiumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mgMagnesium\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.mgMagnesiumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double mcgVitaminA {
                get {
                    try {
                        return ((double)(this[this.tableGetIngredients.mcgVitaminAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mcgVitaminA\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.mcgVitaminAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double mgVitaminB1 {
                get {
                    try {
                        return ((double)(this[this.tableGetIngredients.mgVitaminB1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mgVitaminB1\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.mgVitaminB1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double mgVitaminB2 {
                get {
                    try {
                        return ((double)(this[this.tableGetIngredients.mgVitaminB2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mgVitaminB2\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.mgVitaminB2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double mcgVitaminB9 {
                get {
                    try {
                        return ((double)(this[this.tableGetIngredients.mcgVitaminB9Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mcgVitaminB9\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.mcgVitaminB9Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double mcgVitaminB12 {
                get {
                    try {
                        return ((double)(this[this.tableGetIngredients.mcgVitaminB12Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mcgVitaminB12\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.mcgVitaminB12Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double mgVitaminC {
                get {
                    try {
                        return ((double)(this[this.tableGetIngredients.mgVitaminCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mgVitaminC\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.mgVitaminCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double grSaturatedFat {
                get {
                    try {
                        return ((double)(this[this.tableGetIngredients.grSaturatedFatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'grSaturatedFat\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.grSaturatedFatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double grMonounsaturredFat {
                get {
                    try {
                        return ((double)(this[this.tableGetIngredients.grMonounsaturredFatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'grMonounsaturredFat\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.grMonounsaturredFatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double grPolyunsaturredFat {
                get {
                    try {
                        return ((double)(this[this.tableGetIngredients.grPolyunsaturredFatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'grPolyunsaturredFat\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.grPolyunsaturredFatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double mgCholesterol {
                get {
                    try {
                        return ((double)(this[this.tableGetIngredients.mgCholesterolColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mgCholesterol\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.mgCholesterolColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double mgPhytosterols {
                get {
                    try {
                        return ((double)(this[this.tableGetIngredients.mgPhytosterolsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mgPhytosterols\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.mgPhytosterolsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double mgOmega3 {
                get {
                    try {
                        return ((double)(this[this.tableGetIngredients.mgOmega3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mgOmega3\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.mgOmega3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsForBaby {
                get {
                    try {
                        return ((bool)(this[this.tableGetIngredients.IsForBabyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsForBaby\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.IsForBabyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMeat {
                get {
                    try {
                        return ((bool)(this[this.tableGetIngredients.IsMeatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsMeat\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.IsMeatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFish {
                get {
                    try {
                        return ((bool)(this[this.tableGetIngredients.IsFishColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsFish\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.IsFishColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsVegetarian {
                get {
                    return ((bool)(this[this.tableGetIngredients.IsVegetarianColumn]));
                }
                set {
                    this[this.tableGetIngredients.IsVegetarianColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsVegan {
                get {
                    return ((bool)(this[this.tableGetIngredients.IsVeganColumn]));
                }
                set {
                    this[this.tableGetIngredients.IsVeganColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGlutenFree {
                get {
                    return ((bool)(this[this.tableGetIngredients.IsGlutenFreeColumn]));
                }
                set {
                    this[this.tableGetIngredients.IsGlutenFreeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsHotSpicy {
                get {
                    return ((bool)(this[this.tableGetIngredients.IsHotSpicyColumn]));
                }
                set {
                    this[this.tableGetIngredients.IsHotSpicyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Checked {
                get {
                    return ((bool)(this[this.tableGetIngredients.CheckedColumn]));
                }
                set {
                    this[this.tableGetIngredients.CheckedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.Guid IngredientCreatedBy {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableGetIngredients.IngredientCreatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IngredientCreatedBy\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.IngredientCreatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime IngredientCreationDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGetIngredients.IngredientCreationDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IngredientCreationDate\' in table \'GetIngredients\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.IngredientCreationDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.Guid IngredientModifiedByUser {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableGetIngredients.IngredientModifiedByUserColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IngredientModifiedByUser\' in table \'GetIngredients\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.IngredientModifiedByUserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime IngredientLastMod {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGetIngredients.IngredientLastModColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IngredientLastMod\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.IngredientLastModColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IngredientEnabled {
                get {
                    try {
                        return ((bool)(this[this.tableGetIngredients.IngredientEnabledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IngredientEnabled\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.IngredientEnabledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool January {
                get {
                    try {
                        return ((bool)(this[this.tableGetIngredients.JanuaryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'January\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.JanuaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool February {
                get {
                    try {
                        return ((bool)(this[this.tableGetIngredients.FebruaryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'February\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.FebruaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool March {
                get {
                    try {
                        return ((bool)(this[this.tableGetIngredients.MarchColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'March\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.MarchColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool April {
                get {
                    try {
                        return ((bool)(this[this.tableGetIngredients.AprilColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'April\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.AprilColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool May {
                get {
                    try {
                        return ((bool)(this[this.tableGetIngredients.MayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'May\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.MayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool June {
                get {
                    try {
                        return ((bool)(this[this.tableGetIngredients.JuneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'June\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.JuneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool July {
                get {
                    try {
                        return ((bool)(this[this.tableGetIngredients.JulyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'July\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.JulyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool August {
                get {
                    try {
                        return ((bool)(this[this.tableGetIngredients.AugustColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'August\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.AugustColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool September {
                get {
                    try {
                        return ((bool)(this[this.tableGetIngredients.SeptemberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'September\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.SeptemberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool October {
                get {
                    try {
                        return ((bool)(this[this.tableGetIngredients.OctoberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'October\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.OctoberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool November {
                get {
                    try {
                        return ((bool)(this[this.tableGetIngredients.NovemberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'November\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.NovemberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool December {
                get {
                    try {
                        return ((bool)(this[this.tableGetIngredients.DecemberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'December\' in table \'GetIngredients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredients.DecemberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIDIngredientPreparationRecipeNull() {
                return this.IsNull(this.tableGetIngredients.IDIngredientPreparationRecipeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIDIngredientPreparationRecipeNull() {
                this[this.tableGetIngredients.IDIngredientPreparationRecipeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIDIngredientImageNull() {
                return this.IsNull(this.tableGetIngredients.IDIngredientImageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIDIngredientImageNull() {
                this[this.tableGetIngredients.IDIngredientImageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAverageWeightOfOnePieceNull() {
                return this.IsNull(this.tableGetIngredients.AverageWeightOfOnePieceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAverageWeightOfOnePieceNull() {
                this[this.tableGetIngredients.AverageWeightOfOnePieceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsKcal100grNull() {
                return this.IsNull(this.tableGetIngredients.Kcal100grColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetKcal100grNull() {
                this[this.tableGetIngredients.Kcal100grColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsgrProteinsNull() {
                return this.IsNull(this.tableGetIngredients.grProteinsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetgrProteinsNull() {
                this[this.tableGetIngredients.grProteinsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsgrFatsNull() {
                return this.IsNull(this.tableGetIngredients.grFatsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetgrFatsNull() {
                this[this.tableGetIngredients.grFatsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsgrCarbohydratesNull() {
                return this.IsNull(this.tableGetIngredients.grCarbohydratesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetgrCarbohydratesNull() {
                this[this.tableGetIngredients.grCarbohydratesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsgrAlcoholNull() {
                return this.IsNull(this.tableGetIngredients.grAlcoholColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetgrAlcoholNull() {
                this[this.tableGetIngredients.grAlcoholColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsmgCalciumNull() {
                return this.IsNull(this.tableGetIngredients.mgCalciumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetmgCalciumNull() {
                this[this.tableGetIngredients.mgCalciumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsmgSodiumNull() {
                return this.IsNull(this.tableGetIngredients.mgSodiumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetmgSodiumNull() {
                this[this.tableGetIngredients.mgSodiumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsmgPhosphorusNull() {
                return this.IsNull(this.tableGetIngredients.mgPhosphorusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetmgPhosphorusNull() {
                this[this.tableGetIngredients.mgPhosphorusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsmgPotassiumNull() {
                return this.IsNull(this.tableGetIngredients.mgPotassiumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetmgPotassiumNull() {
                this[this.tableGetIngredients.mgPotassiumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsmgIronNull() {
                return this.IsNull(this.tableGetIngredients.mgIronColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetmgIronNull() {
                this[this.tableGetIngredients.mgIronColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsmgMagnesiumNull() {
                return this.IsNull(this.tableGetIngredients.mgMagnesiumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetmgMagnesiumNull() {
                this[this.tableGetIngredients.mgMagnesiumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsmcgVitaminANull() {
                return this.IsNull(this.tableGetIngredients.mcgVitaminAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetmcgVitaminANull() {
                this[this.tableGetIngredients.mcgVitaminAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsmgVitaminB1Null() {
                return this.IsNull(this.tableGetIngredients.mgVitaminB1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetmgVitaminB1Null() {
                this[this.tableGetIngredients.mgVitaminB1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsmgVitaminB2Null() {
                return this.IsNull(this.tableGetIngredients.mgVitaminB2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetmgVitaminB2Null() {
                this[this.tableGetIngredients.mgVitaminB2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsmcgVitaminB9Null() {
                return this.IsNull(this.tableGetIngredients.mcgVitaminB9Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetmcgVitaminB9Null() {
                this[this.tableGetIngredients.mcgVitaminB9Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsmcgVitaminB12Null() {
                return this.IsNull(this.tableGetIngredients.mcgVitaminB12Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetmcgVitaminB12Null() {
                this[this.tableGetIngredients.mcgVitaminB12Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsmgVitaminCNull() {
                return this.IsNull(this.tableGetIngredients.mgVitaminCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetmgVitaminCNull() {
                this[this.tableGetIngredients.mgVitaminCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsgrSaturatedFatNull() {
                return this.IsNull(this.tableGetIngredients.grSaturatedFatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetgrSaturatedFatNull() {
                this[this.tableGetIngredients.grSaturatedFatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsgrMonounsaturredFatNull() {
                return this.IsNull(this.tableGetIngredients.grMonounsaturredFatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetgrMonounsaturredFatNull() {
                this[this.tableGetIngredients.grMonounsaturredFatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsgrPolyunsaturredFatNull() {
                return this.IsNull(this.tableGetIngredients.grPolyunsaturredFatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetgrPolyunsaturredFatNull() {
                this[this.tableGetIngredients.grPolyunsaturredFatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsmgCholesterolNull() {
                return this.IsNull(this.tableGetIngredients.mgCholesterolColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetmgCholesterolNull() {
                this[this.tableGetIngredients.mgCholesterolColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsmgPhytosterolsNull() {
                return this.IsNull(this.tableGetIngredients.mgPhytosterolsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetmgPhytosterolsNull() {
                this[this.tableGetIngredients.mgPhytosterolsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsmgOmega3Null() {
                return this.IsNull(this.tableGetIngredients.mgOmega3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetmgOmega3Null() {
                this[this.tableGetIngredients.mgOmega3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsForBabyNull() {
                return this.IsNull(this.tableGetIngredients.IsForBabyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsForBabyNull() {
                this[this.tableGetIngredients.IsForBabyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsMeatNull() {
                return this.IsNull(this.tableGetIngredients.IsMeatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsMeatNull() {
                this[this.tableGetIngredients.IsMeatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsFishNull() {
                return this.IsNull(this.tableGetIngredients.IsFishColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsFishNull() {
                this[this.tableGetIngredients.IsFishColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIngredientCreatedByNull() {
                return this.IsNull(this.tableGetIngredients.IngredientCreatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIngredientCreatedByNull() {
                this[this.tableGetIngredients.IngredientCreatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIngredientCreationDateNull() {
                return this.IsNull(this.tableGetIngredients.IngredientCreationDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIngredientCreationDateNull() {
                this[this.tableGetIngredients.IngredientCreationDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIngredientModifiedByUserNull() {
                return this.IsNull(this.tableGetIngredients.IngredientModifiedByUserColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIngredientModifiedByUserNull() {
                this[this.tableGetIngredients.IngredientModifiedByUserColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIngredientLastModNull() {
                return this.IsNull(this.tableGetIngredients.IngredientLastModColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIngredientLastModNull() {
                this[this.tableGetIngredients.IngredientLastModColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIngredientEnabledNull() {
                return this.IsNull(this.tableGetIngredients.IngredientEnabledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIngredientEnabledNull() {
                this[this.tableGetIngredients.IngredientEnabledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsJanuaryNull() {
                return this.IsNull(this.tableGetIngredients.JanuaryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetJanuaryNull() {
                this[this.tableGetIngredients.JanuaryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFebruaryNull() {
                return this.IsNull(this.tableGetIngredients.FebruaryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFebruaryNull() {
                this[this.tableGetIngredients.FebruaryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMarchNull() {
                return this.IsNull(this.tableGetIngredients.MarchColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMarchNull() {
                this[this.tableGetIngredients.MarchColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAprilNull() {
                return this.IsNull(this.tableGetIngredients.AprilColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAprilNull() {
                this[this.tableGetIngredients.AprilColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMayNull() {
                return this.IsNull(this.tableGetIngredients.MayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMayNull() {
                this[this.tableGetIngredients.MayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsJuneNull() {
                return this.IsNull(this.tableGetIngredients.JuneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetJuneNull() {
                this[this.tableGetIngredients.JuneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsJulyNull() {
                return this.IsNull(this.tableGetIngredients.JulyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetJulyNull() {
                this[this.tableGetIngredients.JulyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAugustNull() {
                return this.IsNull(this.tableGetIngredients.AugustColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAugustNull() {
                this[this.tableGetIngredients.AugustColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSeptemberNull() {
                return this.IsNull(this.tableGetIngredients.SeptemberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSeptemberNull() {
                this[this.tableGetIngredients.SeptemberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsOctoberNull() {
                return this.IsNull(this.tableGetIngredients.OctoberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetOctoberNull() {
                this[this.tableGetIngredients.OctoberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNovemberNull() {
                return this.IsNull(this.tableGetIngredients.NovemberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNovemberNull() {
                this[this.tableGetIngredients.NovemberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDecemberNull() {
                return this.IsNull(this.tableGetIngredients.DecemberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDecemberNull() {
                this[this.tableGetIngredients.DecemberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsLanguagesRow[] GetGetIngredientsLanguagesRows() {
                if ((this.Table.ChildRelations["FK_IngredientsLanguages_Ingredients"] == null)) {
                    return new GetIngredientsLanguagesRow[0];
                }
                else {
                    return ((GetIngredientsLanguagesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_IngredientsLanguages_Ingredients"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsIngredientsCategoriesRow[] GetGetIngredientsIngredientsCategoriesRows() {
                if ((this.Table.ChildRelations["FK_IngredientsIngredientsCategories_Ingredients"] == null)) {
                    return new GetIngredientsIngredientsCategoriesRow[0];
                }
                else {
                    return ((GetIngredientsIngredientsCategoriesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_IngredientsIngredientsCategories_Ingredients"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsAllowedQuantityTypesRow[] GetGetIngredientsAllowedQuantityTypesRows() {
                if ((this.Table.ChildRelations["FK_IngredientsAllowedQuantityTypes_Ingredients"] == null)) {
                    return new GetIngredientsAllowedQuantityTypesRow[0];
                }
                else {
                    return ((GetIngredientsAllowedQuantityTypesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_IngredientsAllowedQuantityTypes_Ingredients"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class GetQuantityNotStdRow : global::System.Data.DataRow {
            
            private GetQuantityNotStdDataTable tableGetQuantityNotStd;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GetQuantityNotStdRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetQuantityNotStd = ((GetQuantityNotStdDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDQuantityNotStd {
                get {
                    return ((int)(this[this.tableGetQuantityNotStd.IDQuantityNotStdColumn]));
                }
                set {
                    this[this.tableGetQuantityNotStd.IDQuantityNotStdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PercentageFactor {
                get {
                    try {
                        return ((int)(this[this.tableGetQuantityNotStd.PercentageFactorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PercentageFactor\' in table \'GetQuantityNotStd\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetQuantityNotStd.PercentageFactorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool EnabledToUser {
                get {
                    try {
                        return ((bool)(this[this.tableGetQuantityNotStd.EnabledToUserColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EnabledToUser\' in table \'GetQuantityNotStd\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetQuantityNotStd.EnabledToUserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPercentageFactorNull() {
                return this.IsNull(this.tableGetQuantityNotStd.PercentageFactorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPercentageFactorNull() {
                this[this.tableGetQuantityNotStd.PercentageFactorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEnabledToUserNull() {
                return this.IsNull(this.tableGetQuantityNotStd.EnabledToUserColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEnabledToUserNull() {
                this[this.tableGetQuantityNotStd.EnabledToUserColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetQuantityNotStdLanguageRow[] GetGetQuantityNotStdLanguageRows() {
                if ((this.Table.ChildRelations["FK_QuantityNotStdLanguage_QuantityNotStd"] == null)) {
                    return new GetQuantityNotStdLanguageRow[0];
                }
                else {
                    return ((GetQuantityNotStdLanguageRow[])(base.GetChildRows(this.Table.ChildRelations["FK_QuantityNotStdLanguage_QuantityNotStd"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class GetQuantityNotStdLanguageRow : global::System.Data.DataRow {
            
            private GetQuantityNotStdLanguageDataTable tableGetQuantityNotStdLanguage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GetQuantityNotStdLanguageRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetQuantityNotStdLanguage = ((GetQuantityNotStdLanguageDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDQuantityNotStdLanguage {
                get {
                    return ((int)(this[this.tableGetQuantityNotStdLanguage.IDQuantityNotStdLanguageColumn]));
                }
                set {
                    this[this.tableGetQuantityNotStdLanguage.IDQuantityNotStdLanguageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDQuantityNotStd {
                get {
                    try {
                        return ((int)(this[this.tableGetQuantityNotStdLanguage.IDQuantityNotStdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDQuantityNotStd\' in table \'GetQuantityNotStdLanguage\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetQuantityNotStdLanguage.IDQuantityNotStdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDLanguage {
                get {
                    try {
                        return ((int)(this[this.tableGetQuantityNotStdLanguage.IDLanguageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDLanguage\' in table \'GetQuantityNotStdLanguage\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetQuantityNotStdLanguage.IDLanguageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string QuantityNotStdSingular {
                get {
                    try {
                        return ((string)(this[this.tableGetQuantityNotStdLanguage.QuantityNotStdSingularColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QuantityNotStdSingular\' in table \'GetQuantityNotStdLanguage" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetQuantityNotStdLanguage.QuantityNotStdSingularColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string QuantityNotStdPlural {
                get {
                    try {
                        return ((string)(this[this.tableGetQuantityNotStdLanguage.QuantityNotStdPluralColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QuantityNotStdPlural\' in table \'GetQuantityNotStdLanguage\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetQuantityNotStdLanguage.QuantityNotStdPluralColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetQuantityNotStdRow GetQuantityNotStdRow {
                get {
                    return ((GetQuantityNotStdRow)(this.GetParentRow(this.Table.ParentRelations["FK_QuantityNotStdLanguage_QuantityNotStd"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_QuantityNotStdLanguage_QuantityNotStd"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIDQuantityNotStdNull() {
                return this.IsNull(this.tableGetQuantityNotStdLanguage.IDQuantityNotStdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIDQuantityNotStdNull() {
                this[this.tableGetQuantityNotStdLanguage.IDQuantityNotStdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIDLanguageNull() {
                return this.IsNull(this.tableGetQuantityNotStdLanguage.IDLanguageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIDLanguageNull() {
                this[this.tableGetQuantityNotStdLanguage.IDLanguageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsQuantityNotStdSingularNull() {
                return this.IsNull(this.tableGetQuantityNotStdLanguage.QuantityNotStdSingularColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetQuantityNotStdSingularNull() {
                this[this.tableGetQuantityNotStdLanguage.QuantityNotStdSingularColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsQuantityNotStdPluralNull() {
                return this.IsNull(this.tableGetQuantityNotStdLanguage.QuantityNotStdPluralColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetQuantityNotStdPluralNull() {
                this[this.tableGetQuantityNotStdLanguage.QuantityNotStdPluralColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class GetIngredientsAlternativesRow : global::System.Data.DataRow {
            
            private GetIngredientsAlternativesDataTable tableGetIngredientsAlternatives;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GetIngredientsAlternativesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetIngredientsAlternatives = ((GetIngredientsAlternativesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.Guid IDIngredientAlternative {
                get {
                    return ((global::System.Guid)(this[this.tableGetIngredientsAlternatives.IDIngredientAlternativeColumn]));
                }
                set {
                    this[this.tableGetIngredientsAlternatives.IDIngredientAlternativeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.Guid IDIngredientMain {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableGetIngredientsAlternatives.IDIngredientMainColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDIngredientMain\' in table \'GetIngredientsAlternatives\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsAlternatives.IDIngredientMainColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.Guid IDIngredientSlave {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableGetIngredientsAlternatives.IDIngredientSlaveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDIngredientSlave\' in table \'GetIngredientsAlternatives\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsAlternatives.IDIngredientSlaveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.Guid AddedByUser {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableGetIngredientsAlternatives.AddedByUserColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AddedByUser\' in table \'GetIngredientsAlternatives\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsAlternatives.AddedByUserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime AddedOn {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGetIngredientsAlternatives.AddedOnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AddedOn\' in table \'GetIngredientsAlternatives\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsAlternatives.AddedOnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.Guid CheckedBy {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableGetIngredientsAlternatives.CheckedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CheckedBy\' in table \'GetIngredientsAlternatives\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsAlternatives.CheckedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime CheckedOn {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGetIngredientsAlternatives.CheckedOnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CheckedOn\' in table \'GetIngredientsAlternatives\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsAlternatives.CheckedOnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Checked {
                get {
                    try {
                        return ((bool)(this[this.tableGetIngredientsAlternatives.CheckedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Checked\' in table \'GetIngredientsAlternatives\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetIngredientsAlternatives.CheckedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIDIngredientMainNull() {
                return this.IsNull(this.tableGetIngredientsAlternatives.IDIngredientMainColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIDIngredientMainNull() {
                this[this.tableGetIngredientsAlternatives.IDIngredientMainColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIDIngredientSlaveNull() {
                return this.IsNull(this.tableGetIngredientsAlternatives.IDIngredientSlaveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIDIngredientSlaveNull() {
                this[this.tableGetIngredientsAlternatives.IDIngredientSlaveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAddedByUserNull() {
                return this.IsNull(this.tableGetIngredientsAlternatives.AddedByUserColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAddedByUserNull() {
                this[this.tableGetIngredientsAlternatives.AddedByUserColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAddedOnNull() {
                return this.IsNull(this.tableGetIngredientsAlternatives.AddedOnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAddedOnNull() {
                this[this.tableGetIngredientsAlternatives.AddedOnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCheckedByNull() {
                return this.IsNull(this.tableGetIngredientsAlternatives.CheckedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCheckedByNull() {
                this[this.tableGetIngredientsAlternatives.CheckedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCheckedOnNull() {
                return this.IsNull(this.tableGetIngredientsAlternatives.CheckedOnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCheckedOnNull() {
                this[this.tableGetIngredientsAlternatives.CheckedOnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCheckedNull() {
                return this.IsNull(this.tableGetIngredientsAlternatives.CheckedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCheckedNull() {
                this[this.tableGetIngredientsAlternatives.CheckedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class GETSiteMapIngredientRow : global::System.Data.DataRow {
            
            private GETSiteMapIngredientDataTable tableGETSiteMapIngredient;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GETSiteMapIngredientRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGETSiteMapIngredient = ((GETSiteMapIngredientDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SitemapURL {
                get {
                    try {
                        return ((string)(this[this.tableGETSiteMapIngredient.SitemapURLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SitemapURL\' in table \'GETSiteMapIngredient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGETSiteMapIngredient.SitemapURLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSitemapURLNull() {
                return this.IsNull(this.tableGETSiteMapIngredient.SitemapURLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSitemapURLNull() {
                this[this.tableGETSiteMapIngredient.SitemapURLColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class GetIngredientsLanguagesRowChangeEvent : global::System.EventArgs {
            
            private GetIngredientsLanguagesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsLanguagesRowChangeEvent(GetIngredientsLanguagesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsLanguagesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class GetIngredientsCategoriesRowChangeEvent : global::System.EventArgs {
            
            private GetIngredientsCategoriesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsCategoriesRowChangeEvent(GetIngredientsCategoriesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsCategoriesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class GetIngredientsCategoriesLanguagesRowChangeEvent : global::System.EventArgs {
            
            private GetIngredientsCategoriesLanguagesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsCategoriesLanguagesRowChangeEvent(GetIngredientsCategoriesLanguagesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsCategoriesLanguagesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class GetIngredientsIngredientsCategoriesRowChangeEvent : global::System.EventArgs {
            
            private GetIngredientsIngredientsCategoriesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsIngredientsCategoriesRowChangeEvent(GetIngredientsIngredientsCategoriesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsIngredientsCategoriesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class GetIngredientsQuantityTypesRowChangeEvent : global::System.EventArgs {
            
            private GetIngredientsQuantityTypesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsQuantityTypesRowChangeEvent(GetIngredientsQuantityTypesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsQuantityTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class GetIngredientsQuantityTypesLanguagesRowChangeEvent : global::System.EventArgs {
            
            private GetIngredientsQuantityTypesLanguagesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsQuantityTypesLanguagesRowChangeEvent(GetIngredientsQuantityTypesLanguagesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsQuantityTypesLanguagesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class GetIngredientsAllowedQuantityTypesRowChangeEvent : global::System.EventArgs {
            
            private GetIngredientsAllowedQuantityTypesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsAllowedQuantityTypesRowChangeEvent(GetIngredientsAllowedQuantityTypesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsAllowedQuantityTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ManageIngredientRowChangeEvent : global::System.EventArgs {
            
            private ManageIngredientRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ManageIngredientRowChangeEvent(ManageIngredientRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ManageIngredientRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class GetIngredientsRowChangeEvent : global::System.EventArgs {
            
            private GetIngredientsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsRowChangeEvent(GetIngredientsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class GetQuantityNotStdRowChangeEvent : global::System.EventArgs {
            
            private GetQuantityNotStdRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetQuantityNotStdRowChangeEvent(GetQuantityNotStdRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetQuantityNotStdRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class GetQuantityNotStdLanguageRowChangeEvent : global::System.EventArgs {
            
            private GetQuantityNotStdLanguageRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetQuantityNotStdLanguageRowChangeEvent(GetQuantityNotStdLanguageRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetQuantityNotStdLanguageRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class GetIngredientsAlternativesRowChangeEvent : global::System.EventArgs {
            
            private GetIngredientsAlternativesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsAlternativesRowChangeEvent(GetIngredientsAlternativesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GetIngredientsAlternativesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class GETSiteMapIngredientRowChangeEvent : global::System.EventArgs {
            
            private GETSiteMapIngredientRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GETSiteMapIngredientRowChangeEvent(GETSiteMapIngredientRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GETSiteMapIngredientRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace MyCookin.DAL.Ingredient.ds_IngredientTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetIngredientsLanguagesDAL : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public GetIngredientsLanguagesDAL() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetIngredientsLanguages";
            tableMapping.ColumnMappings.Add("IDIngredientLanguage", "IDIngredientLanguage");
            tableMapping.ColumnMappings.Add("IDIngredient", "IDIngredient");
            tableMapping.ColumnMappings.Add("IDLanguage", "IDLanguage");
            tableMapping.ColumnMappings.Add("IngredientSingular", "IngredientSingular");
            tableMapping.ColumnMappings.Add("IngredientPlural", "IngredientPlural");
            tableMapping.ColumnMappings.Add("IngredientDescription", "IngredientDescription");
            tableMapping.ColumnMappings.Add("isAutoTranslate", "isAutoTranslate");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MyCookin.DAL.Properties.Settings.Default.DBRecipesConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[11];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     IDIngredientLanguage, IDIngredient, IDLanguage, IngredientSingular, IngredientPlural, IngredientDescription, isAutoTranslate
FROM         IngredientsLanguages
WHERE     (IngredientSingular = @IngrName) OR
                      (IngredientPlural = @IngrName)";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IngrName", global::System.Data.SqlDbType.NVarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientSingular", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT IngredientsLanguages.IDIngredient, IngredientsLanguages.IDIngredientLanguage, IngredientsLanguages.IDLanguage, IngredientsLanguages.IngredientDescription, IngredientsLanguages.IngredientPlural, IngredientsLanguages.IngredientSingular, IngredientsLanguages.isAutoTranslate FROM IngredientsLanguages INNER JOIN Ingredients ON IngredientsLanguages.IDIngredient = Ingredients.IDIngredient WHERE (IngredientsLanguages.IDLanguage = @IDLanguage) AND (Ingredients.Checked = 1) ORDER BY IngredientsLanguages.IngredientSingular";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDLanguage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"SELECT IngredientsLanguages.IDIngredient, IngredientsLanguages.IDIngredientLanguage, IngredientsLanguages.IDLanguage, IngredientsLanguages.IngredientDescription, IngredientsLanguages.IngredientPlural, IngredientsLanguages.IngredientSingular, IngredientsLanguages.isAutoTranslate FROM IngredientsLanguages INNER JOIN Ingredients ON IngredientsLanguages.IDIngredient = Ingredients.IDIngredient WHERE (Ingredients.Checked = 0) AND (IngredientsLanguages.IDLanguage = @IDLanguage) ORDER BY IngredientsLanguages.IngredientSingular";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDLanguage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"SELECT IngredientsLanguages.IDIngredient, IngredientsLanguages.IDIngredientLanguage, IngredientsLanguages.IDLanguage, IngredientsLanguages.IngredientDescription, IngredientsLanguages.IngredientPlural, IngredientsLanguages.IngredientSingular, IngredientsLanguages.isAutoTranslate FROM IngredientsLanguages INNER JOIN Ingredients ON IngredientsLanguages.IDIngredient = Ingredients.IDIngredient WHERE (IngredientsLanguages.IDLanguage = @IDLanguage) AND (Ingredients.IngredientModifiedByUser = @IDUser) ORDER BY IngredientsLanguages.IngredientSingular";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDLanguage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDUser", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientModifiedByUser", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "dbo.USP_GetBeverageByNameContains";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BeverageName", global::System.Data.SqlDbType.NVarChar, 100, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = @"SELECT IngredientsLanguages.IDIngredient, IngredientsLanguages.IDIngredientLanguage, IngredientsLanguages.IDLanguage, IngredientsLanguages.IngredientDescription, IngredientsLanguages.IngredientPlural, IngredientsLanguages.IngredientSingular, IngredientsLanguages.isAutoTranslate FROM IngredientsLanguages INNER JOIN IngredientsAlternatives ON IngredientsLanguages.IDIngredient = IngredientsAlternatives.IDIngredientSlave WHERE (IngredientsAlternatives.IDIngredientMain = @IDIngredientMain) AND (IngredientsLanguages.IDLanguage = @IDLanguage)";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientMain", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientMain", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDLanguage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = "dbo.USP_GetIngredientByIngredientNameContains";
            this._commandCollection[6].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IngredientName", global::System.Data.SqlDbType.NVarChar, 100, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[7].Connection = this.Connection;
            this._commandCollection[7].CommandText = "dbo.USP_GetIngredientByIngredientName";
            this._commandCollection[7].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IngredientName", global::System.Data.SqlDbType.NVarChar, 100, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[8].Connection = this.Connection;
            this._commandCollection[8].CommandText = "dbo.USP_GetIngredientLanguageByIDIngredientIDLanguage";
            this._commandCollection[8].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[8].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredient", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[9].Connection = this.Connection;
            this._commandCollection[9].CommandText = "dbo.USP_GetIngredientList";
            this._commandCollection[9].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartWith", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Vegan", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Vegetarian", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GlutenFree", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HotSpicy", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OffsetRows", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FetchRows", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[10].Connection = this.Connection;
            this._commandCollection[10].CommandText = "dbo.USP_GetIngredientToTranslate";
            this._commandCollection[10].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[10].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguageFrom", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguageTo", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NumRow", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ds_Ingredient.GetIngredientsLanguagesDataTable GetIngredientByNameNoLangSpecified(string IngrName) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((IngrName == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(IngrName));
            }
            ds_Ingredient.GetIngredientsLanguagesDataTable dataTable = new ds_Ingredient.GetIngredientsLanguagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetIngredientsLanguagesDataTable GetAllIngredientChecked(global::System.Nullable<int> IDLanguage) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((IDLanguage.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(IDLanguage.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            ds_Ingredient.GetIngredientsLanguagesDataTable dataTable = new ds_Ingredient.GetIngredientsLanguagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetIngredientsLanguagesDataTable GetAllIngredientLangNotCheckedByIDLang(global::System.Nullable<int> IDLanguage) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((IDLanguage.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(IDLanguage.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            ds_Ingredient.GetIngredientsLanguagesDataTable dataTable = new ds_Ingredient.GetIngredientsLanguagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetIngredientsLanguagesDataTable GetAllIngredientLangNotCheckedByIDLangIDUser(global::System.Nullable<int> IDLanguage, global::System.Nullable<global::System.Guid> IDUser) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((IDLanguage.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(IDLanguage.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((IDUser.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.Guid)(IDUser.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            ds_Ingredient.GetIngredientsLanguagesDataTable dataTable = new ds_Ingredient.GetIngredientsLanguagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetIngredientsLanguagesDataTable GetBeverageByName(string BeverageName, global::System.Nullable<int> IDLanguage) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((BeverageName == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(BeverageName));
            }
            if ((IDLanguage.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(IDLanguage.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            ds_Ingredient.GetIngredientsLanguagesDataTable dataTable = new ds_Ingredient.GetIngredientsLanguagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetIngredientsLanguagesDataTable GetIngredientAlternativesLangByID(System.Guid IDIngredientMain, global::System.Nullable<int> IDLanguage) {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDIngredientMain));
            if ((IDLanguage.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(IDLanguage.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            ds_Ingredient.GetIngredientsLanguagesDataTable dataTable = new ds_Ingredient.GetIngredientsLanguagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetIngredientsLanguagesDataTable GetIngredientByName(string IngredientName, global::System.Nullable<int> IDLanguage) {
            this.Adapter.SelectCommand = this.CommandCollection[6];
            if ((IngredientName == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(IngredientName));
            }
            if ((IDLanguage.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(IDLanguage.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            ds_Ingredient.GetIngredientsLanguagesDataTable dataTable = new ds_Ingredient.GetIngredientsLanguagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetIngredientsLanguagesDataTable GetIngrLangByIngredientName(string IngredientName, global::System.Nullable<int> IDLanguage) {
            this.Adapter.SelectCommand = this.CommandCollection[7];
            if ((IngredientName == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(IngredientName));
            }
            if ((IDLanguage.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(IDLanguage.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            ds_Ingredient.GetIngredientsLanguagesDataTable dataTable = new ds_Ingredient.GetIngredientsLanguagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetIngredientsLanguagesDataTable USP_GetIngredientLanguageByIDIngredientIDLanguage(global::System.Nullable<global::System.Guid> IDIngredient, global::System.Nullable<int> IDLanguage) {
            this.Adapter.SelectCommand = this.CommandCollection[8];
            if ((IDIngredient.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.Guid)(IDIngredient.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IDLanguage.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(IDLanguage.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            ds_Ingredient.GetIngredientsLanguagesDataTable dataTable = new ds_Ingredient.GetIngredientsLanguagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetIngredientsLanguagesDataTable USP_GetIngredientList(string StartWith, global::System.Nullable<bool> Vegan, global::System.Nullable<bool> Vegetarian, global::System.Nullable<bool> GlutenFree, global::System.Nullable<bool> HotSpicy, global::System.Nullable<int> IDLanguage, global::System.Nullable<int> OffsetRows, global::System.Nullable<int> FetchRows) {
            this.Adapter.SelectCommand = this.CommandCollection[9];
            if ((StartWith == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(StartWith));
            }
            if ((Vegan.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((bool)(Vegan.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Vegetarian.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((bool)(Vegetarian.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((GlutenFree.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[4].Value = ((bool)(GlutenFree.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((HotSpicy.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[5].Value = ((bool)(HotSpicy.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((IDLanguage.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[6].Value = ((int)(IDLanguage.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((OffsetRows.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[7].Value = ((int)(OffsetRows.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((FetchRows.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[8].Value = ((int)(FetchRows.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            ds_Ingredient.GetIngredientsLanguagesDataTable dataTable = new ds_Ingredient.GetIngredientsLanguagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetIngredientsLanguagesDataTable USP_GetIngredientToTranslate(global::System.Nullable<int> IDLanguageFrom, global::System.Nullable<int> IDLanguageTo, global::System.Nullable<int> NumRow) {
            this.Adapter.SelectCommand = this.CommandCollection[10];
            if ((IDLanguageFrom.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(IDLanguageFrom.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IDLanguageTo.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(IDLanguageTo.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((NumRow.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((int)(NumRow.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            ds_Ingredient.GetIngredientsLanguagesDataTable dataTable = new ds_Ingredient.GetIngredientsLanguagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetIngredientsCategoriesDAL : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public GetIngredientsCategoriesDAL() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetIngredientsCategories";
            tableMapping.ColumnMappings.Add("Enabled", "Enabled");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[IngredientsCategories] WHERE (([IDIngredientCategory] = @Origi" +
                "nal_IDIngredientCategory) AND ([Enabled] = @Original_Enabled))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientCategory", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientCategory", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Enabled", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Enabled", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [IngredientsCategories] ([Enabled]) VALUES (@Enabled)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Enabled", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Enabled", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[IngredientsCategories] SET [Enabled] = @Enabled WHERE (([IDIngredientCategory] = @Original_IDIngredientCategory) AND ([Enabled] = @Original_Enabled));
SELECT IDIngredientCategory, Enabled FROM IngredientsCategories WHERE (IDIngredientCategory = @IDIngredientCategory)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Enabled", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Enabled", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientCategory", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientCategory", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Enabled", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Enabled", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientCategory", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientCategory", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MyCookin.DAL.Properties.Settings.Default.DBRecipesConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[4];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Enabled FROM IngredientsCategories";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT IDIngredientCategoryFather, Enabled FROM IngredientsCategories WHERE (Enab" +
                "led = 1)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT Enabled, IDIngredientCategoryFather FROM IngredientsCategories WHERE (IDIn" +
                "gredientCategory = @IDIngredientCategory)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientCategory", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientCategory", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "dbo.USP_GetAllCategoryByIDLanguageIDFatherCategory";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDFatherCategory", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MaxDepth", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ds_Ingredient.GetIngredientsCategoriesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ds_Ingredient.GetIngredientsCategoriesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ds_Ingredient.GetIngredientsCategoriesDataTable dataTable = new ds_Ingredient.GetIngredientsCategoriesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetIngredientsCategoriesDataTable GetIngredientCategories() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            ds_Ingredient.GetIngredientsCategoriesDataTable dataTable = new ds_Ingredient.GetIngredientsCategoriesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetIngredientsCategoriesDataTable GetIngredientCategoryByID(global::System.Nullable<int> IDIngredientCategory) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((IDIngredientCategory.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(IDIngredientCategory.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            ds_Ingredient.GetIngredientsCategoriesDataTable dataTable = new ds_Ingredient.GetIngredientsCategoriesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetIngredientsCategoriesDataTable USP_GetAllCategoryByIDLanguageIDFatherCategory(global::System.Nullable<int> IDLanguage, global::System.Nullable<int> IDFatherCategory, global::System.Nullable<int> MaxDepth) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((IDLanguage.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(IDLanguage.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IDFatherCategory.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(IDFatherCategory.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((MaxDepth.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((int)(MaxDepth.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            ds_Ingredient.GetIngredientsCategoriesDataTable dataTable = new ds_Ingredient.GetIngredientsCategoriesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_Ingredient.GetIngredientsCategoriesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_Ingredient dataSet) {
            return this.Adapter.Update(dataSet, "GetIngredientsCategories");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(global::System.Nullable<int> Original_IDIngredientCategory, global::System.Nullable<bool> Original_Enabled) {
            if ((Original_IDIngredientCategory.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_IDIngredientCategory.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((Original_Enabled.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((bool)(Original_Enabled.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(bool Enabled) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((bool)(Enabled));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<bool> Enabled, global::System.Nullable<int> Original_IDIngredientCategory, global::System.Nullable<bool> Original_Enabled, global::System.Nullable<int> IDIngredientCategory) {
            if ((Enabled.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((bool)(Enabled.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((Original_IDIngredientCategory.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Original_IDIngredientCategory.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Original_Enabled.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(Original_Enabled.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((IDIngredientCategory.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(IDIngredientCategory.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetIngredientsCategoriesLanguagesDAL : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public GetIngredientsCategoriesLanguagesDAL() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetIngredientsCategoriesLanguages";
            tableMapping.ColumnMappings.Add("IDIngredientCategoryLanguage", "IDIngredientCategoryLanguage");
            tableMapping.ColumnMappings.Add("IDIngredientCategory", "IDIngredientCategory");
            tableMapping.ColumnMappings.Add("IDLanguage", "IDLanguage");
            tableMapping.ColumnMappings.Add("IngredientCategoryLanguage", "IngredientCategoryLanguage");
            tableMapping.ColumnMappings.Add("IngredientCategoryLanguageDesc", "IngredientCategoryLanguageDesc");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[IngredientsCategoriesLanguages] WHERE (([IDIngredientCategoryLanguage] = @Original_IDIngredientCategoryLanguage) AND ([IDIngredientCategory] = @Original_IDIngredientCategory) AND ([IDLanguage] = @Original_IDLanguage) AND ([IngredientCategoryLanguage] = @Original_IngredientCategoryLanguage) AND ((@IsNull_IngredientCategoryLanguageDesc = 1 AND [IngredientCategoryLanguageDesc] IS NULL) OR ([IngredientCategoryLanguageDesc] = @Original_IngredientCategoryLanguageDesc)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientCategoryLanguage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientCategoryLanguage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientCategory", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientCategory", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDLanguage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDLanguage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IngredientCategoryLanguage", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientCategoryLanguage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IngredientCategoryLanguageDesc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientCategoryLanguageDesc", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IngredientCategoryLanguageDesc", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientCategoryLanguageDesc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[IngredientsCategoriesLanguages] ([IDIngredientCategory], [IDLanguage], [IngredientCategoryLanguage], [IngredientCategoryLanguageDesc]) VALUES (@IDIngredientCategory, @IDLanguage, @IngredientCategoryLanguage, @IngredientCategoryLanguageDesc);
SELECT IDIngredientCategoryLanguage, IDIngredientCategory, IDLanguage, IngredientCategoryLanguage, IngredientCategoryLanguageDesc FROM IngredientsCategoriesLanguages WHERE (IDIngredientCategoryLanguage = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientCategory", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientCategory", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDLanguage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IngredientCategoryLanguage", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientCategoryLanguage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IngredientCategoryLanguageDesc", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientCategoryLanguageDesc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[IngredientsCategoriesLanguages] SET [IDIngredientCategory] = @IDIngredientCategory, [IDLanguage] = @IDLanguage, [IngredientCategoryLanguage] = @IngredientCategoryLanguage, [IngredientCategoryLanguageDesc] = @IngredientCategoryLanguageDesc WHERE (([IDIngredientCategoryLanguage] = @Original_IDIngredientCategoryLanguage) AND ([IDIngredientCategory] = @Original_IDIngredientCategory) AND ([IDLanguage] = @Original_IDLanguage) AND ([IngredientCategoryLanguage] = @Original_IngredientCategoryLanguage) AND ((@IsNull_IngredientCategoryLanguageDesc = 1 AND [IngredientCategoryLanguageDesc] IS NULL) OR ([IngredientCategoryLanguageDesc] = @Original_IngredientCategoryLanguageDesc)));
SELECT IDIngredientCategoryLanguage, IDIngredientCategory, IDLanguage, IngredientCategoryLanguage, IngredientCategoryLanguageDesc FROM IngredientsCategoriesLanguages WHERE (IDIngredientCategoryLanguage = @IDIngredientCategoryLanguage)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientCategory", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientCategory", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDLanguage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IngredientCategoryLanguage", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientCategoryLanguage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IngredientCategoryLanguageDesc", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientCategoryLanguageDesc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientCategoryLanguage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientCategoryLanguage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientCategory", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientCategory", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDLanguage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDLanguage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IngredientCategoryLanguage", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientCategoryLanguage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IngredientCategoryLanguageDesc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientCategoryLanguageDesc", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IngredientCategoryLanguageDesc", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientCategoryLanguageDesc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientCategoryLanguage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientCategoryLanguage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MyCookin.DAL.Properties.Settings.Default.DBRecipesConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT IDIngredientCategoryLanguage, IDIngredientCategory, IDLanguage, Ingredient" +
                "CategoryLanguage, IngredientCategoryLanguageDesc FROM dbo.IngredientsCategoriesL" +
                "anguages";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT     IngredientsCategoriesLanguages.IDIngredientCategoryLanguage, IngredientsCategoriesLanguages.IDIngredientCategory, 
                      IngredientsCategoriesLanguages.IDLanguage, IngredientsCategoriesLanguages.IngredientCategoryLanguage, 
                      IngredientsCategoriesLanguages.IngredientCategoryLanguageDesc
FROM         IngredientsCategoriesLanguages INNER JOIN
                      IngredientsCategories ON IngredientsCategoriesLanguages.IDIngredientCategory = IngredientsCategories.IDIngredientCategory
WHERE     (IngredientsCategories.Enabled = 1) AND (IngredientsCategoriesLanguages.IDLanguage = @IDLanguage)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDLanguage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"SELECT     IngredientsCategoriesLanguages.IDIngredientCategoryLanguage, IngredientsCategoriesLanguages.IDIngredientCategory, 
                      IngredientsCategoriesLanguages.IDLanguage, IngredientsCategoriesLanguages.IngredientCategoryLanguage, 
                      IngredientsCategoriesLanguages.IngredientCategoryLanguageDesc, IngredientsCategories.IDIngredientCategoryFather, IngredientsCategories.Enabled
FROM         IngredientsCategoriesLanguages INNER JOIN
                      IngredientsCategories ON IngredientsCategoriesLanguages.IDIngredientCategory = IngredientsCategories.IDIngredientCategory
WHERE     (IngredientsCategoriesLanguages.IDIngredientCategory = @IDIngredientCategory) AND (IngredientsCategoriesLanguages.IDLanguage = @IDLanguage)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientCategory", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientCategory", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDLanguage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ds_Ingredient.GetIngredientsCategoriesLanguagesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ds_Ingredient.GetIngredientsCategoriesLanguagesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ds_Ingredient.GetIngredientsCategoriesLanguagesDataTable dataTable = new ds_Ingredient.GetIngredientsCategoriesLanguagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetIngredientsCategoriesLanguagesDataTable GetAllIngredientCategoriesByIDLang(global::System.Nullable<int> IDLanguage) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((IDLanguage.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(IDLanguage.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            ds_Ingredient.GetIngredientsCategoriesLanguagesDataTable dataTable = new ds_Ingredient.GetIngredientsCategoriesLanguagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetIngredientsCategoriesLanguagesDataTable GetIngrCatLangByIDIngrCatAndIDLang(global::System.Nullable<int> IDIngredientCategory, global::System.Nullable<int> IDLanguage) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((IDIngredientCategory.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(IDIngredientCategory.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((IDLanguage.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(IDLanguage.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            ds_Ingredient.GetIngredientsCategoriesLanguagesDataTable dataTable = new ds_Ingredient.GetIngredientsCategoriesLanguagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_Ingredient.GetIngredientsCategoriesLanguagesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_Ingredient dataSet) {
            return this.Adapter.Update(dataSet, "GetIngredientsCategoriesLanguages");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(global::System.Nullable<int> Original_IDIngredientCategoryLanguage, global::System.Nullable<int> Original_IDIngredientCategory, global::System.Nullable<int> Original_IDLanguage, string Original_IngredientCategoryLanguage, string Original_IngredientCategoryLanguageDesc) {
            if ((Original_IDIngredientCategoryLanguage.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_IDIngredientCategoryLanguage.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((Original_IDIngredientCategory.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_IDIngredientCategory.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Original_IDLanguage.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_IDLanguage.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_IngredientCategoryLanguage == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_IngredientCategoryLanguage));
            }
            if ((Original_IngredientCategoryLanguageDesc == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_IngredientCategoryLanguageDesc));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<int> IDIngredientCategory, global::System.Nullable<int> IDLanguage, string IngredientCategoryLanguage, string IngredientCategoryLanguageDesc) {
            if ((IDIngredientCategory.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(IDIngredientCategory.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((IDLanguage.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(IDLanguage.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IngredientCategoryLanguage == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(IngredientCategoryLanguage));
            }
            if ((IngredientCategoryLanguageDesc == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(IngredientCategoryLanguageDesc));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<int> IDIngredientCategory, global::System.Nullable<int> IDLanguage, string IngredientCategoryLanguage, string IngredientCategoryLanguageDesc, global::System.Nullable<int> Original_IDIngredientCategoryLanguage, global::System.Nullable<int> Original_IDIngredientCategory, global::System.Nullable<int> Original_IDLanguage, string Original_IngredientCategoryLanguage, string Original_IngredientCategoryLanguageDesc, global::System.Nullable<int> IDIngredientCategoryLanguage) {
            if ((IDIngredientCategory.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(IDIngredientCategory.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((IDLanguage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(IDLanguage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IngredientCategoryLanguage == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(IngredientCategoryLanguage));
            }
            if ((IngredientCategoryLanguageDesc == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(IngredientCategoryLanguageDesc));
            }
            if ((Original_IDIngredientCategoryLanguage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_IDIngredientCategoryLanguage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_IDIngredientCategory.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_IDIngredientCategory.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_IDLanguage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_IDLanguage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_IngredientCategoryLanguage == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_IngredientCategoryLanguage));
            }
            if ((Original_IngredientCategoryLanguageDesc == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_IngredientCategoryLanguageDesc));
            }
            if ((IDIngredientCategoryLanguage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(IDIngredientCategoryLanguage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetIngredientsIngredientsCategoriesDAL : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public GetIngredientsIngredientsCategoriesDAL() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetIngredientsIngredientsCategories";
            tableMapping.ColumnMappings.Add("IDIngredientIngredientCategory", "IDIngredientIngredientCategory");
            tableMapping.ColumnMappings.Add("IDIngredient", "IDIngredient");
            tableMapping.ColumnMappings.Add("IDIngredientCategory", "IDIngredientCategory");
            tableMapping.ColumnMappings.Add("isPrincipalCategory", "isPrincipalCategory");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[IngredientsIngredientsCategories] WHERE (([IDIngredientIngredientCategory] = @Original_IDIngredientIngredientCategory) AND ([IDIngredient] = @Original_IDIngredient) AND ([IDIngredientCategory] = @Original_IDIngredientCategory) AND ([isPrincipalCategory] = @Original_isPrincipalCategory))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientIngredientCategory", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientIngredientCategory", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredient", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredient", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientCategory", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientCategory", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_isPrincipalCategory", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isPrincipalCategory", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[IngredientsIngredientsCategories] ([IDIngredientIngredientCategory], [IDIngredient], [IDIngredientCategory], [isPrincipalCategory]) VALUES (@IDIngredientIngredientCategory, @IDIngredient, @IDIngredientCategory, @isPrincipalCategory);
SELECT IDIngredientIngredientCategory, IDIngredient, IDIngredientCategory, isPrincipalCategory FROM IngredientsIngredientsCategories WHERE (IDIngredientIngredientCategory = @IDIngredientIngredientCategory)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientIngredientCategory", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientIngredientCategory", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredient", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredient", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientCategory", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientCategory", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isPrincipalCategory", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isPrincipalCategory", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[IngredientsIngredientsCategories] SET [IDIngredientIngredientCategory] = @IDIngredientIngredientCategory, [IDIngredient] = @IDIngredient, [IDIngredientCategory] = @IDIngredientCategory, [isPrincipalCategory] = @isPrincipalCategory WHERE (([IDIngredientIngredientCategory] = @Original_IDIngredientIngredientCategory) AND ([IDIngredient] = @Original_IDIngredient) AND ([IDIngredientCategory] = @Original_IDIngredientCategory) AND ([isPrincipalCategory] = @Original_isPrincipalCategory));
SELECT IDIngredientIngredientCategory, IDIngredient, IDIngredientCategory, isPrincipalCategory FROM IngredientsIngredientsCategories WHERE (IDIngredientIngredientCategory = @IDIngredientIngredientCategory)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientIngredientCategory", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientIngredientCategory", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredient", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredient", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientCategory", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientCategory", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isPrincipalCategory", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isPrincipalCategory", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientIngredientCategory", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientIngredientCategory", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredient", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredient", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientCategory", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientCategory", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_isPrincipalCategory", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isPrincipalCategory", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MyCookin.DAL.Properties.Settings.Default.DBRecipesConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT IDIngredientIngredientCategory, IDIngredient, IDIngredientCategory, isPrin" +
                "cipalCategory FROM dbo.IngredientsIngredientsCategories";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT     IDIngredientIngredientCategory, IDIngredient, IDIngredientCategory, is" +
                "PrincipalCategory\r\nFROM         IngredientsIngredientsCategories\r\nWHERE     (IDI" +
                "ngredient = @IDIngredient)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredient", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredient", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ds_Ingredient.GetIngredientsIngredientsCategoriesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ds_Ingredient.GetIngredientsIngredientsCategoriesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ds_Ingredient.GetIngredientsIngredientsCategoriesDataTable dataTable = new ds_Ingredient.GetIngredientsIngredientsCategoriesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetIngredientsIngredientsCategoriesDataTable GetAllIngredientCategoriesByIDIngredient(System.Guid IDIngredient) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDIngredient));
            ds_Ingredient.GetIngredientsIngredientsCategoriesDataTable dataTable = new ds_Ingredient.GetIngredientsIngredientsCategoriesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_Ingredient.GetIngredientsIngredientsCategoriesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_Ingredient dataSet) {
            return this.Adapter.Update(dataSet, "GetIngredientsIngredientsCategories");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(global::System.Nullable<global::System.Guid> Original_IDIngredientIngredientCategory, global::System.Nullable<global::System.Guid> Original_IDIngredient, global::System.Nullable<int> Original_IDIngredientCategory, global::System.Nullable<bool> Original_isPrincipalCategory) {
            if ((Original_IDIngredientIngredientCategory.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_IDIngredientIngredientCategory.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((Original_IDIngredient.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((System.Guid)(Original_IDIngredient.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Original_IDIngredientCategory.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_IDIngredientCategory.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_isPrincipalCategory.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((bool)(Original_isPrincipalCategory.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<global::System.Guid> IDIngredientIngredientCategory, global::System.Nullable<global::System.Guid> IDIngredient, global::System.Nullable<int> IDIngredientCategory, global::System.Nullable<bool> isPrincipalCategory) {
            if ((IDIngredientIngredientCategory.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(IDIngredientIngredientCategory.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((IDIngredient.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.Guid)(IDIngredient.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IDIngredientCategory.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(IDIngredientCategory.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((isPrincipalCategory.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(isPrincipalCategory.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<global::System.Guid> IDIngredientIngredientCategory, global::System.Nullable<global::System.Guid> IDIngredient, global::System.Nullable<int> IDIngredientCategory, global::System.Nullable<bool> isPrincipalCategory, global::System.Nullable<global::System.Guid> Original_IDIngredientIngredientCategory, global::System.Nullable<global::System.Guid> Original_IDIngredient, global::System.Nullable<int> Original_IDIngredientCategory, global::System.Nullable<bool> Original_isPrincipalCategory) {
            if ((IDIngredientIngredientCategory.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(IDIngredientIngredientCategory.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((IDIngredient.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((System.Guid)(IDIngredient.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IDIngredientCategory.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(IDIngredientCategory.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((isPrincipalCategory.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(isPrincipalCategory.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Original_IDIngredientIngredientCategory.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((System.Guid)(Original_IDIngredientIngredientCategory.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_IDIngredient.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((System.Guid)(Original_IDIngredient.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_IDIngredientCategory.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_IDIngredientCategory.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_isPrincipalCategory.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((bool)(Original_isPrincipalCategory.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<global::System.Guid> IDIngredient, global::System.Nullable<int> IDIngredientCategory, global::System.Nullable<bool> isPrincipalCategory, global::System.Nullable<global::System.Guid> Original_IDIngredientIngredientCategory, global::System.Nullable<global::System.Guid> Original_IDIngredient, global::System.Nullable<int> Original_IDIngredientCategory, global::System.Nullable<bool> Original_isPrincipalCategory) {
            return this.Update(Original_IDIngredientIngredientCategory, IDIngredient, IDIngredientCategory, isPrincipalCategory, Original_IDIngredientIngredientCategory, Original_IDIngredient, Original_IDIngredientCategory, Original_isPrincipalCategory);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetIngredientsQuantityTypesDAL : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public GetIngredientsQuantityTypesDAL() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetIngredientsQuantityTypes";
            tableMapping.ColumnMappings.Add("IDIngredientQuantityType", "IDIngredientQuantityType");
            tableMapping.ColumnMappings.Add("isWeight", "isWeight");
            tableMapping.ColumnMappings.Add("isLiquid", "isLiquid");
            tableMapping.ColumnMappings.Add("isPiece", "isPiece");
            tableMapping.ColumnMappings.Add("isStandardQuantityType", "isStandardQuantityType");
            tableMapping.ColumnMappings.Add("NoStdAvgWeight", "NoStdAvgWeight");
            tableMapping.ColumnMappings.Add("EnabledToUser", "EnabledToUser");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[IngredientsQuantityTypes] WHERE (([IDIngredientQuantityType] = @Original_IDIngredientQuantityType) AND ([isWeight] = @Original_isWeight) AND ([isLiquid] = @Original_isLiquid) AND ([isPiece] = @Original_isPiece) AND ([isStandardQuantityType] = @Original_isStandardQuantityType) AND ((@IsNull_NoStdAvgWeight = 1 AND [NoStdAvgWeight] IS NULL) OR ([NoStdAvgWeight] = @Original_NoStdAvgWeight)) AND ([EnabledToUser] = @Original_EnabledToUser))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientQuantityType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientQuantityType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_isWeight", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isWeight", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_isLiquid", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isLiquid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_isPiece", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isPiece", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_isStandardQuantityType", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isStandardQuantityType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NoStdAvgWeight", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NoStdAvgWeight", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NoStdAvgWeight", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NoStdAvgWeight", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EnabledToUser", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EnabledToUser", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[IngredientsQuantityTypes] ([isWeight], [isLiquid], [isPiece], [isStandardQuantityType], [NoStdAvgWeight], [EnabledToUser]) VALUES (@isWeight, @isLiquid, @isPiece, @isStandardQuantityType, @NoStdAvgWeight, @EnabledToUser);
SELECT IDIngredientQuantityType, isWeight, isLiquid, isPiece, isStandardQuantityType, NoStdAvgWeight, EnabledToUser FROM IngredientsQuantityTypes WHERE (IDIngredientQuantityType = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isWeight", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isWeight", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isLiquid", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isLiquid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isPiece", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isPiece", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isStandardQuantityType", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isStandardQuantityType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NoStdAvgWeight", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NoStdAvgWeight", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EnabledToUser", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EnabledToUser", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[IngredientsQuantityTypes] SET [isWeight] = @isWeight, [isLiquid] = @isLiquid, [isPiece] = @isPiece, [isStandardQuantityType] = @isStandardQuantityType, [NoStdAvgWeight] = @NoStdAvgWeight, [EnabledToUser] = @EnabledToUser WHERE (([IDIngredientQuantityType] = @Original_IDIngredientQuantityType) AND ([isWeight] = @Original_isWeight) AND ([isLiquid] = @Original_isLiquid) AND ([isPiece] = @Original_isPiece) AND ([isStandardQuantityType] = @Original_isStandardQuantityType) AND ((@IsNull_NoStdAvgWeight = 1 AND [NoStdAvgWeight] IS NULL) OR ([NoStdAvgWeight] = @Original_NoStdAvgWeight)) AND ([EnabledToUser] = @Original_EnabledToUser));
SELECT IDIngredientQuantityType, isWeight, isLiquid, isPiece, isStandardQuantityType, NoStdAvgWeight, EnabledToUser FROM IngredientsQuantityTypes WHERE (IDIngredientQuantityType = @IDIngredientQuantityType)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isWeight", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isWeight", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isLiquid", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isLiquid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isPiece", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isPiece", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isStandardQuantityType", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isStandardQuantityType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NoStdAvgWeight", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NoStdAvgWeight", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EnabledToUser", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EnabledToUser", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientQuantityType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientQuantityType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_isWeight", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isWeight", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_isLiquid", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isLiquid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_isPiece", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isPiece", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_isStandardQuantityType", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isStandardQuantityType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_NoStdAvgWeight", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NoStdAvgWeight", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NoStdAvgWeight", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NoStdAvgWeight", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EnabledToUser", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EnabledToUser", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientQuantityType", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientQuantityType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MyCookin.DAL.Properties.Settings.Default.DBRecipesConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT IDIngredientQuantityType, isWeight, isLiquid, isPiece, isStandardQuantityT" +
                "ype, NoStdAvgWeight, EnabledToUser FROM dbo.IngredientsQuantityTypes";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT IDIngredientQuantityType, isWeight, isLiquid, isPiece, isStandardQuantityT" +
                "ype, NoStdAvgWeight, EnabledToUser,ShowInIngredientList FROM dbo.IngredientsQuan" +
                "tityTypes\r\nWHERE IDIngredientQuantityType = @IDIngredientQuantityType";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientQuantityType", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientQuantityType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ds_Ingredient.GetIngredientsQuantityTypesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ds_Ingredient.GetIngredientsQuantityTypesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ds_Ingredient.GetIngredientsQuantityTypesDataTable dataTable = new ds_Ingredient.GetIngredientsQuantityTypesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetIngredientsQuantityTypesDataTable GetIngredientsQuantityTypesByID(int IDIngredientQuantityType) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(IDIngredientQuantityType));
            ds_Ingredient.GetIngredientsQuantityTypesDataTable dataTable = new ds_Ingredient.GetIngredientsQuantityTypesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_Ingredient.GetIngredientsQuantityTypesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_Ingredient dataSet) {
            return this.Adapter.Update(dataSet, "GetIngredientsQuantityTypes");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(global::System.Nullable<int> Original_IDIngredientQuantityType, global::System.Nullable<bool> Original_isWeight, global::System.Nullable<bool> Original_isLiquid, global::System.Nullable<bool> Original_isPiece, global::System.Nullable<bool> Original_isStandardQuantityType, global::System.Nullable<double> Original_NoStdAvgWeight, global::System.Nullable<bool> Original_EnabledToUser) {
            if ((Original_IDIngredientQuantityType.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_IDIngredientQuantityType.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((Original_isWeight.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((bool)(Original_isWeight.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Original_isLiquid.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((bool)(Original_isLiquid.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_isPiece.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((bool)(Original_isPiece.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Original_isStandardQuantityType.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_isStandardQuantityType.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_NoStdAvgWeight.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((double)(Original_NoStdAvgWeight.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_EnabledToUser.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((bool)(Original_EnabledToUser.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<bool> isWeight, global::System.Nullable<bool> isLiquid, global::System.Nullable<bool> isPiece, global::System.Nullable<bool> isStandardQuantityType, global::System.Nullable<double> NoStdAvgWeight, global::System.Nullable<bool> EnabledToUser) {
            if ((isWeight.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((bool)(isWeight.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((isLiquid.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((bool)(isLiquid.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((isPiece.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(isPiece.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((isStandardQuantityType.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(isStandardQuantityType.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((NoStdAvgWeight.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(NoStdAvgWeight.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((EnabledToUser.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(EnabledToUser.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<bool> isWeight, global::System.Nullable<bool> isLiquid, global::System.Nullable<bool> isPiece, global::System.Nullable<bool> isStandardQuantityType, global::System.Nullable<double> NoStdAvgWeight, global::System.Nullable<bool> EnabledToUser, global::System.Nullable<int> Original_IDIngredientQuantityType, global::System.Nullable<bool> Original_isWeight, global::System.Nullable<bool> Original_isLiquid, global::System.Nullable<bool> Original_isPiece, global::System.Nullable<bool> Original_isStandardQuantityType, global::System.Nullable<double> Original_NoStdAvgWeight, global::System.Nullable<bool> Original_EnabledToUser, global::System.Nullable<int> IDIngredientQuantityType) {
            if ((isWeight.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((bool)(isWeight.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((isLiquid.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((bool)(isLiquid.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((isPiece.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(isPiece.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((isStandardQuantityType.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(isStandardQuantityType.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((NoStdAvgWeight.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(NoStdAvgWeight.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((EnabledToUser.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(EnabledToUser.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_IDIngredientQuantityType.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_IDIngredientQuantityType.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_isWeight.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((bool)(Original_isWeight.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_isLiquid.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((bool)(Original_isLiquid.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_isPiece.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(Original_isPiece.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_isStandardQuantityType.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(Original_isStandardQuantityType.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_NoStdAvgWeight.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((double)(Original_NoStdAvgWeight.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_EnabledToUser.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((bool)(Original_EnabledToUser.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((IDIngredientQuantityType.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(IDIngredientQuantityType.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<bool> isWeight, global::System.Nullable<bool> isLiquid, global::System.Nullable<bool> isPiece, global::System.Nullable<bool> isStandardQuantityType, global::System.Nullable<double> NoStdAvgWeight, global::System.Nullable<bool> EnabledToUser, global::System.Nullable<int> Original_IDIngredientQuantityType, global::System.Nullable<bool> Original_isWeight, global::System.Nullable<bool> Original_isLiquid, global::System.Nullable<bool> Original_isPiece, global::System.Nullable<bool> Original_isStandardQuantityType, global::System.Nullable<double> Original_NoStdAvgWeight, global::System.Nullable<bool> Original_EnabledToUser) {
            return this.Update(isWeight, isLiquid, isPiece, isStandardQuantityType, NoStdAvgWeight, EnabledToUser, Original_IDIngredientQuantityType, Original_isWeight, Original_isLiquid, Original_isPiece, Original_isStandardQuantityType, Original_NoStdAvgWeight, Original_EnabledToUser, Original_IDIngredientQuantityType);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetIngredientsQuantityTypesLanguagesDAL : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public GetIngredientsQuantityTypesLanguagesDAL() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetIngredientsQuantityTypesLanguages";
            tableMapping.ColumnMappings.Add("IDIngredientQuantityTypeLanguage", "IDIngredientQuantityTypeLanguage");
            tableMapping.ColumnMappings.Add("IDIngredientQuantityType", "IDIngredientQuantityType");
            tableMapping.ColumnMappings.Add("IDLanguage", "IDLanguage");
            tableMapping.ColumnMappings.Add("IngredientQuantityTypeSingular", "IngredientQuantityTypeSingular");
            tableMapping.ColumnMappings.Add("IngredientQuantityTypePlural", "IngredientQuantityTypePlural");
            tableMapping.ColumnMappings.Add("ConvertionRatio", "ConvertionRatio");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[IngredientsQuantityTypesLanguages] WHERE (([IDIngredientQuantityTypeLanguage] = @Original_IDIngredientQuantityTypeLanguage) AND ([IDIngredientQuantityType] = @Original_IDIngredientQuantityType) AND ([IDLanguage] = @Original_IDLanguage) AND ([IngredientQuantityTypeSingular] = @Original_IngredientQuantityTypeSingular) AND ((@IsNull_IngredientQuantityTypePlural = 1 AND [IngredientQuantityTypePlural] IS NULL) OR ([IngredientQuantityTypePlural] = @Original_IngredientQuantityTypePlural)) AND ([ConvertionRatio] = @Original_ConvertionRatio))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientQuantityTypeLanguage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientQuantityTypeLanguage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientQuantityType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientQuantityType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDLanguage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDLanguage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IngredientQuantityTypeSingular", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientQuantityTypeSingular", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IngredientQuantityTypePlural", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientQuantityTypePlural", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IngredientQuantityTypePlural", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientQuantityTypePlural", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ConvertionRatio", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ConvertionRatio", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[IngredientsQuantityTypesLanguages] ([IDIngredientQuantityType], [IDLanguage], [IngredientQuantityTypeSingular], [IngredientQuantityTypePlural], [ConvertionRatio]) VALUES (@IDIngredientQuantityType, @IDLanguage, @IngredientQuantityTypeSingular, @IngredientQuantityTypePlural, @ConvertionRatio);
SELECT IDIngredientQuantityTypeLanguage, IDIngredientQuantityType, IDLanguage, IngredientQuantityTypeSingular, IngredientQuantityTypePlural, ConvertionRatio FROM IngredientsQuantityTypesLanguages WHERE (IDIngredientQuantityTypeLanguage = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientQuantityType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientQuantityType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDLanguage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IngredientQuantityTypeSingular", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientQuantityTypeSingular", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IngredientQuantityTypePlural", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientQuantityTypePlural", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ConvertionRatio", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ConvertionRatio", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[IngredientsQuantityTypesLanguages] SET [IDIngredientQuantityType] = @IDIngredientQuantityType, [IDLanguage] = @IDLanguage, [IngredientQuantityTypeSingular] = @IngredientQuantityTypeSingular, [IngredientQuantityTypePlural] = @IngredientQuantityTypePlural, [ConvertionRatio] = @ConvertionRatio WHERE (([IDIngredientQuantityTypeLanguage] = @Original_IDIngredientQuantityTypeLanguage) AND ([IDIngredientQuantityType] = @Original_IDIngredientQuantityType) AND ([IDLanguage] = @Original_IDLanguage) AND ([IngredientQuantityTypeSingular] = @Original_IngredientQuantityTypeSingular) AND ((@IsNull_IngredientQuantityTypePlural = 1 AND [IngredientQuantityTypePlural] IS NULL) OR ([IngredientQuantityTypePlural] = @Original_IngredientQuantityTypePlural)) AND ([ConvertionRatio] = @Original_ConvertionRatio));
SELECT IDIngredientQuantityTypeLanguage, IDIngredientQuantityType, IDLanguage, IngredientQuantityTypeSingular, IngredientQuantityTypePlural, ConvertionRatio FROM IngredientsQuantityTypesLanguages WHERE (IDIngredientQuantityTypeLanguage = @IDIngredientQuantityTypeLanguage)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientQuantityType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientQuantityType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDLanguage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IngredientQuantityTypeSingular", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientQuantityTypeSingular", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IngredientQuantityTypePlural", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientQuantityTypePlural", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ConvertionRatio", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ConvertionRatio", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientQuantityTypeLanguage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientQuantityTypeLanguage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientQuantityType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientQuantityType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDLanguage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDLanguage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IngredientQuantityTypeSingular", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientQuantityTypeSingular", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IngredientQuantityTypePlural", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientQuantityTypePlural", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IngredientQuantityTypePlural", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientQuantityTypePlural", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ConvertionRatio", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ConvertionRatio", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientQuantityTypeLanguage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientQuantityTypeLanguage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MyCookin.DAL.Properties.Settings.Default.DBRecipesConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[4];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT IDIngredientQuantityTypeLanguage, IDIngredientQuantityType, IDLanguage, In" +
                "gredientQuantityTypeSingular, IngredientQuantityTypePlural, ConvertionRatio FROM" +
                " dbo.IngredientsQuantityTypesLanguages";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT     IngredientsQuantityTypesLanguages.IDIngredientQuantityTypeLanguage, IngredientsQuantityTypesLanguages.IDIngredientQuantityType, 
                      IngredientsQuantityTypesLanguages.IDLanguage, IngredientsQuantityTypesLanguages.IngredientQuantityTypeSingular, 
                      IngredientsQuantityTypesLanguages.IngredientQuantityTypePlural, IngredientsQuantityTypesLanguages.ConvertionRatio,IngredientQuantityTypeX1000Singular,IngredientQuantityTypeX1000Plural,IngredientQuantityTypeWordsShowBefore, IngredientQuantityTypeWordsShowAfter
FROM         IngredientsQuantityTypesLanguages INNER JOIN
                      IngredientsQuantityTypes ON IngredientsQuantityTypesLanguages.IDIngredientQuantityType = IngredientsQuantityTypes.IDIngredientQuantityType INNER JOIN
                      IngredientsAllowedQuantityTypes ON IngredientsQuantityTypes.IDIngredientQuantityType = IngredientsAllowedQuantityTypes.IDIngredientQuantityType
WHERE     (IngredientsQuantityTypes.EnabledToUser = 1) AND (IngredientsAllowedQuantityTypes.IDingredient = @IDIngredient) AND 
                      (IngredientsQuantityTypesLanguages.IDLanguage = @IDLanguage)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredient", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, "IDingredient", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDLanguage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.USP_GetAllIngredientsQuantityTypesByIDLang";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "dbo.USP_GetIngredientsQuantityTypesLangByID";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientQuantityTypeLanguage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ds_Ingredient.GetIngredientsQuantityTypesLanguagesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ds_Ingredient.GetIngredientsQuantityTypesLanguagesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ds_Ingredient.GetIngredientsQuantityTypesLanguagesDataTable dataTable = new ds_Ingredient.GetIngredientsQuantityTypesLanguagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetIngredientsQuantityTypesLanguagesDataTable GetAllowedQtaTypeByIDIngr(global::System.Nullable<global::System.Guid> IDIngredient, int IDLanguage) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((IDIngredient.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDIngredient.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            this.Adapter.SelectCommand.Parameters[1].Value = ((int)(IDLanguage));
            ds_Ingredient.GetIngredientsQuantityTypesLanguagesDataTable dataTable = new ds_Ingredient.GetIngredientsQuantityTypesLanguagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetIngredientsQuantityTypesLanguagesDataTable USP_GetAllIngredientsQuantityTypesByIDLang(global::System.Nullable<int> IDLanguage) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((IDLanguage.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(IDLanguage.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            ds_Ingredient.GetIngredientsQuantityTypesLanguagesDataTable dataTable = new ds_Ingredient.GetIngredientsQuantityTypesLanguagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetIngredientsQuantityTypesLanguagesDataTable USP_GetIngredientsQuantityTypesLangByID(global::System.Nullable<int> IDIngredientQuantityTypeLanguage, global::System.Nullable<int> IDLanguage) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((IDIngredientQuantityTypeLanguage.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(IDIngredientQuantityTypeLanguage.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IDLanguage.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(IDLanguage.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            ds_Ingredient.GetIngredientsQuantityTypesLanguagesDataTable dataTable = new ds_Ingredient.GetIngredientsQuantityTypesLanguagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_Ingredient.GetIngredientsQuantityTypesLanguagesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_Ingredient dataSet) {
            return this.Adapter.Update(dataSet, "GetIngredientsQuantityTypesLanguages");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(global::System.Nullable<int> Original_IDIngredientQuantityTypeLanguage, global::System.Nullable<int> Original_IDIngredientQuantityType, global::System.Nullable<int> Original_IDLanguage, string Original_IngredientQuantityTypeSingular, string Original_IngredientQuantityTypePlural, global::System.Nullable<double> Original_ConvertionRatio) {
            if ((Original_IDIngredientQuantityTypeLanguage.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_IDIngredientQuantityTypeLanguage.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((Original_IDIngredientQuantityType.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_IDIngredientQuantityType.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Original_IDLanguage.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_IDLanguage.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_IngredientQuantityTypeSingular == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_IngredientQuantityTypeSingular));
            }
            if ((Original_IngredientQuantityTypePlural == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_IngredientQuantityTypePlural));
            }
            if ((Original_ConvertionRatio.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((double)(Original_ConvertionRatio.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<int> IDIngredientQuantityType, global::System.Nullable<int> IDLanguage, string IngredientQuantityTypeSingular, string IngredientQuantityTypePlural, global::System.Nullable<double> ConvertionRatio) {
            if ((IDIngredientQuantityType.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(IDIngredientQuantityType.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((IDLanguage.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(IDLanguage.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IngredientQuantityTypeSingular == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(IngredientQuantityTypeSingular));
            }
            if ((IngredientQuantityTypePlural == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(IngredientQuantityTypePlural));
            }
            if ((ConvertionRatio.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(ConvertionRatio.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<int> IDIngredientQuantityType, global::System.Nullable<int> IDLanguage, string IngredientQuantityTypeSingular, string IngredientQuantityTypePlural, global::System.Nullable<double> ConvertionRatio, global::System.Nullable<int> Original_IDIngredientQuantityTypeLanguage, global::System.Nullable<int> Original_IDIngredientQuantityType, global::System.Nullable<int> Original_IDLanguage, string Original_IngredientQuantityTypeSingular, string Original_IngredientQuantityTypePlural, global::System.Nullable<double> Original_ConvertionRatio, global::System.Nullable<int> IDIngredientQuantityTypeLanguage) {
            if ((IDIngredientQuantityType.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(IDIngredientQuantityType.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((IDLanguage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(IDLanguage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IngredientQuantityTypeSingular == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(IngredientQuantityTypeSingular));
            }
            if ((IngredientQuantityTypePlural == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(IngredientQuantityTypePlural));
            }
            if ((ConvertionRatio.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(ConvertionRatio.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_IDIngredientQuantityTypeLanguage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_IDIngredientQuantityTypeLanguage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_IDIngredientQuantityType.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_IDIngredientQuantityType.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_IDLanguage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_IDLanguage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_IngredientQuantityTypeSingular == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_IngredientQuantityTypeSingular));
            }
            if ((Original_IngredientQuantityTypePlural == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_IngredientQuantityTypePlural));
            }
            if ((Original_ConvertionRatio.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((double)(Original_ConvertionRatio.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((IDIngredientQuantityTypeLanguage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(IDIngredientQuantityTypeLanguage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<int> IDIngredientQuantityType, global::System.Nullable<int> IDLanguage, string IngredientQuantityTypeSingular, string IngredientQuantityTypePlural, global::System.Nullable<double> ConvertionRatio, global::System.Nullable<int> Original_IDIngredientQuantityTypeLanguage, global::System.Nullable<int> Original_IDIngredientQuantityType, global::System.Nullable<int> Original_IDLanguage, string Original_IngredientQuantityTypeSingular, string Original_IngredientQuantityTypePlural, global::System.Nullable<double> Original_ConvertionRatio) {
            return this.Update(IDIngredientQuantityType, IDLanguage, IngredientQuantityTypeSingular, IngredientQuantityTypePlural, ConvertionRatio, Original_IDIngredientQuantityTypeLanguage, Original_IDIngredientQuantityType, Original_IDLanguage, Original_IngredientQuantityTypeSingular, Original_IngredientQuantityTypePlural, Original_ConvertionRatio, Original_IDIngredientQuantityTypeLanguage);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetIngredientsAllowedQuantityTypesDAL : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public GetIngredientsAllowedQuantityTypesDAL() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetIngredientsAllowedQuantityTypes";
            tableMapping.ColumnMappings.Add("IDIngredientAllowedQuantityType", "IDIngredientAllowedQuantityType");
            tableMapping.ColumnMappings.Add("IDingredient", "IDingredient");
            tableMapping.ColumnMappings.Add("IDIngredientQuantityType", "IDIngredientQuantityType");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[IngredientsAllowedQuantityTypes] WHERE (([IDIngredientAllowedQuantityType] = @Original_IDIngredientAllowedQuantityType) AND ((@IsNull_IDingredient = 1 AND [IDingredient] IS NULL) OR ([IDingredient] = @Original_IDingredient)) AND ((@IsNull_IDIngredientQuantityType = 1 AND [IDIngredientQuantityType] IS NULL) OR ([IDIngredientQuantityType] = @Original_IDIngredientQuantityType)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientAllowedQuantityType", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientAllowedQuantityType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IDingredient", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDingredient", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDingredient", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDingredient", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IDIngredientQuantityType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientQuantityType", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientQuantityType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientQuantityType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[IngredientsAllowedQuantityTypes] ([IDIngredientAllowedQuantityType], [IDingredient], [IDIngredientQuantityType]) VALUES (@IDIngredientAllowedQuantityType, @IDingredient, @IDIngredientQuantityType);
SELECT IDIngredientAllowedQuantityType, IDingredient, IDIngredientQuantityType FROM IngredientsAllowedQuantityTypes WHERE (IDIngredientAllowedQuantityType = @IDIngredientAllowedQuantityType)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientAllowedQuantityType", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientAllowedQuantityType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDingredient", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDingredient", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientQuantityType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientQuantityType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[IngredientsAllowedQuantityTypes] SET [IDIngredientAllowedQuantityType] = @IDIngredientAllowedQuantityType, [IDingredient] = @IDingredient, [IDIngredientQuantityType] = @IDIngredientQuantityType WHERE (([IDIngredientAllowedQuantityType] = @Original_IDIngredientAllowedQuantityType) AND ((@IsNull_IDingredient = 1 AND [IDingredient] IS NULL) OR ([IDingredient] = @Original_IDingredient)) AND ((@IsNull_IDIngredientQuantityType = 1 AND [IDIngredientQuantityType] IS NULL) OR ([IDIngredientQuantityType] = @Original_IDIngredientQuantityType)));
SELECT IDIngredientAllowedQuantityType, IDingredient, IDIngredientQuantityType FROM IngredientsAllowedQuantityTypes WHERE (IDIngredientAllowedQuantityType = @IDIngredientAllowedQuantityType)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientAllowedQuantityType", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientAllowedQuantityType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDingredient", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDingredient", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientQuantityType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientQuantityType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientAllowedQuantityType", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientAllowedQuantityType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IDingredient", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDingredient", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDingredient", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDingredient", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IDIngredientQuantityType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientQuantityType", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientQuantityType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientQuantityType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MyCookin.DAL.Properties.Settings.Default.DBRecipesConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT IDIngredientAllowedQuantityType, IDingredient, IDIngredientQuantityType FR" +
                "OM dbo.IngredientsAllowedQuantityTypes";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT IDIngredientAllowedQuantityType, IDingredient, IDIngredientQuantityType FR" +
                "OM dbo.IngredientsAllowedQuantityTypes\r\nWHERE IDingredient = @IDingredient";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDingredient", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, "IDingredient", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ds_Ingredient.GetIngredientsAllowedQuantityTypesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ds_Ingredient.GetIngredientsAllowedQuantityTypesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ds_Ingredient.GetIngredientsAllowedQuantityTypesDataTable dataTable = new ds_Ingredient.GetIngredientsAllowedQuantityTypesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetIngredientsAllowedQuantityTypesDataTable GetIngredientsQuantityTypesByIDIngredient(global::System.Nullable<global::System.Guid> IDingredient) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((IDingredient.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDingredient.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            ds_Ingredient.GetIngredientsAllowedQuantityTypesDataTable dataTable = new ds_Ingredient.GetIngredientsAllowedQuantityTypesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_Ingredient.GetIngredientsAllowedQuantityTypesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_Ingredient dataSet) {
            return this.Adapter.Update(dataSet, "GetIngredientsAllowedQuantityTypes");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(global::System.Nullable<global::System.Guid> Original_IDIngredientAllowedQuantityType, global::System.Nullable<global::System.Guid> Original_IDingredient, global::System.Nullable<int> Original_IDIngredientQuantityType) {
            if ((Original_IDIngredientAllowedQuantityType.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_IDIngredientAllowedQuantityType.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((Original_IDingredient.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((System.Guid)(Original_IDingredient.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_IDIngredientQuantityType.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_IDIngredientQuantityType.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<global::System.Guid> IDIngredientAllowedQuantityType, global::System.Nullable<global::System.Guid> IDingredient, global::System.Nullable<int> IDIngredientQuantityType) {
            if ((IDIngredientAllowedQuantityType.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(IDIngredientAllowedQuantityType.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((IDingredient.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.Guid)(IDingredient.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IDIngredientQuantityType.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(IDIngredientQuantityType.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<global::System.Guid> IDIngredientAllowedQuantityType, global::System.Nullable<global::System.Guid> IDingredient, global::System.Nullable<int> IDIngredientQuantityType, global::System.Nullable<global::System.Guid> Original_IDIngredientAllowedQuantityType, global::System.Nullable<global::System.Guid> Original_IDingredient, global::System.Nullable<int> Original_IDIngredientQuantityType) {
            if ((IDIngredientAllowedQuantityType.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(IDIngredientAllowedQuantityType.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((IDingredient.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((System.Guid)(IDingredient.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IDIngredientQuantityType.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(IDIngredientQuantityType.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_IDIngredientAllowedQuantityType.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.Guid)(Original_IDIngredientAllowedQuantityType.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Original_IDingredient.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((System.Guid)(Original_IDingredient.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_IDIngredientQuantityType.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_IDIngredientQuantityType.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<global::System.Guid> IDingredient, global::System.Nullable<int> IDIngredientQuantityType, global::System.Nullable<global::System.Guid> Original_IDIngredientAllowedQuantityType, global::System.Nullable<global::System.Guid> Original_IDingredient, global::System.Nullable<int> Original_IDIngredientQuantityType) {
            return this.Update(Original_IDIngredientAllowedQuantityType, IDingredient, IDIngredientQuantityType, Original_IDIngredientAllowedQuantityType, Original_IDingredient, Original_IDIngredientQuantityType);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ManageIngredientDAL : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ManageIngredientDAL() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ManageIngredient";
            tableMapping.ColumnMappings.Add("ResultExecutionCode", "ResultExecutionCode");
            tableMapping.ColumnMappings.Add("USPReturnValue", "USPReturnValue");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MyCookin.DAL.Properties.Settings.Default.DBRecipesConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[7];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT \'0\' AS ResultExecutionCode, \'0\' AS USPReturnValue, 1 AS isError";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.USP_InsertOrDeleteIngredientAllowedQuantityType";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredient", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientAllowedQuantityType", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isDeleteOperation", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.USP_InsertOrUpdateIngredient";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientPreparationRecipe", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientImage", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AverageWeightOfOnePiece", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Kcal100gr", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@grProteins", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@grFats", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@grCarbohydrates", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@grAlcohol", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgCalcium", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgSodium", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgPhosphorus", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgPotassium", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgIron", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgMagnesium", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mcgVitaminA", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgVitaminB1", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgVitaminB2", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mcgVitaminB9", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mcgVitaminB12", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgVitaminC", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@grSaturatedFat", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@grMonounsaturredFat", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@grPolyunsaturredFat", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgCholesterol", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgPhytosterols", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgOmega3", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsForBaby", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsVegetarian", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsGlutenFree", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsVegan", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsHotSpicy", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Checked", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IngredientCreatedBy", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IngredientCreationDate", global::System.Data.SqlDbType.SmallDateTime, 4, global::System.Data.ParameterDirection.Input, 16, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IngredientModifiedByUser", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IngredientLastMod", global::System.Data.SqlDbType.SmallDateTime, 4, global::System.Data.ParameterDirection.Input, 16, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IngredientEnabled", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredient", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@January", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@February", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@March", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@April", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@May", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@June", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@July", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@August", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@September", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@October", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@November", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@December", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@grDietaryFiber", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@grStarch", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@grSugar", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "dbo.USP_InsertOrUpdateIngredientIngredientCategory";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredient", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientCategory", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isPrincipalCategory", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "dbo.USP_InsertOrUpdateIngredientLanguage";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IngredientSingular", global::System.Data.SqlDbType.NVarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IngredientPlural", global::System.Data.SqlDbType.NVarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IngredientDescription", global::System.Data.SqlDbType.NVarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isAutoTranslate", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredient", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientLanguage", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GeoIDRegion", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "dbo.USP_ManageIngredientAlternative";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientAlternative", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientMain", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientSlave", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AddedByUser", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AddedOn", global::System.Data.SqlDbType.SmallDateTime, 4, global::System.Data.ParameterDirection.Input, 16, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CheckedBy", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CheckedOn", global::System.Data.SqlDbType.SmallDateTime, 4, global::System.Data.ParameterDirection.Input, 16, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Checked", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isDeleteOperation", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = "dbo.USP_ManageRecipeBeverage";
            this._commandCollection[6].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDBeverageRecipe", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDRecipe", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDBeverage", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDUserSuggestedBy", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateSuggestion", global::System.Data.SqlDbType.SmallDateTime, 4, global::System.Data.ParameterDirection.Input, 16, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BeverageRecipeAvgRating", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isDeleteOperation", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ds_Ingredient.ManageIngredientDataTable GetGenericError() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ds_Ingredient.ManageIngredientDataTable dataTable = new ds_Ingredient.ManageIngredientDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.ManageIngredientDataTable USP_InsertOrDeleteIngredientAllowedQuantityType(global::System.Nullable<global::System.Guid> IDIngredient, global::System.Nullable<int> IDIngredientAllowedQuantityType, global::System.Nullable<bool> isDeleteOperation) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((IDIngredient.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.Guid)(IDIngredient.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IDIngredientAllowedQuantityType.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(IDIngredientAllowedQuantityType.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((isDeleteOperation.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((bool)(isDeleteOperation.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            ds_Ingredient.ManageIngredientDataTable dataTable = new ds_Ingredient.ManageIngredientDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.ManageIngredientDataTable USP_InsertOrUpdateIngredient(
                    global::System.Nullable<global::System.Guid> IDIngredientPreparationRecipe, 
                    global::System.Nullable<global::System.Guid> IDIngredientImage, 
                    global::System.Nullable<double> AverageWeightOfOnePiece, 
                    global::System.Nullable<double> Kcal100gr, 
                    global::System.Nullable<double> grProteins, 
                    global::System.Nullable<double> grFats, 
                    global::System.Nullable<double> grCarbohydrates, 
                    global::System.Nullable<double> grAlcohol, 
                    global::System.Nullable<double> mgCalcium, 
                    global::System.Nullable<double> mgSodium, 
                    global::System.Nullable<double> mgPhosphorus, 
                    global::System.Nullable<double> mgPotassium, 
                    global::System.Nullable<double> mgIron, 
                    global::System.Nullable<double> mgMagnesium, 
                    global::System.Nullable<double> mcgVitaminA, 
                    global::System.Nullable<double> mgVitaminB1, 
                    global::System.Nullable<double> mgVitaminB2, 
                    global::System.Nullable<double> mcgVitaminB9, 
                    global::System.Nullable<double> mcgVitaminB12, 
                    global::System.Nullable<double> mgVitaminC, 
                    global::System.Nullable<double> grSaturatedFat, 
                    global::System.Nullable<double> grMonounsaturredFat, 
                    global::System.Nullable<double> grPolyunsaturredFat, 
                    global::System.Nullable<double> mgCholesterol, 
                    global::System.Nullable<double> mgPhytosterols, 
                    global::System.Nullable<double> mgOmega3, 
                    global::System.Nullable<bool> IsForBaby, 
                    global::System.Nullable<bool> IsVegetarian, 
                    global::System.Nullable<bool> IsGlutenFree, 
                    global::System.Nullable<bool> IsVegan, 
                    global::System.Nullable<bool> IsHotSpicy, 
                    global::System.Nullable<bool> Checked, 
                    global::System.Nullable<global::System.Guid> IngredientCreatedBy, 
                    global::System.Nullable<global::System.DateTime> IngredientCreationDate, 
                    global::System.Nullable<global::System.Guid> IngredientModifiedByUser, 
                    global::System.Nullable<global::System.DateTime> IngredientLastMod, 
                    global::System.Nullable<bool> IngredientEnabled, 
                    global::System.Nullable<global::System.Guid> IDIngredient, 
                    global::System.Nullable<bool> January, 
                    global::System.Nullable<bool> February, 
                    global::System.Nullable<bool> March, 
                    global::System.Nullable<bool> April, 
                    global::System.Nullable<bool> May, 
                    global::System.Nullable<bool> June, 
                    global::System.Nullable<bool> July, 
                    global::System.Nullable<bool> August, 
                    global::System.Nullable<bool> September, 
                    global::System.Nullable<bool> October, 
                    global::System.Nullable<bool> November, 
                    global::System.Nullable<bool> December, 
                    global::System.Nullable<double> grDietaryFiber, 
                    global::System.Nullable<double> grStarch, 
                    global::System.Nullable<double> grSugar) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((IDIngredientPreparationRecipe.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.Guid)(IDIngredientPreparationRecipe.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IDIngredientImage.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.Guid)(IDIngredientImage.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((AverageWeightOfOnePiece.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((double)(AverageWeightOfOnePiece.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Kcal100gr.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[4].Value = ((double)(Kcal100gr.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((grProteins.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[5].Value = ((double)(grProteins.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((grFats.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[6].Value = ((double)(grFats.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((grCarbohydrates.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[7].Value = ((double)(grCarbohydrates.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((grAlcohol.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[8].Value = ((double)(grAlcohol.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((mgCalcium.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[9].Value = ((double)(mgCalcium.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((mgSodium.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[10].Value = ((double)(mgSodium.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((mgPhosphorus.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[11].Value = ((double)(mgPhosphorus.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((mgPotassium.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[12].Value = ((double)(mgPotassium.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((mgIron.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[13].Value = ((double)(mgIron.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((mgMagnesium.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[14].Value = ((double)(mgMagnesium.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((mcgVitaminA.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[15].Value = ((double)(mcgVitaminA.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((mgVitaminB1.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[16].Value = ((double)(mgVitaminB1.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((mgVitaminB2.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[17].Value = ((double)(mgVitaminB2.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((mcgVitaminB9.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[18].Value = ((double)(mcgVitaminB9.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((mcgVitaminB12.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[19].Value = ((double)(mcgVitaminB12.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((mgVitaminC.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[20].Value = ((double)(mgVitaminC.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((grSaturatedFat.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[21].Value = ((double)(grSaturatedFat.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((grMonounsaturredFat.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[22].Value = ((double)(grMonounsaturredFat.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((grPolyunsaturredFat.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[23].Value = ((double)(grPolyunsaturredFat.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((mgCholesterol.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[24].Value = ((double)(mgCholesterol.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((mgPhytosterols.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[25].Value = ((double)(mgPhytosterols.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((mgOmega3.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[26].Value = ((double)(mgOmega3.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((IsForBaby.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[27].Value = ((bool)(IsForBaby.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((IsVegetarian.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[28].Value = ((bool)(IsVegetarian.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((IsGlutenFree.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[29].Value = ((bool)(IsGlutenFree.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((IsVegan.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[30].Value = ((bool)(IsVegan.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((IsHotSpicy.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[31].Value = ((bool)(IsHotSpicy.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((Checked.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[32].Value = ((bool)(Checked.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((IngredientCreatedBy.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[33].Value = ((System.Guid)(IngredientCreatedBy.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((IngredientCreationDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[34].Value = ((System.DateTime)(IngredientCreationDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((IngredientModifiedByUser.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[35].Value = ((System.Guid)(IngredientModifiedByUser.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((IngredientLastMod.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[36].Value = ((System.DateTime)(IngredientLastMod.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((IngredientEnabled.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[37].Value = ((bool)(IngredientEnabled.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((IDIngredient.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[38].Value = ((System.Guid)(IDIngredient.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((January.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[39].Value = ((bool)(January.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((February.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[40].Value = ((bool)(February.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((March.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[41].Value = ((bool)(March.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            if ((April.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[42].Value = ((bool)(April.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((May.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[43].Value = ((bool)(May.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((June.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[44].Value = ((bool)(June.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((July.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[45].Value = ((bool)(July.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            if ((August.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[46].Value = ((bool)(August.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((September.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[47].Value = ((bool)(September.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            if ((October.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[48].Value = ((bool)(October.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((November.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[49].Value = ((bool)(November.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            if ((December.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[50].Value = ((bool)(December.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((grDietaryFiber.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[51].Value = ((double)(grDietaryFiber.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            if ((grStarch.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[52].Value = ((double)(grStarch.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((grSugar.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[53].Value = ((double)(grSugar.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            ds_Ingredient.ManageIngredientDataTable dataTable = new ds_Ingredient.ManageIngredientDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.ManageIngredientDataTable USP_InsertOrUpdateIngredientIngredientCategory(global::System.Nullable<global::System.Guid> IDIngredient, global::System.Nullable<int> IDIngredientCategory, global::System.Nullable<bool> isPrincipalCategory) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((IDIngredient.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.Guid)(IDIngredient.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IDIngredientCategory.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(IDIngredientCategory.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((isPrincipalCategory.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((bool)(isPrincipalCategory.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            ds_Ingredient.ManageIngredientDataTable dataTable = new ds_Ingredient.ManageIngredientDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.ManageIngredientDataTable USP_InsertOrUpdateIngredientLanguage(string IngredientSingular, string IngredientPlural, string IngredientDescription, global::System.Nullable<bool> isAutoTranslate, global::System.Nullable<global::System.Guid> IDIngredient, global::System.Nullable<global::System.Guid> IDIngredientLanguage, global::System.Nullable<int> IDLanguage, global::System.Nullable<int> GeoIDRegion) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((IngredientSingular == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(IngredientSingular));
            }
            if ((IngredientPlural == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(IngredientPlural));
            }
            if ((IngredientDescription == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(IngredientDescription));
            }
            if ((isAutoTranslate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[4].Value = ((bool)(isAutoTranslate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((IDIngredient.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[5].Value = ((System.Guid)(IDIngredient.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((IDIngredientLanguage.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[6].Value = ((System.Guid)(IDIngredientLanguage.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((IDLanguage.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[7].Value = ((int)(IDLanguage.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((GeoIDRegion.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[8].Value = ((int)(GeoIDRegion.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            ds_Ingredient.ManageIngredientDataTable dataTable = new ds_Ingredient.ManageIngredientDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.ManageIngredientDataTable USP_ManageIngredientAlternative(global::System.Nullable<global::System.Guid> IDIngredientAlternative, global::System.Nullable<global::System.Guid> IDIngredientMain, global::System.Nullable<global::System.Guid> IDIngredientSlave, global::System.Nullable<global::System.Guid> AddedByUser, global::System.Nullable<global::System.DateTime> AddedOn, global::System.Nullable<global::System.Guid> CheckedBy, global::System.Nullable<global::System.DateTime> CheckedOn, global::System.Nullable<bool> Checked, global::System.Nullable<bool> isDeleteOperation) {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if ((IDIngredientAlternative.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.Guid)(IDIngredientAlternative.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IDIngredientMain.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.Guid)(IDIngredientMain.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((IDIngredientSlave.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((System.Guid)(IDIngredientSlave.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((AddedByUser.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[4].Value = ((System.Guid)(AddedByUser.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((AddedOn.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[5].Value = ((System.DateTime)(AddedOn.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((CheckedBy.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[6].Value = ((System.Guid)(CheckedBy.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((CheckedOn.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[7].Value = ((System.DateTime)(CheckedOn.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Checked.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[8].Value = ((bool)(Checked.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((isDeleteOperation.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[9].Value = ((bool)(isDeleteOperation.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            ds_Ingredient.ManageIngredientDataTable dataTable = new ds_Ingredient.ManageIngredientDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.ManageIngredientDataTable USP_ManageRecipeBeverage(global::System.Nullable<global::System.Guid> IDBeverageRecipe, global::System.Nullable<global::System.Guid> IDRecipe, global::System.Nullable<global::System.Guid> IDBeverage, global::System.Nullable<global::System.Guid> IDUserSuggestedBy, global::System.Nullable<global::System.DateTime> DateSuggestion, global::System.Nullable<double> BeverageRecipeAvgRating, global::System.Nullable<bool> isDeleteOperation) {
            this.Adapter.SelectCommand = this.CommandCollection[6];
            if ((IDBeverageRecipe.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.Guid)(IDBeverageRecipe.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IDRecipe.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.Guid)(IDRecipe.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((IDBeverage.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((System.Guid)(IDBeverage.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((IDUserSuggestedBy.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[4].Value = ((System.Guid)(IDUserSuggestedBy.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((DateSuggestion.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[5].Value = ((System.DateTime)(DateSuggestion.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((BeverageRecipeAvgRating.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[6].Value = ((double)(BeverageRecipeAvgRating.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((isDeleteOperation.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[7].Value = ((bool)(isDeleteOperation.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            ds_Ingredient.ManageIngredientDataTable dataTable = new ds_Ingredient.ManageIngredientDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetIngredientsDAL : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public GetIngredientsDAL() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetIngredients";
            tableMapping.ColumnMappings.Add("IDIngredient", "IDIngredient");
            tableMapping.ColumnMappings.Add("IDIngredientPreparationRecipe", "IDIngredientPreparationRecipe");
            tableMapping.ColumnMappings.Add("IDIngredientImage", "IDIngredientImage");
            tableMapping.ColumnMappings.Add("AverageWeightOfOnePiece", "AverageWeightOfOnePiece");
            tableMapping.ColumnMappings.Add("Kcal100gr", "Kcal100gr");
            tableMapping.ColumnMappings.Add("grProteins", "grProteins");
            tableMapping.ColumnMappings.Add("grlFats", "grFats");
            tableMapping.ColumnMappings.Add("grCarbohydrates", "grCarbohydrates");
            tableMapping.ColumnMappings.Add("grAlcohol", "grAlcohol");
            tableMapping.ColumnMappings.Add("mgCalcium", "mgCalcium");
            tableMapping.ColumnMappings.Add("mgSodium", "mgSodium");
            tableMapping.ColumnMappings.Add("mgPhosphorus", "mgPhosphorus");
            tableMapping.ColumnMappings.Add("mgPotassium", "mgPotassium");
            tableMapping.ColumnMappings.Add("mgIron", "mgIron");
            tableMapping.ColumnMappings.Add("mgMagnesium", "mgMagnesium");
            tableMapping.ColumnMappings.Add("mcgVitaminA", "mcgVitaminA");
            tableMapping.ColumnMappings.Add("mgVitaminB1", "mgVitaminB1");
            tableMapping.ColumnMappings.Add("mgVitaminB2", "mgVitaminB2");
            tableMapping.ColumnMappings.Add("mcgVitaminB9", "mcgVitaminB9");
            tableMapping.ColumnMappings.Add("mcgVitaminB12", "mcgVitaminB12");
            tableMapping.ColumnMappings.Add("mgVitaminC", "mgVitaminC");
            tableMapping.ColumnMappings.Add("grSaturatedFat", "grSaturatedFat");
            tableMapping.ColumnMappings.Add("grMonounsaturredFat", "grMonounsaturredFat");
            tableMapping.ColumnMappings.Add("grPolyunsaturredFat", "grPolyunsaturredFat");
            tableMapping.ColumnMappings.Add("mgCholesterol", "mgCholesterol");
            tableMapping.ColumnMappings.Add("mgPhytosterols", "mgPhytosterols");
            tableMapping.ColumnMappings.Add("mgOmega3", "mgOmega3");
            tableMapping.ColumnMappings.Add("IsForBaby", "IsForBaby");
            tableMapping.ColumnMappings.Add("IsMeat", "IsMeat");
            tableMapping.ColumnMappings.Add("IsFish", "IsFish");
            tableMapping.ColumnMappings.Add("IsVegetarian", "IsVegetarian");
            tableMapping.ColumnMappings.Add("IsVegan", "IsVegan");
            tableMapping.ColumnMappings.Add("IsGlutenFree", "IsGlutenFree");
            tableMapping.ColumnMappings.Add("IsHotSpicy", "IsHotSpicy");
            tableMapping.ColumnMappings.Add("Checked", "Checked");
            tableMapping.ColumnMappings.Add("IngredientModifiedByUser", "IngredientModifiedByUser");
            tableMapping.ColumnMappings.Add("IngredientEnabled", "IngredientEnabled");
            tableMapping.ColumnMappings.Add("grFats", "grFats");
            tableMapping.ColumnMappings.Add("IngredientCreatedBy", "IngredientCreatedBy");
            tableMapping.ColumnMappings.Add("IngredientCreationDate", "IngredientCreationDate");
            tableMapping.ColumnMappings.Add("IngredientLastMod", "IngredientLastMod");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Ingredients] WHERE (([IDIngredient] = @Original_IDIngredient) " +
                "AND ((@IsNull_IDIngredientPreparationRecipe = 1 AND [IDIngredientPreparationReci" +
                "pe] IS NULL) OR ([IDIngredientPreparationRecipe] = @Original_IDIngredientPrepara" +
                "tionRecipe)) AND ((@IsNull_IDIngredientImage = 1 AND [IDIngredientImage] IS NULL" +
                ") OR ([IDIngredientImage] = @Original_IDIngredientImage)) AND ((@IsNull_AverageW" +
                "eightOfOnePiece = 1 AND [AverageWeightOfOnePiece] IS NULL) OR ([AverageWeightOfO" +
                "nePiece] = @Original_AverageWeightOfOnePiece)) AND ((@IsNull_Kcal100gr = 1 AND [" +
                "Kcal100gr] IS NULL) OR ([Kcal100gr] = @Original_Kcal100gr)) AND ((@IsNull_grProt" +
                "eins = 1 AND [grProteins] IS NULL) OR ([grProteins] = @Original_grProteins)) AND" +
                " ((@IsNull_grFats = 1 AND [grFats] IS NULL) OR ([grFats] = @Original_grFats)) AN" +
                "D ((@IsNull_grCarbohydrates = 1 AND [grCarbohydrates] IS NULL) OR ([grCarbohydra" +
                "tes] = @Original_grCarbohydrates)) AND ((@IsNull_grAlcohol = 1 AND [grAlcohol] I" +
                "S NULL) OR ([grAlcohol] = @Original_grAlcohol)) AND ((@IsNull_mgCalcium = 1 AND " +
                "[mgCalcium] IS NULL) OR ([mgCalcium] = @Original_mgCalcium)) AND ((@IsNull_mgSod" +
                "ium = 1 AND [mgSodium] IS NULL) OR ([mgSodium] = @Original_mgSodium)) AND ((@IsN" +
                "ull_mgPhosphorus = 1 AND [mgPhosphorus] IS NULL) OR ([mgPhosphorus] = @Original_" +
                "mgPhosphorus)) AND ((@IsNull_mgPotassium = 1 AND [mgPotassium] IS NULL) OR ([mgP" +
                "otassium] = @Original_mgPotassium)) AND ((@IsNull_mgIron = 1 AND [mgIron] IS NUL" +
                "L) OR ([mgIron] = @Original_mgIron)) AND ((@IsNull_mgMagnesium = 1 AND [mgMagnes" +
                "ium] IS NULL) OR ([mgMagnesium] = @Original_mgMagnesium)) AND ((@IsNull_mcgVitam" +
                "inA = 1 AND [mcgVitaminA] IS NULL) OR ([mcgVitaminA] = @Original_mcgVitaminA)) A" +
                "ND ((@IsNull_mgVitaminB1 = 1 AND [mgVitaminB1] IS NULL) OR ([mgVitaminB1] = @Ori" +
                "ginal_mgVitaminB1)) AND ((@IsNull_mgVitaminB2 = 1 AND [mgVitaminB2] IS NULL) OR " +
                "([mgVitaminB2] = @Original_mgVitaminB2)) AND ((@IsNull_mcgVitaminB9 = 1 AND [mcg" +
                "VitaminB9] IS NULL) OR ([mcgVitaminB9] = @Original_mcgVitaminB9)) AND ((@IsNull_" +
                "mcgVitaminB12 = 1 AND [mcgVitaminB12] IS NULL) OR ([mcgVitaminB12] = @Original_m" +
                "cgVitaminB12)) AND ((@IsNull_mgVitaminC = 1 AND [mgVitaminC] IS NULL) OR ([mgVit" +
                "aminC] = @Original_mgVitaminC)) AND ((@IsNull_grSaturatedFat = 1 AND [grSaturate" +
                "dFat] IS NULL) OR ([grSaturatedFat] = @Original_grSaturatedFat)) AND ((@IsNull_g" +
                "rMonounsaturredFat = 1 AND [grMonounsaturredFat] IS NULL) OR ([grMonounsaturredF" +
                "at] = @Original_grMonounsaturredFat)) AND ((@IsNull_grPolyunsaturredFat = 1 AND " +
                "[grPolyunsaturredFat] IS NULL) OR ([grPolyunsaturredFat] = @Original_grPolyunsat" +
                "urredFat)) AND ((@IsNull_mgCholesterol = 1 AND [mgCholesterol] IS NULL) OR ([mgC" +
                "holesterol] = @Original_mgCholesterol)) AND ((@IsNull_mgPhytosterols = 1 AND [mg" +
                "Phytosterols] IS NULL) OR ([mgPhytosterols] = @Original_mgPhytosterols)) AND ((@" +
                "IsNull_mgOmega3 = 1 AND [mgOmega3] IS NULL) OR ([mgOmega3] = @Original_mgOmega3)" +
                ") AND ((@IsNull_IsForBaby = 1 AND [IsForBaby] IS NULL) OR ([IsForBaby] = @Origin" +
                "al_IsForBaby)) AND ((@IsNull_IsMeat = 1 AND [IsMeat] IS NULL) OR ([IsMeat] = @Or" +
                "iginal_IsMeat)) AND ((@IsNull_IsFish = 1 AND [IsFish] IS NULL) OR ([IsFish] = @O" +
                "riginal_IsFish)) AND ([IsVegetarian] = @Original_IsVegetarian) AND ([IsVegan] = " +
                "@Original_IsVegan) AND ([IsGlutenFree] = @Original_IsGlutenFree) AND ([IsHotSpic" +
                "y] = @Original_IsHotSpicy) AND ([Checked] = @Original_Checked) AND ((@IsNull_Ing" +
                "redientModifiedByUser = 1 AND [IngredientModifiedByUser] IS NULL) OR ([Ingredien" +
                "tModifiedByUser] = @Original_IngredientModifiedByUser)) AND ((@IsNull_Ingredient" +
                "LastMod = 1 AND [IngredientLastMod] IS NULL) OR ([IngredientLastMod] = @Original" +
                "_IngredientLastMod)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredient", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredient", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IDIngredientPreparationRecipe", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientPreparationRecipe", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientPreparationRecipe", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientPreparationRecipe", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IDIngredientImage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientImage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientImage", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientImage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AverageWeightOfOnePiece", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AverageWeightOfOnePiece", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AverageWeightOfOnePiece", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AverageWeightOfOnePiece", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Kcal100gr", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Kcal100gr", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Kcal100gr", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Kcal100gr", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_grProteins", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grProteins", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_grProteins", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grProteins", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_grFats", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grFats", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_grFats", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grFats", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_grCarbohydrates", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grCarbohydrates", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_grCarbohydrates", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grCarbohydrates", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_grAlcohol", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grAlcohol", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_grAlcohol", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grAlcohol", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mgCalcium", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgCalcium", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mgCalcium", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgCalcium", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mgSodium", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgSodium", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mgSodium", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgSodium", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mgPhosphorus", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgPhosphorus", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mgPhosphorus", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgPhosphorus", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mgPotassium", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgPotassium", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mgPotassium", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgPotassium", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mgIron", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgIron", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mgIron", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgIron", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mgMagnesium", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgMagnesium", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mgMagnesium", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgMagnesium", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mcgVitaminA", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mcgVitaminA", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mcgVitaminA", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mcgVitaminA", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mgVitaminB1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgVitaminB1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mgVitaminB1", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgVitaminB1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mgVitaminB2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgVitaminB2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mgVitaminB2", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgVitaminB2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mcgVitaminB9", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mcgVitaminB9", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mcgVitaminB9", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mcgVitaminB9", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mcgVitaminB12", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mcgVitaminB12", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mcgVitaminB12", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mcgVitaminB12", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mgVitaminC", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgVitaminC", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mgVitaminC", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgVitaminC", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_grSaturatedFat", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grSaturatedFat", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_grSaturatedFat", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grSaturatedFat", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_grMonounsaturredFat", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grMonounsaturredFat", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_grMonounsaturredFat", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grMonounsaturredFat", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_grPolyunsaturredFat", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grPolyunsaturredFat", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_grPolyunsaturredFat", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grPolyunsaturredFat", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mgCholesterol", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgCholesterol", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mgCholesterol", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgCholesterol", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mgPhytosterols", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgPhytosterols", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mgPhytosterols", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgPhytosterols", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mgOmega3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgOmega3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mgOmega3", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgOmega3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IsForBaby", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsForBaby", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsForBaby", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsForBaby", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IsMeat", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsMeat", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsMeat", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsMeat", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IsFish", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsFish", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsFish", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsFish", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsVegetarian", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsVegetarian", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsVegan", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsVegan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsGlutenFree", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsGlutenFree", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsHotSpicy", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsHotSpicy", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Checked", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Checked", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IngredientModifiedByUser", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientModifiedByUser", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IngredientModifiedByUser", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientModifiedByUser", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IngredientLastMod", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientLastMod", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IngredientLastMod", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientLastMod", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Ingredients] ([IDIngredient], [IDIngredientPreparationRecipe]," +
                " [IDIngredientImage], [AverageWeightOfOnePiece], [Kcal100gr], [grProteins], [grF" +
                "ats], [grCarbohydrates], [grAlcohol], [mgCalcium], [mgSodium], [mgPhosphorus], [" +
                "mgPotassium], [mgIron], [mgMagnesium], [mcgVitaminA], [mgVitaminB1], [mgVitaminB" +
                "2], [mcgVitaminB9], [mcgVitaminB12], [mgVitaminC], [grSaturatedFat], [grMonounsa" +
                "turredFat], [grPolyunsaturredFat], [mgCholesterol], [mgPhytosterols], [mgOmega3]" +
                ", [IsForBaby], [IsMeat], [IsFish], [IsVegetarian], [IsVegan], [IsGlutenFree], [I" +
                "sHotSpicy], [Checked], [IngredientModifiedByUser], [IngredientLastMod]) VALUES (" +
                "@IDIngredient, @IDIngredientPreparationRecipe, @IDIngredientImage, @AverageWeigh" +
                "tOfOnePiece, @Kcal100gr, @grProteins, @grFats, @grCarbohydrates, @grAlcohol, @mg" +
                "Calcium, @mgSodium, @mgPhosphorus, @mgPotassium, @mgIron, @mgMagnesium, @mcgVita" +
                "minA, @mgVitaminB1, @mgVitaminB2, @mcgVitaminB9, @mcgVitaminB12, @mgVitaminC, @g" +
                "rSaturatedFat, @grMonounsaturredFat, @grPolyunsaturredFat, @mgCholesterol, @mgPh" +
                "ytosterols, @mgOmega3, @IsForBaby, @IsMeat, @IsFish, @IsVegetarian, @IsVegan, @I" +
                "sGlutenFree, @IsHotSpicy, @Checked, @IngredientModifiedByUser, @IngredientLastMo" +
                "d);\r\nSELECT IDIngredient, IDIngredientPreparationRecipe, IDIngredientImage, Aver" +
                "ageWeightOfOnePiece, Kcal100gr, grProteins, grFats, grCarbohydrates, grAlcohol, " +
                "mgCalcium, mgSodium, mgPhosphorus, mgPotassium, mgIron, mgMagnesium, mcgVitaminA" +
                ", mgVitaminB1, mgVitaminB2, mcgVitaminB9, mcgVitaminB12, mgVitaminC, grSaturated" +
                "Fat, grMonounsaturredFat, grPolyunsaturredFat, mgCholesterol, mgPhytosterols, mg" +
                "Omega3, IsForBaby, IsMeat, IsFish, IsVegetarian, IsVegan, IsGlutenFree, IsHotSpi" +
                "cy, Checked, IngredientModifiedByUser, IngredientLastMod FROM Ingredients WHERE " +
                "(IDIngredient = @IDIngredient)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredient", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredient", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientPreparationRecipe", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientPreparationRecipe", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientImage", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientImage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AverageWeightOfOnePiece", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AverageWeightOfOnePiece", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Kcal100gr", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Kcal100gr", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@grProteins", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grProteins", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@grFats", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grFats", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@grCarbohydrates", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grCarbohydrates", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@grAlcohol", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grAlcohol", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgCalcium", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgCalcium", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgSodium", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgSodium", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgPhosphorus", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgPhosphorus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgPotassium", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgPotassium", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgIron", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgIron", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgMagnesium", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgMagnesium", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mcgVitaminA", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mcgVitaminA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgVitaminB1", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgVitaminB1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgVitaminB2", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgVitaminB2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mcgVitaminB9", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mcgVitaminB9", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mcgVitaminB12", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mcgVitaminB12", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgVitaminC", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgVitaminC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@grSaturatedFat", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grSaturatedFat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@grMonounsaturredFat", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grMonounsaturredFat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@grPolyunsaturredFat", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grPolyunsaturredFat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgCholesterol", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgCholesterol", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgPhytosterols", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgPhytosterols", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgOmega3", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgOmega3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsForBaby", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsForBaby", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsMeat", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsMeat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsFish", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsFish", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsVegetarian", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsVegetarian", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsVegan", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsVegan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsGlutenFree", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsGlutenFree", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsHotSpicy", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsHotSpicy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Checked", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Checked", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IngredientModifiedByUser", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientModifiedByUser", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IngredientLastMod", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientLastMod", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Ingredients] SET [IDIngredient] = @IDIngredient, [IDIngredientPrepa" +
                "rationRecipe] = @IDIngredientPreparationRecipe, [IDIngredientImage] = @IDIngredi" +
                "entImage, [AverageWeightOfOnePiece] = @AverageWeightOfOnePiece, [Kcal100gr] = @K" +
                "cal100gr, [grProteins] = @grProteins, [grFats] = @grFats, [grCarbohydrates] = @g" +
                "rCarbohydrates, [grAlcohol] = @grAlcohol, [mgCalcium] = @mgCalcium, [mgSodium] =" +
                " @mgSodium, [mgPhosphorus] = @mgPhosphorus, [mgPotassium] = @mgPotassium, [mgIro" +
                "n] = @mgIron, [mgMagnesium] = @mgMagnesium, [mcgVitaminA] = @mcgVitaminA, [mgVit" +
                "aminB1] = @mgVitaminB1, [mgVitaminB2] = @mgVitaminB2, [mcgVitaminB9] = @mcgVitam" +
                "inB9, [mcgVitaminB12] = @mcgVitaminB12, [mgVitaminC] = @mgVitaminC, [grSaturated" +
                "Fat] = @grSaturatedFat, [grMonounsaturredFat] = @grMonounsaturredFat, [grPolyuns" +
                "aturredFat] = @grPolyunsaturredFat, [mgCholesterol] = @mgCholesterol, [mgPhytost" +
                "erols] = @mgPhytosterols, [mgOmega3] = @mgOmega3, [IsForBaby] = @IsForBaby, [IsM" +
                "eat] = @IsMeat, [IsFish] = @IsFish, [IsVegetarian] = @IsVegetarian, [IsVegan] = " +
                "@IsVegan, [IsGlutenFree] = @IsGlutenFree, [IsHotSpicy] = @IsHotSpicy, [Checked] " +
                "= @Checked, [IngredientModifiedByUser] = @IngredientModifiedByUser, [IngredientL" +
                "astMod] = @IngredientLastMod WHERE (([IDIngredient] = @Original_IDIngredient) AN" +
                "D ((@IsNull_IDIngredientPreparationRecipe = 1 AND [IDIngredientPreparationRecipe" +
                "] IS NULL) OR ([IDIngredientPreparationRecipe] = @Original_IDIngredientPreparati" +
                "onRecipe)) AND ((@IsNull_IDIngredientImage = 1 AND [IDIngredientImage] IS NULL) " +
                "OR ([IDIngredientImage] = @Original_IDIngredientImage)) AND ((@IsNull_AverageWei" +
                "ghtOfOnePiece = 1 AND [AverageWeightOfOnePiece] IS NULL) OR ([AverageWeightOfOne" +
                "Piece] = @Original_AverageWeightOfOnePiece)) AND ((@IsNull_Kcal100gr = 1 AND [Kc" +
                "al100gr] IS NULL) OR ([Kcal100gr] = @Original_Kcal100gr)) AND ((@IsNull_grProtei" +
                "ns = 1 AND [grProteins] IS NULL) OR ([grProteins] = @Original_grProteins)) AND (" +
                "(@IsNull_grFats = 1 AND [grFats] IS NULL) OR ([grFats] = @Original_grFats)) AND " +
                "((@IsNull_grCarbohydrates = 1 AND [grCarbohydrates] IS NULL) OR ([grCarbohydrate" +
                "s] = @Original_grCarbohydrates)) AND ((@IsNull_grAlcohol = 1 AND [grAlcohol] IS " +
                "NULL) OR ([grAlcohol] = @Original_grAlcohol)) AND ((@IsNull_mgCalcium = 1 AND [m" +
                "gCalcium] IS NULL) OR ([mgCalcium] = @Original_mgCalcium)) AND ((@IsNull_mgSodiu" +
                "m = 1 AND [mgSodium] IS NULL) OR ([mgSodium] = @Original_mgSodium)) AND ((@IsNul" +
                "l_mgPhosphorus = 1 AND [mgPhosphorus] IS NULL) OR ([mgPhosphorus] = @Original_mg" +
                "Phosphorus)) AND ((@IsNull_mgPotassium = 1 AND [mgPotassium] IS NULL) OR ([mgPot" +
                "assium] = @Original_mgPotassium)) AND ((@IsNull_mgIron = 1 AND [mgIron] IS NULL)" +
                " OR ([mgIron] = @Original_mgIron)) AND ((@IsNull_mgMagnesium = 1 AND [mgMagnesiu" +
                "m] IS NULL) OR ([mgMagnesium] = @Original_mgMagnesium)) AND ((@IsNull_mcgVitamin" +
                "A = 1 AND [mcgVitaminA] IS NULL) OR ([mcgVitaminA] = @Original_mcgVitaminA)) AND" +
                " ((@IsNull_mgVitaminB1 = 1 AND [mgVitaminB1] IS NULL) OR ([mgVitaminB1] = @Origi" +
                "nal_mgVitaminB1)) AND ((@IsNull_mgVitaminB2 = 1 AND [mgVitaminB2] IS NULL) OR ([" +
                "mgVitaminB2] = @Original_mgVitaminB2)) AND ((@IsNull_mcgVitaminB9 = 1 AND [mcgVi" +
                "taminB9] IS NULL) OR ([mcgVitaminB9] = @Original_mcgVitaminB9)) AND ((@IsNull_mc" +
                "gVitaminB12 = 1 AND [mcgVitaminB12] IS NULL) OR ([mcgVitaminB12] = @Original_mcg" +
                "VitaminB12)) AND ((@IsNull_mgVitaminC = 1 AND [mgVitaminC] IS NULL) OR ([mgVitam" +
                "inC] = @Original_mgVitaminC)) AND ((@IsNull_grSaturatedFat = 1 AND [grSaturatedF" +
                "at] IS NULL) OR ([grSaturatedFat] = @Original_grSaturatedFat)) AND ((@IsNull_grM" +
                "onounsaturredFat = 1 AND [grMonounsaturredFat] IS NULL) OR ([grMonounsaturredFat" +
                "] = @Original_grMonounsaturredFat)) AND ((@IsNull_grPolyunsaturredFat = 1 AND [g" +
                "rPolyunsaturredFat] IS NULL) OR ([grPolyunsaturredFat] = @Original_grPolyunsatur" +
                "redFat)) AND ((@IsNull_mgCholesterol = 1 AND [mgCholesterol] IS NULL) OR ([mgCho" +
                "lesterol] = @Original_mgCholesterol)) AND ((@IsNull_mgPhytosterols = 1 AND [mgPh" +
                "ytosterols] IS NULL) OR ([mgPhytosterols] = @Original_mgPhytosterols)) AND ((@Is" +
                "Null_mgOmega3 = 1 AND [mgOmega3] IS NULL) OR ([mgOmega3] = @Original_mgOmega3)) " +
                "AND ((@IsNull_IsForBaby = 1 AND [IsForBaby] IS NULL) OR ([IsForBaby] = @Original" +
                "_IsForBaby)) AND ((@IsNull_IsMeat = 1 AND [IsMeat] IS NULL) OR ([IsMeat] = @Orig" +
                "inal_IsMeat)) AND ((@IsNull_IsFish = 1 AND [IsFish] IS NULL) OR ([IsFish] = @Ori" +
                "ginal_IsFish)) AND ([IsVegetarian] = @Original_IsVegetarian) AND ([IsVegan] = @O" +
                "riginal_IsVegan) AND ([IsGlutenFree] = @Original_IsGlutenFree) AND ([IsHotSpicy]" +
                " = @Original_IsHotSpicy) AND ([Checked] = @Original_Checked) AND ((@IsNull_Ingre" +
                "dientModifiedByUser = 1 AND [IngredientModifiedByUser] IS NULL) OR ([IngredientM" +
                "odifiedByUser] = @Original_IngredientModifiedByUser)) AND ((@IsNull_IngredientLa" +
                "stMod = 1 AND [IngredientLastMod] IS NULL) OR ([IngredientLastMod] = @Original_I" +
                "ngredientLastMod)));\r\nSELECT IDIngredient, IDIngredientPreparationRecipe, IDIngr" +
                "edientImage, AverageWeightOfOnePiece, Kcal100gr, grProteins, grFats, grCarbohydr" +
                "ates, grAlcohol, mgCalcium, mgSodium, mgPhosphorus, mgPotassium, mgIron, mgMagne" +
                "sium, mcgVitaminA, mgVitaminB1, mgVitaminB2, mcgVitaminB9, mcgVitaminB12, mgVita" +
                "minC, grSaturatedFat, grMonounsaturredFat, grPolyunsaturredFat, mgCholesterol, m" +
                "gPhytosterols, mgOmega3, IsForBaby, IsMeat, IsFish, IsVegetarian, IsVegan, IsGlu" +
                "tenFree, IsHotSpicy, Checked, IngredientModifiedByUser, IngredientLastMod FROM I" +
                "ngredients WHERE (IDIngredient = @IDIngredient)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredient", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredient", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientPreparationRecipe", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientPreparationRecipe", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientImage", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientImage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AverageWeightOfOnePiece", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AverageWeightOfOnePiece", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Kcal100gr", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Kcal100gr", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@grProteins", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grProteins", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@grFats", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grFats", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@grCarbohydrates", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grCarbohydrates", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@grAlcohol", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grAlcohol", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgCalcium", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgCalcium", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgSodium", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgSodium", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgPhosphorus", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgPhosphorus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgPotassium", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgPotassium", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgIron", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgIron", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgMagnesium", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgMagnesium", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mcgVitaminA", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mcgVitaminA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgVitaminB1", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgVitaminB1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgVitaminB2", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgVitaminB2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mcgVitaminB9", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mcgVitaminB9", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mcgVitaminB12", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mcgVitaminB12", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgVitaminC", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgVitaminC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@grSaturatedFat", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grSaturatedFat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@grMonounsaturredFat", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grMonounsaturredFat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@grPolyunsaturredFat", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grPolyunsaturredFat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgCholesterol", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgCholesterol", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgPhytosterols", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgPhytosterols", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mgOmega3", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgOmega3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsForBaby", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsForBaby", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsMeat", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsMeat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsFish", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsFish", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsVegetarian", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsVegetarian", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsVegan", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsVegan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsGlutenFree", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsGlutenFree", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsHotSpicy", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsHotSpicy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Checked", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Checked", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IngredientModifiedByUser", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientModifiedByUser", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IngredientLastMod", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientLastMod", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredient", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredient", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IDIngredientPreparationRecipe", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientPreparationRecipe", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientPreparationRecipe", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientPreparationRecipe", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IDIngredientImage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientImage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientImage", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientImage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AverageWeightOfOnePiece", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AverageWeightOfOnePiece", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AverageWeightOfOnePiece", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AverageWeightOfOnePiece", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Kcal100gr", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Kcal100gr", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Kcal100gr", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Kcal100gr", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_grProteins", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grProteins", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_grProteins", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grProteins", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_grFats", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grFats", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_grFats", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grFats", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_grCarbohydrates", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grCarbohydrates", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_grCarbohydrates", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grCarbohydrates", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_grAlcohol", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grAlcohol", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_grAlcohol", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grAlcohol", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mgCalcium", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgCalcium", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mgCalcium", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgCalcium", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mgSodium", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgSodium", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mgSodium", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgSodium", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mgPhosphorus", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgPhosphorus", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mgPhosphorus", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgPhosphorus", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mgPotassium", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgPotassium", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mgPotassium", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgPotassium", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mgIron", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgIron", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mgIron", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgIron", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mgMagnesium", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgMagnesium", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mgMagnesium", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgMagnesium", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mcgVitaminA", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mcgVitaminA", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mcgVitaminA", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mcgVitaminA", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mgVitaminB1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgVitaminB1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mgVitaminB1", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgVitaminB1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mgVitaminB2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgVitaminB2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mgVitaminB2", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgVitaminB2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mcgVitaminB9", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mcgVitaminB9", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mcgVitaminB9", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mcgVitaminB9", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mcgVitaminB12", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mcgVitaminB12", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mcgVitaminB12", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mcgVitaminB12", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mgVitaminC", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgVitaminC", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mgVitaminC", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgVitaminC", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_grSaturatedFat", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grSaturatedFat", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_grSaturatedFat", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grSaturatedFat", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_grMonounsaturredFat", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grMonounsaturredFat", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_grMonounsaturredFat", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grMonounsaturredFat", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_grPolyunsaturredFat", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grPolyunsaturredFat", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_grPolyunsaturredFat", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grPolyunsaturredFat", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mgCholesterol", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgCholesterol", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mgCholesterol", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgCholesterol", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mgPhytosterols", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgPhytosterols", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mgPhytosterols", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgPhytosterols", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_mgOmega3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgOmega3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mgOmega3", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mgOmega3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IsForBaby", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsForBaby", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsForBaby", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsForBaby", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IsMeat", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsMeat", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsMeat", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsMeat", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IsFish", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsFish", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsFish", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsFish", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsVegetarian", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsVegetarian", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsVegan", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsVegan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsGlutenFree", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsGlutenFree", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsHotSpicy", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsHotSpicy", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Checked", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Checked", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IngredientModifiedByUser", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientModifiedByUser", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IngredientModifiedByUser", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientModifiedByUser", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_IngredientLastMod", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientLastMod", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IngredientLastMod", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientLastMod", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MyCookin.DAL.Properties.Settings.Default.DBRecipesConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[6];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT IDIngredient, IDIngredientPreparationRecipe, IDIngredientImage, AverageWeightOfOnePiece, Kcal100gr, grProteins, grFats, grCarbohydrates, grAlcohol, mgCalcium, mgSodium, mgPhosphorus, mgPotassium, mgIron, mgMagnesium, mcgVitaminA, mgVitaminB1, mgVitaminB2, mcgVitaminB9, mcgVitaminB12, mgVitaminC, grSaturatedFat, grMonounsaturredFat, grPolyunsaturredFat, mgCholesterol, mgPhytosterols, mgOmega3, IsForBaby, IsMeat, IsFish, IsVegetarian, IsVegan, IsGlutenFree, IsHotSpicy, Checked, IngredientModifiedByUser, IngredientLastMod FROM dbo.Ingredients";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT IDIngredient, IDIngredientPreparationRecipe, IDIngredientImage, AverageWeightOfOnePiece, Kcal100gr, grProteins, grFats, grCarbohydrates, grAlcohol, mgCalcium, mgSodium, mgPhosphorus, mgPotassium, mgIron, mgMagnesium, mcgVitaminA, mgVitaminB1, mgVitaminB2, mcgVitaminB9, mcgVitaminB12, mgVitaminC, grSaturatedFat, grMonounsaturredFat, grPolyunsaturredFat, mgCholesterol, mgPhytosterols, mgOmega3, IsForBaby, IsMeat, IsFish, IsVegetarian, IsVegan, IsGlutenFree, IsHotSpicy, Checked,IngredientCreatedBy,IngredientCreationDate,IngredientModifiedByUser,IngredientLastMod,IngredientEnabled,January,February,March,April,May,June,July,August,September,October,November, December,grDietaryFiber, grStarch, grSugar  FROM dbo.Ingredients
WHERE IDIngredient = @IDIngredient";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredient", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredient", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT     COUNT(IDIngredient) AS Expr1\r\nFROM         Ingredients\r\nWHERE     (Ing" +
                "redientModifiedByUser = @IDUser)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDUser", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, "IngredientModifiedByUser", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "SELECT COUNT(IDIngredient) FROM Ingredients\r\nWHERE Checked=0";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "dbo.USP_GetRandomIngredient";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredient", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Output, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "dbo.USP_GetRandomIngredientNotChecked";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredient", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Output, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ds_Ingredient.GetIngredientsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ds_Ingredient.GetIngredientsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ds_Ingredient.GetIngredientsDataTable dataTable = new ds_Ingredient.GetIngredientsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetIngredientsDataTable GetIngredientByIDIngredient(System.Guid IDIngredient) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDIngredient));
            ds_Ingredient.GetIngredientsDataTable dataTable = new ds_Ingredient.GetIngredientsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_Ingredient.GetIngredientsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_Ingredient dataSet) {
            return this.Adapter.Update(dataSet, "GetIngredients");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    System.Guid Original_IDIngredient, 
                    global::System.Nullable<global::System.Guid> Original_IDIngredientPreparationRecipe, 
                    global::System.Nullable<global::System.Guid> Original_IDIngredientImage, 
                    global::System.Nullable<double> Original_AverageWeightOfOnePiece, 
                    global::System.Nullable<double> Original_Kcal100gr, 
                    global::System.Nullable<double> Original_grProteins, 
                    global::System.Nullable<double> Original_grFats, 
                    global::System.Nullable<double> Original_grCarbohydrates, 
                    global::System.Nullable<double> Original_grAlcohol, 
                    global::System.Nullable<double> Original_mgCalcium, 
                    global::System.Nullable<double> Original_mgSodium, 
                    global::System.Nullable<double> Original_mgPhosphorus, 
                    global::System.Nullable<double> Original_mgPotassium, 
                    global::System.Nullable<double> Original_mgIron, 
                    global::System.Nullable<double> Original_mgMagnesium, 
                    global::System.Nullable<double> Original_mcgVitaminA, 
                    global::System.Nullable<double> Original_mgVitaminB1, 
                    global::System.Nullable<double> Original_mgVitaminB2, 
                    global::System.Nullable<double> Original_mcgVitaminB9, 
                    global::System.Nullable<double> Original_mcgVitaminB12, 
                    global::System.Nullable<double> Original_mgVitaminC, 
                    global::System.Nullable<double> Original_grSaturatedFat, 
                    global::System.Nullable<double> Original_grMonounsaturredFat, 
                    global::System.Nullable<double> Original_grPolyunsaturredFat, 
                    global::System.Nullable<double> Original_mgCholesterol, 
                    global::System.Nullable<double> Original_mgPhytosterols, 
                    global::System.Nullable<double> Original_mgOmega3, 
                    global::System.Nullable<bool> Original_IsForBaby, 
                    global::System.Nullable<bool> Original_IsMeat, 
                    global::System.Nullable<bool> Original_IsFish, 
                    bool Original_IsVegetarian, 
                    bool Original_IsVegan, 
                    bool Original_IsGlutenFree, 
                    bool Original_IsHotSpicy, 
                    bool Original_Checked, 
                    global::System.Nullable<global::System.Guid> Original_IngredientModifiedByUser, 
                    global::System.Nullable<global::System.DateTime> Original_IngredientLastMod) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_IDIngredient));
            if ((Original_IDIngredientPreparationRecipe.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((System.Guid)(Original_IDIngredientPreparationRecipe.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_IDIngredientImage.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((System.Guid)(Original_IDIngredientImage.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_AverageWeightOfOnePiece.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((double)(Original_AverageWeightOfOnePiece.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_Kcal100gr.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((double)(Original_Kcal100gr.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_grProteins.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((double)(Original_grProteins.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_grFats.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((double)(Original_grFats.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_grCarbohydrates.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((double)(Original_grCarbohydrates.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_grAlcohol.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((double)(Original_grAlcohol.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_mgCalcium.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((double)(Original_mgCalcium.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_mgSodium.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((double)(Original_mgSodium.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_mgPhosphorus.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((double)(Original_mgPhosphorus.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_mgPotassium.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((double)(Original_mgPotassium.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_mgIron.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((double)(Original_mgIron.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_mgMagnesium.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((double)(Original_mgMagnesium.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_mcgVitaminA.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((double)(Original_mcgVitaminA.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_mgVitaminB1.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((double)(Original_mgVitaminB1.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_mgVitaminB2.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((double)(Original_mgVitaminB2.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_mcgVitaminB9.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((double)(Original_mcgVitaminB9.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_mcgVitaminB12.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((double)(Original_mcgVitaminB12.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Original_mgVitaminC.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((double)(Original_mgVitaminC.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((Original_grSaturatedFat.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[42].Value = ((double)(Original_grSaturatedFat.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((Original_grMonounsaturredFat.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((double)(Original_grMonounsaturredFat.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((Original_grPolyunsaturredFat.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((double)(Original_grPolyunsaturredFat.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_mgCholesterol.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[48].Value = ((double)(Original_mgCholesterol.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((Original_mgPhytosterols.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[50].Value = ((double)(Original_mgPhytosterols.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((Original_mgOmega3.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[52].Value = ((double)(Original_mgOmega3.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((Original_IsForBaby.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[54].Value = ((bool)(Original_IsForBaby.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((Original_IsMeat.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[56].Value = ((bool)(Original_IsMeat.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((Original_IsFish.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[58].Value = ((bool)(Original_IsFish.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[59].Value = ((bool)(Original_IsVegetarian));
            this.Adapter.DeleteCommand.Parameters[60].Value = ((bool)(Original_IsVegan));
            this.Adapter.DeleteCommand.Parameters[61].Value = ((bool)(Original_IsGlutenFree));
            this.Adapter.DeleteCommand.Parameters[62].Value = ((bool)(Original_IsHotSpicy));
            this.Adapter.DeleteCommand.Parameters[63].Value = ((bool)(Original_Checked));
            if ((Original_IngredientModifiedByUser.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[64].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[65].Value = ((System.Guid)(Original_IngredientModifiedByUser.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[64].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            if ((Original_IngredientLastMod.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[66].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[67].Value = ((System.DateTime)(Original_IngredientLastMod.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[66].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[67].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    System.Guid IDIngredient, 
                    global::System.Nullable<global::System.Guid> IDIngredientPreparationRecipe, 
                    global::System.Nullable<global::System.Guid> IDIngredientImage, 
                    global::System.Nullable<double> AverageWeightOfOnePiece, 
                    global::System.Nullable<double> Kcal100gr, 
                    global::System.Nullable<double> grProteins, 
                    global::System.Nullable<double> grFats, 
                    global::System.Nullable<double> grCarbohydrates, 
                    global::System.Nullable<double> grAlcohol, 
                    global::System.Nullable<double> mgCalcium, 
                    global::System.Nullable<double> mgSodium, 
                    global::System.Nullable<double> mgPhosphorus, 
                    global::System.Nullable<double> mgPotassium, 
                    global::System.Nullable<double> mgIron, 
                    global::System.Nullable<double> mgMagnesium, 
                    global::System.Nullable<double> mcgVitaminA, 
                    global::System.Nullable<double> mgVitaminB1, 
                    global::System.Nullable<double> mgVitaminB2, 
                    global::System.Nullable<double> mcgVitaminB9, 
                    global::System.Nullable<double> mcgVitaminB12, 
                    global::System.Nullable<double> mgVitaminC, 
                    global::System.Nullable<double> grSaturatedFat, 
                    global::System.Nullable<double> grMonounsaturredFat, 
                    global::System.Nullable<double> grPolyunsaturredFat, 
                    global::System.Nullable<double> mgCholesterol, 
                    global::System.Nullable<double> mgPhytosterols, 
                    global::System.Nullable<double> mgOmega3, 
                    global::System.Nullable<bool> IsForBaby, 
                    global::System.Nullable<bool> IsMeat, 
                    global::System.Nullable<bool> IsFish, 
                    bool IsVegetarian, 
                    bool IsVegan, 
                    bool IsGlutenFree, 
                    bool IsHotSpicy, 
                    bool Checked, 
                    global::System.Nullable<global::System.Guid> IngredientModifiedByUser, 
                    global::System.Nullable<global::System.DateTime> IngredientLastMod) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(IDIngredient));
            if ((IDIngredientPreparationRecipe.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.Guid)(IDIngredientPreparationRecipe.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IDIngredientImage.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.Guid)(IDIngredientImage.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((AverageWeightOfOnePiece.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(AverageWeightOfOnePiece.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Kcal100gr.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(Kcal100gr.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((grProteins.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(grProteins.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((grFats.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(grFats.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((grCarbohydrates.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(grCarbohydrates.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((grAlcohol.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(grAlcohol.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((mgCalcium.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(mgCalcium.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((mgSodium.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(mgSodium.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((mgPhosphorus.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(mgPhosphorus.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((mgPotassium.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((double)(mgPotassium.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((mgIron.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((double)(mgIron.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((mgMagnesium.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((double)(mgMagnesium.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((mcgVitaminA.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((double)(mcgVitaminA.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((mgVitaminB1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((double)(mgVitaminB1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((mgVitaminB2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((double)(mgVitaminB2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((mcgVitaminB9.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((double)(mcgVitaminB9.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((mcgVitaminB12.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((double)(mcgVitaminB12.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((mgVitaminC.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((double)(mgVitaminC.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((grSaturatedFat.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((double)(grSaturatedFat.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((grMonounsaturredFat.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((double)(grMonounsaturredFat.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((grPolyunsaturredFat.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((double)(grPolyunsaturredFat.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((mgCholesterol.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((double)(mgCholesterol.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((mgPhytosterols.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((double)(mgPhytosterols.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((mgOmega3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[26].Value = ((double)(mgOmega3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((IsForBaby.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[27].Value = ((bool)(IsForBaby.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((IsMeat.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[28].Value = ((bool)(IsMeat.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((IsFish.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[29].Value = ((bool)(IsFish.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[30].Value = ((bool)(IsVegetarian));
            this.Adapter.InsertCommand.Parameters[31].Value = ((bool)(IsVegan));
            this.Adapter.InsertCommand.Parameters[32].Value = ((bool)(IsGlutenFree));
            this.Adapter.InsertCommand.Parameters[33].Value = ((bool)(IsHotSpicy));
            this.Adapter.InsertCommand.Parameters[34].Value = ((bool)(Checked));
            if ((IngredientModifiedByUser.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[35].Value = ((System.Guid)(IngredientModifiedByUser.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((IngredientLastMod.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[36].Value = ((System.DateTime)(IngredientLastMod.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.Guid IDIngredient, 
                    global::System.Nullable<global::System.Guid> IDIngredientPreparationRecipe, 
                    global::System.Nullable<global::System.Guid> IDIngredientImage, 
                    global::System.Nullable<double> AverageWeightOfOnePiece, 
                    global::System.Nullable<double> Kcal100gr, 
                    global::System.Nullable<double> grProteins, 
                    global::System.Nullable<double> grFats, 
                    global::System.Nullable<double> grCarbohydrates, 
                    global::System.Nullable<double> grAlcohol, 
                    global::System.Nullable<double> mgCalcium, 
                    global::System.Nullable<double> mgSodium, 
                    global::System.Nullable<double> mgPhosphorus, 
                    global::System.Nullable<double> mgPotassium, 
                    global::System.Nullable<double> mgIron, 
                    global::System.Nullable<double> mgMagnesium, 
                    global::System.Nullable<double> mcgVitaminA, 
                    global::System.Nullable<double> mgVitaminB1, 
                    global::System.Nullable<double> mgVitaminB2, 
                    global::System.Nullable<double> mcgVitaminB9, 
                    global::System.Nullable<double> mcgVitaminB12, 
                    global::System.Nullable<double> mgVitaminC, 
                    global::System.Nullable<double> grSaturatedFat, 
                    global::System.Nullable<double> grMonounsaturredFat, 
                    global::System.Nullable<double> grPolyunsaturredFat, 
                    global::System.Nullable<double> mgCholesterol, 
                    global::System.Nullable<double> mgPhytosterols, 
                    global::System.Nullable<double> mgOmega3, 
                    global::System.Nullable<bool> IsForBaby, 
                    global::System.Nullable<bool> IsMeat, 
                    global::System.Nullable<bool> IsFish, 
                    bool IsVegetarian, 
                    bool IsVegan, 
                    bool IsGlutenFree, 
                    bool IsHotSpicy, 
                    bool Checked, 
                    global::System.Nullable<global::System.Guid> IngredientModifiedByUser, 
                    global::System.Nullable<global::System.DateTime> IngredientLastMod, 
                    System.Guid Original_IDIngredient, 
                    global::System.Nullable<global::System.Guid> Original_IDIngredientPreparationRecipe, 
                    global::System.Nullable<global::System.Guid> Original_IDIngredientImage, 
                    global::System.Nullable<double> Original_AverageWeightOfOnePiece, 
                    global::System.Nullable<double> Original_Kcal100gr, 
                    global::System.Nullable<double> Original_grProteins, 
                    global::System.Nullable<double> Original_grFats, 
                    global::System.Nullable<double> Original_grCarbohydrates, 
                    global::System.Nullable<double> Original_grAlcohol, 
                    global::System.Nullable<double> Original_mgCalcium, 
                    global::System.Nullable<double> Original_mgSodium, 
                    global::System.Nullable<double> Original_mgPhosphorus, 
                    global::System.Nullable<double> Original_mgPotassium, 
                    global::System.Nullable<double> Original_mgIron, 
                    global::System.Nullable<double> Original_mgMagnesium, 
                    global::System.Nullable<double> Original_mcgVitaminA, 
                    global::System.Nullable<double> Original_mgVitaminB1, 
                    global::System.Nullable<double> Original_mgVitaminB2, 
                    global::System.Nullable<double> Original_mcgVitaminB9, 
                    global::System.Nullable<double> Original_mcgVitaminB12, 
                    global::System.Nullable<double> Original_mgVitaminC, 
                    global::System.Nullable<double> Original_grSaturatedFat, 
                    global::System.Nullable<double> Original_grMonounsaturredFat, 
                    global::System.Nullable<double> Original_grPolyunsaturredFat, 
                    global::System.Nullable<double> Original_mgCholesterol, 
                    global::System.Nullable<double> Original_mgPhytosterols, 
                    global::System.Nullable<double> Original_mgOmega3, 
                    global::System.Nullable<bool> Original_IsForBaby, 
                    global::System.Nullable<bool> Original_IsMeat, 
                    global::System.Nullable<bool> Original_IsFish, 
                    bool Original_IsVegetarian, 
                    bool Original_IsVegan, 
                    bool Original_IsGlutenFree, 
                    bool Original_IsHotSpicy, 
                    bool Original_Checked, 
                    global::System.Nullable<global::System.Guid> Original_IngredientModifiedByUser, 
                    global::System.Nullable<global::System.DateTime> Original_IngredientLastMod) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(IDIngredient));
            if ((IDIngredientPreparationRecipe.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((System.Guid)(IDIngredientPreparationRecipe.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IDIngredientImage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((System.Guid)(IDIngredientImage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((AverageWeightOfOnePiece.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((double)(AverageWeightOfOnePiece.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Kcal100gr.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(Kcal100gr.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((grProteins.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((double)(grProteins.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((grFats.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(grFats.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((grCarbohydrates.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((double)(grCarbohydrates.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((grAlcohol.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((double)(grAlcohol.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((mgCalcium.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((double)(mgCalcium.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((mgSodium.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((double)(mgSodium.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((mgPhosphorus.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((double)(mgPhosphorus.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((mgPotassium.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((double)(mgPotassium.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((mgIron.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((double)(mgIron.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((mgMagnesium.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((double)(mgMagnesium.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((mcgVitaminA.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((double)(mcgVitaminA.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((mgVitaminB1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((double)(mgVitaminB1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((mgVitaminB2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((double)(mgVitaminB2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((mcgVitaminB9.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((double)(mcgVitaminB9.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((mcgVitaminB12.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((double)(mcgVitaminB12.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((mgVitaminC.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((double)(mgVitaminC.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((grSaturatedFat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((double)(grSaturatedFat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((grMonounsaturredFat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((double)(grMonounsaturredFat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((grPolyunsaturredFat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((double)(grPolyunsaturredFat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((mgCholesterol.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((double)(mgCholesterol.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((mgPhytosterols.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((double)(mgPhytosterols.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((mgOmega3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((double)(mgOmega3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((IsForBaby.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((bool)(IsForBaby.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((IsMeat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((bool)(IsMeat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((IsFish.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((bool)(IsFish.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[30].Value = ((bool)(IsVegetarian));
            this.Adapter.UpdateCommand.Parameters[31].Value = ((bool)(IsVegan));
            this.Adapter.UpdateCommand.Parameters[32].Value = ((bool)(IsGlutenFree));
            this.Adapter.UpdateCommand.Parameters[33].Value = ((bool)(IsHotSpicy));
            this.Adapter.UpdateCommand.Parameters[34].Value = ((bool)(Checked));
            if ((IngredientModifiedByUser.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((System.Guid)(IngredientModifiedByUser.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((IngredientLastMod.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((System.DateTime)(IngredientLastMod.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[37].Value = ((System.Guid)(Original_IDIngredient));
            if ((Original_IDIngredientPreparationRecipe.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[39].Value = ((System.Guid)(Original_IDIngredientPreparationRecipe.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((Original_IDIngredientImage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[41].Value = ((System.Guid)(Original_IDIngredientImage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            if ((Original_AverageWeightOfOnePiece.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[43].Value = ((double)(Original_AverageWeightOfOnePiece.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((Original_Kcal100gr.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[45].Value = ((double)(Original_Kcal100gr.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            if ((Original_grProteins.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[47].Value = ((double)(Original_grProteins.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            if ((Original_grFats.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[49].Value = ((double)(Original_grFats.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            if ((Original_grCarbohydrates.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[51].Value = ((double)(Original_grCarbohydrates.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            if ((Original_grAlcohol.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[53].Value = ((double)(Original_grAlcohol.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            if ((Original_mgCalcium.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[55].Value = ((double)(Original_mgCalcium.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            if ((Original_mgSodium.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[57].Value = ((double)(Original_mgSodium.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            if ((Original_mgPhosphorus.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[59].Value = ((double)(Original_mgPhosphorus.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            if ((Original_mgPotassium.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[61].Value = ((double)(Original_mgPotassium.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            if ((Original_mgIron.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[63].Value = ((double)(Original_mgIron.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[63].Value = global::System.DBNull.Value;
            }
            if ((Original_mgMagnesium.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[65].Value = ((double)(Original_mgMagnesium.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            if ((Original_mcgVitaminA.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[67].Value = ((double)(Original_mcgVitaminA.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[67].Value = global::System.DBNull.Value;
            }
            if ((Original_mgVitaminB1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[69].Value = ((double)(Original_mgVitaminB1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[69].Value = global::System.DBNull.Value;
            }
            if ((Original_mgVitaminB2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[71].Value = ((double)(Original_mgVitaminB2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[71].Value = global::System.DBNull.Value;
            }
            if ((Original_mcgVitaminB9.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[73].Value = ((double)(Original_mcgVitaminB9.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[73].Value = global::System.DBNull.Value;
            }
            if ((Original_mcgVitaminB12.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[75].Value = ((double)(Original_mcgVitaminB12.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[75].Value = global::System.DBNull.Value;
            }
            if ((Original_mgVitaminC.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[77].Value = ((double)(Original_mgVitaminC.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[77].Value = global::System.DBNull.Value;
            }
            if ((Original_grSaturatedFat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[79].Value = ((double)(Original_grSaturatedFat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[79].Value = global::System.DBNull.Value;
            }
            if ((Original_grMonounsaturredFat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[81].Value = ((double)(Original_grMonounsaturredFat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[81].Value = global::System.DBNull.Value;
            }
            if ((Original_grPolyunsaturredFat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[83].Value = ((double)(Original_grPolyunsaturredFat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[83].Value = global::System.DBNull.Value;
            }
            if ((Original_mgCholesterol.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[85].Value = ((double)(Original_mgCholesterol.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[85].Value = global::System.DBNull.Value;
            }
            if ((Original_mgPhytosterols.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[86].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[87].Value = ((double)(Original_mgPhytosterols.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[86].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[87].Value = global::System.DBNull.Value;
            }
            if ((Original_mgOmega3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[88].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[89].Value = ((double)(Original_mgOmega3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[88].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[89].Value = global::System.DBNull.Value;
            }
            if ((Original_IsForBaby.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[90].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[91].Value = ((bool)(Original_IsForBaby.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[90].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[91].Value = global::System.DBNull.Value;
            }
            if ((Original_IsMeat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[92].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[93].Value = ((bool)(Original_IsMeat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[92].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[93].Value = global::System.DBNull.Value;
            }
            if ((Original_IsFish.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[94].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[95].Value = ((bool)(Original_IsFish.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[94].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[95].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[96].Value = ((bool)(Original_IsVegetarian));
            this.Adapter.UpdateCommand.Parameters[97].Value = ((bool)(Original_IsVegan));
            this.Adapter.UpdateCommand.Parameters[98].Value = ((bool)(Original_IsGlutenFree));
            this.Adapter.UpdateCommand.Parameters[99].Value = ((bool)(Original_IsHotSpicy));
            this.Adapter.UpdateCommand.Parameters[100].Value = ((bool)(Original_Checked));
            if ((Original_IngredientModifiedByUser.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[101].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[102].Value = ((System.Guid)(Original_IngredientModifiedByUser.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[101].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[102].Value = global::System.DBNull.Value;
            }
            if ((Original_IngredientLastMod.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[103].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[104].Value = ((System.DateTime)(Original_IngredientLastMod.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[103].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[104].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<global::System.Guid> IDIngredientPreparationRecipe, 
                    global::System.Nullable<global::System.Guid> IDIngredientImage, 
                    global::System.Nullable<double> AverageWeightOfOnePiece, 
                    global::System.Nullable<double> Kcal100gr, 
                    global::System.Nullable<double> grProteins, 
                    global::System.Nullable<double> grFats, 
                    global::System.Nullable<double> grCarbohydrates, 
                    global::System.Nullable<double> grAlcohol, 
                    global::System.Nullable<double> mgCalcium, 
                    global::System.Nullable<double> mgSodium, 
                    global::System.Nullable<double> mgPhosphorus, 
                    global::System.Nullable<double> mgPotassium, 
                    global::System.Nullable<double> mgIron, 
                    global::System.Nullable<double> mgMagnesium, 
                    global::System.Nullable<double> mcgVitaminA, 
                    global::System.Nullable<double> mgVitaminB1, 
                    global::System.Nullable<double> mgVitaminB2, 
                    global::System.Nullable<double> mcgVitaminB9, 
                    global::System.Nullable<double> mcgVitaminB12, 
                    global::System.Nullable<double> mgVitaminC, 
                    global::System.Nullable<double> grSaturatedFat, 
                    global::System.Nullable<double> grMonounsaturredFat, 
                    global::System.Nullable<double> grPolyunsaturredFat, 
                    global::System.Nullable<double> mgCholesterol, 
                    global::System.Nullable<double> mgPhytosterols, 
                    global::System.Nullable<double> mgOmega3, 
                    global::System.Nullable<bool> IsForBaby, 
                    global::System.Nullable<bool> IsMeat, 
                    global::System.Nullable<bool> IsFish, 
                    bool IsVegetarian, 
                    bool IsVegan, 
                    bool IsGlutenFree, 
                    bool IsHotSpicy, 
                    bool Checked, 
                    global::System.Nullable<global::System.Guid> IngredientModifiedByUser, 
                    global::System.Nullable<global::System.DateTime> IngredientLastMod, 
                    System.Guid Original_IDIngredient, 
                    global::System.Nullable<global::System.Guid> Original_IDIngredientPreparationRecipe, 
                    global::System.Nullable<global::System.Guid> Original_IDIngredientImage, 
                    global::System.Nullable<double> Original_AverageWeightOfOnePiece, 
                    global::System.Nullable<double> Original_Kcal100gr, 
                    global::System.Nullable<double> Original_grProteins, 
                    global::System.Nullable<double> Original_grFats, 
                    global::System.Nullable<double> Original_grCarbohydrates, 
                    global::System.Nullable<double> Original_grAlcohol, 
                    global::System.Nullable<double> Original_mgCalcium, 
                    global::System.Nullable<double> Original_mgSodium, 
                    global::System.Nullable<double> Original_mgPhosphorus, 
                    global::System.Nullable<double> Original_mgPotassium, 
                    global::System.Nullable<double> Original_mgIron, 
                    global::System.Nullable<double> Original_mgMagnesium, 
                    global::System.Nullable<double> Original_mcgVitaminA, 
                    global::System.Nullable<double> Original_mgVitaminB1, 
                    global::System.Nullable<double> Original_mgVitaminB2, 
                    global::System.Nullable<double> Original_mcgVitaminB9, 
                    global::System.Nullable<double> Original_mcgVitaminB12, 
                    global::System.Nullable<double> Original_mgVitaminC, 
                    global::System.Nullable<double> Original_grSaturatedFat, 
                    global::System.Nullable<double> Original_grMonounsaturredFat, 
                    global::System.Nullable<double> Original_grPolyunsaturredFat, 
                    global::System.Nullable<double> Original_mgCholesterol, 
                    global::System.Nullable<double> Original_mgPhytosterols, 
                    global::System.Nullable<double> Original_mgOmega3, 
                    global::System.Nullable<bool> Original_IsForBaby, 
                    global::System.Nullable<bool> Original_IsMeat, 
                    global::System.Nullable<bool> Original_IsFish, 
                    bool Original_IsVegetarian, 
                    bool Original_IsVegan, 
                    bool Original_IsGlutenFree, 
                    bool Original_IsHotSpicy, 
                    bool Original_Checked, 
                    global::System.Nullable<global::System.Guid> Original_IngredientModifiedByUser, 
                    global::System.Nullable<global::System.DateTime> Original_IngredientLastMod) {
            return this.Update(Original_IDIngredient, IDIngredientPreparationRecipe, IDIngredientImage, AverageWeightOfOnePiece, Kcal100gr, grProteins, grFats, grCarbohydrates, grAlcohol, mgCalcium, mgSodium, mgPhosphorus, mgPotassium, mgIron, mgMagnesium, mcgVitaminA, mgVitaminB1, mgVitaminB2, mcgVitaminB9, mcgVitaminB12, mgVitaminC, grSaturatedFat, grMonounsaturredFat, grPolyunsaturredFat, mgCholesterol, mgPhytosterols, mgOmega3, IsForBaby, IsMeat, IsFish, IsVegetarian, IsVegan, IsGlutenFree, IsHotSpicy, Checked, IngredientModifiedByUser, IngredientLastMod, Original_IDIngredient, Original_IDIngredientPreparationRecipe, Original_IDIngredientImage, Original_AverageWeightOfOnePiece, Original_Kcal100gr, Original_grProteins, Original_grFats, Original_grCarbohydrates, Original_grAlcohol, Original_mgCalcium, Original_mgSodium, Original_mgPhosphorus, Original_mgPotassium, Original_mgIron, Original_mgMagnesium, Original_mcgVitaminA, Original_mgVitaminB1, Original_mgVitaminB2, Original_mcgVitaminB9, Original_mcgVitaminB12, Original_mgVitaminC, Original_grSaturatedFat, Original_grMonounsaturredFat, Original_grPolyunsaturredFat, Original_mgCholesterol, Original_mgPhytosterols, Original_mgOmega3, Original_IsForBaby, Original_IsMeat, Original_IsFish, Original_IsVegetarian, Original_IsVegan, Original_IsGlutenFree, Original_IsHotSpicy, Original_Checked, Original_IngredientModifiedByUser, Original_IngredientLastMod);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object GetNumberOfIngredientCheckedByUser(global::System.Nullable<global::System.Guid> IDUser) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((IDUser.HasValue == true)) {
                command.Parameters[0].Value = ((System.Guid)(IDUser.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual global::System.Nullable<int> GetNumberOfIngredientNotChecked() {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return new global::System.Nullable<int>();
            }
            else {
                return new global::System.Nullable<int>(((int)(returnValue)));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object USP_GetRandomIngredient(out global::System.Nullable<global::System.Guid> IDIngredient) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[4];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((command.Parameters[1].Value == null) 
                        || (command.Parameters[1].Value.GetType() == typeof(global::System.DBNull)))) {
                IDIngredient = new global::System.Nullable<global::System.Guid>();
            }
            else {
                IDIngredient = new global::System.Nullable<global::System.Guid>(((global::System.Guid)(command.Parameters[1].Value)));
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object USP_GetRandomIngredientNotChecked(out global::System.Nullable<global::System.Guid> IDIngredient) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[5];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((command.Parameters[1].Value == null) 
                        || (command.Parameters[1].Value.GetType() == typeof(global::System.DBNull)))) {
                IDIngredient = new global::System.Nullable<global::System.Guid>();
            }
            else {
                IDIngredient = new global::System.Nullable<global::System.Guid>(((global::System.Guid)(command.Parameters[1].Value)));
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetQuantityNotStdDAL : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public GetQuantityNotStdDAL() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetQuantityNotStd";
            tableMapping.ColumnMappings.Add("IDQuantityNotStd", "IDQuantityNotStd");
            tableMapping.ColumnMappings.Add("PercentageFactor", "PercentageFactor");
            tableMapping.ColumnMappings.Add("EnabledToUser", "EnabledToUser");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[QuantityNotStd] WHERE (([IDQuantityNotStd] = @Original_IDQuantityNotStd) AND ((@IsNull_PercentageFactor = 1 AND [PercentageFactor] IS NULL) OR ([PercentageFactor] = @Original_PercentageFactor)) AND ([EnabledToUser] = @Original_EnabledToUser))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDQuantityNotStd", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDQuantityNotStd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PercentageFactor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PercentageFactor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PercentageFactor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PercentageFactor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EnabledToUser", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EnabledToUser", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[QuantityNotStd] ([PercentageFactor], [EnabledToUser]) VALUES (" +
                "@PercentageFactor, @EnabledToUser);\r\nSELECT IDQuantityNotStd, PercentageFactor, " +
                "EnabledToUser FROM QuantityNotStd WHERE (IDQuantityNotStd = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PercentageFactor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PercentageFactor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EnabledToUser", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EnabledToUser", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[QuantityNotStd] SET [PercentageFactor] = @PercentageFactor, [EnabledToUser] = @EnabledToUser WHERE (([IDQuantityNotStd] = @Original_IDQuantityNotStd) AND ((@IsNull_PercentageFactor = 1 AND [PercentageFactor] IS NULL) OR ([PercentageFactor] = @Original_PercentageFactor)) AND ([EnabledToUser] = @Original_EnabledToUser));
SELECT IDQuantityNotStd, PercentageFactor, EnabledToUser FROM QuantityNotStd WHERE (IDQuantityNotStd = @IDQuantityNotStd)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PercentageFactor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PercentageFactor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EnabledToUser", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EnabledToUser", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDQuantityNotStd", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDQuantityNotStd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PercentageFactor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PercentageFactor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PercentageFactor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PercentageFactor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EnabledToUser", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EnabledToUser", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDQuantityNotStd", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDQuantityNotStd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MyCookin.DAL.Properties.Settings.Default.DBRecipesConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT IDQuantityNotStd, PercentageFactor, EnabledToUser FROM dbo.QuantityNotStd";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT IDQuantityNotStd, PercentageFactor, EnabledToUser FROM dbo.QuantityNotStd\r" +
                "\nWHERE IDQuantityNotStd=@IDQuantityNotStd";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDQuantityNotStd", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDQuantityNotStd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ds_Ingredient.GetQuantityNotStdDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ds_Ingredient.GetQuantityNotStdDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ds_Ingredient.GetQuantityNotStdDataTable dataTable = new ds_Ingredient.GetQuantityNotStdDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetQuantityNotStdDataTable GetQuantityNotStdByID(int IDQuantityNotStd) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(IDQuantityNotStd));
            ds_Ingredient.GetQuantityNotStdDataTable dataTable = new ds_Ingredient.GetQuantityNotStdDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_Ingredient.GetQuantityNotStdDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_Ingredient dataSet) {
            return this.Adapter.Update(dataSet, "GetQuantityNotStd");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(global::System.Nullable<int> Original_IDQuantityNotStd, global::System.Nullable<int> Original_PercentageFactor, global::System.Nullable<bool> Original_EnabledToUser) {
            if ((Original_IDQuantityNotStd.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_IDQuantityNotStd.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((Original_PercentageFactor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_PercentageFactor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_EnabledToUser.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((bool)(Original_EnabledToUser.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<int> PercentageFactor, global::System.Nullable<bool> EnabledToUser) {
            if ((PercentageFactor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(PercentageFactor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((EnabledToUser.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((bool)(EnabledToUser.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<int> PercentageFactor, global::System.Nullable<bool> EnabledToUser, global::System.Nullable<int> Original_IDQuantityNotStd, global::System.Nullable<int> Original_PercentageFactor, global::System.Nullable<bool> Original_EnabledToUser, global::System.Nullable<int> IDQuantityNotStd) {
            if ((PercentageFactor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(PercentageFactor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((EnabledToUser.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((bool)(EnabledToUser.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Original_IDQuantityNotStd.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_IDQuantityNotStd.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_PercentageFactor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_PercentageFactor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_EnabledToUser.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(Original_EnabledToUser.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((IDQuantityNotStd.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(IDQuantityNotStd.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<int> PercentageFactor, global::System.Nullable<bool> EnabledToUser, global::System.Nullable<int> Original_IDQuantityNotStd, global::System.Nullable<int> Original_PercentageFactor, global::System.Nullable<bool> Original_EnabledToUser) {
            return this.Update(PercentageFactor, EnabledToUser, Original_IDQuantityNotStd, Original_PercentageFactor, Original_EnabledToUser, Original_IDQuantityNotStd);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetQuantityNotStdLanguageDAL : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public GetQuantityNotStdLanguageDAL() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetQuantityNotStdLanguage";
            tableMapping.ColumnMappings.Add("IDQuantityNotStdLanguage", "IDQuantityNotStdLanguage");
            tableMapping.ColumnMappings.Add("IDQuantityNotStd", "IDQuantityNotStd");
            tableMapping.ColumnMappings.Add("IDLanguage", "IDLanguage");
            tableMapping.ColumnMappings.Add("QuantityNotStdSingular", "QuantityNotStdSingular");
            tableMapping.ColumnMappings.Add("QuantityNotStdPlural", "QuantityNotStdPlural");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[QuantityNotStdLanguage] WHERE (([IDQuantityNotStdLanguage] = @Original_IDQuantityNotStdLanguage) AND ([IDQuantityNotStd] = @Original_IDQuantityNotStd) AND ([IDLanguage] = @Original_IDLanguage) AND ((@IsNull_QuantityNotStdSingular = 1 AND [QuantityNotStdSingular] IS NULL) OR ([QuantityNotStdSingular] = @Original_QuantityNotStdSingular)) AND ((@IsNull_QuantityNotStdPlural = 1 AND [QuantityNotStdPlural] IS NULL) OR ([QuantityNotStdPlural] = @Original_QuantityNotStdPlural)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDQuantityNotStdLanguage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDQuantityNotStdLanguage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDQuantityNotStd", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDQuantityNotStd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDLanguage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDLanguage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QuantityNotStdSingular", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QuantityNotStdSingular", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QuantityNotStdSingular", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QuantityNotStdSingular", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QuantityNotStdPlural", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QuantityNotStdPlural", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QuantityNotStdPlural", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QuantityNotStdPlural", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[QuantityNotStdLanguage] ([IDQuantityNotStd], [IDLanguage], [QuantityNotStdSingular], [QuantityNotStdPlural]) VALUES (@IDQuantityNotStd, @IDLanguage, @QuantityNotStdSingular, @QuantityNotStdPlural);
SELECT IDQuantityNotStdLanguage, IDQuantityNotStd, IDLanguage, QuantityNotStdSingular, QuantityNotStdPlural FROM QuantityNotStdLanguage WHERE (IDQuantityNotStdLanguage = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDQuantityNotStd", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDQuantityNotStd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDLanguage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QuantityNotStdSingular", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QuantityNotStdSingular", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QuantityNotStdPlural", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QuantityNotStdPlural", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[QuantityNotStdLanguage] SET [IDQuantityNotStd] = @IDQuantityNotStd, [IDLanguage] = @IDLanguage, [QuantityNotStdSingular] = @QuantityNotStdSingular, [QuantityNotStdPlural] = @QuantityNotStdPlural WHERE (([IDQuantityNotStdLanguage] = @Original_IDQuantityNotStdLanguage) AND ([IDQuantityNotStd] = @Original_IDQuantityNotStd) AND ([IDLanguage] = @Original_IDLanguage) AND ((@IsNull_QuantityNotStdSingular = 1 AND [QuantityNotStdSingular] IS NULL) OR ([QuantityNotStdSingular] = @Original_QuantityNotStdSingular)) AND ((@IsNull_QuantityNotStdPlural = 1 AND [QuantityNotStdPlural] IS NULL) OR ([QuantityNotStdPlural] = @Original_QuantityNotStdPlural)));
SELECT IDQuantityNotStdLanguage, IDQuantityNotStd, IDLanguage, QuantityNotStdSingular, QuantityNotStdPlural FROM QuantityNotStdLanguage WHERE (IDQuantityNotStdLanguage = @IDQuantityNotStdLanguage)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDQuantityNotStd", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDQuantityNotStd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDLanguage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QuantityNotStdSingular", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QuantityNotStdSingular", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@QuantityNotStdPlural", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QuantityNotStdPlural", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDQuantityNotStdLanguage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDQuantityNotStdLanguage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDQuantityNotStd", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDQuantityNotStd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDLanguage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDLanguage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QuantityNotStdSingular", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QuantityNotStdSingular", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QuantityNotStdSingular", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QuantityNotStdSingular", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_QuantityNotStdPlural", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QuantityNotStdPlural", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_QuantityNotStdPlural", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "QuantityNotStdPlural", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDQuantityNotStdLanguage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDQuantityNotStdLanguage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MyCookin.DAL.Properties.Settings.Default.DBRecipesConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[4];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT IDQuantityNotStdLanguage, IDQuantityNotStd, IDLanguage, QuantityNotStdSing" +
                "ular, QuantityNotStdPlural FROM dbo.QuantityNotStdLanguage";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT     QuantityNotStdLanguage.IDQuantityNotStdLanguage, QuantityTypesAllowedQuantityNotStd.IDQuantityNotStd, QuantityNotStdLanguage.IDLanguage, 
                      QuantityNotStdLanguage.QuantityNotStdSingular, QuantityNotStdLanguage.QuantityNotStdPlural
FROM         QuantityTypesAllowedQuantityNotStd INNER JOIN
                      QuantityNotStdLanguage ON QuantityTypesAllowedQuantityNotStd.IDQuantityNotStd = QuantityNotStdLanguage.IDQuantityNotStd
WHERE     (QuantityTypesAllowedQuantityNotStd.IDIngredientQuantityType = @IDIngredientQuantityType) AND (QuantityNotStdLanguage.IDLanguage = @IDLanguage)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientQuantityType", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientQuantityType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDLanguage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"SELECT     QuantityNotStdLanguage.IDQuantityNotStdLanguage, QuantityNotStdLanguage.IDQuantityNotStd, QuantityNotStdLanguage.IDLanguage, 
                      QuantityNotStdLanguage.QuantityNotStdSingular, QuantityNotStdLanguage.QuantityNotStdPlural
FROM         QuantityNotStdLanguage INNER JOIN
                      QuantityNotStd ON QuantityNotStdLanguage.IDQuantityNotStd = QuantityNotStd.IDQuantityNotStd
WHERE     (QuantityNotStd.EnabledToUser = 1) AND (QuantityNotStdLanguage.IDLanguage = @IDLanguage)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDLanguage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"SELECT     QuantityNotStdLanguage.IDQuantityNotStdLanguage, QuantityNotStdLanguage.IDQuantityNotStd, QuantityNotStdLanguage.IDLanguage, 
                      QuantityNotStdLanguage.QuantityNotStdSingular, QuantityNotStdLanguage.QuantityNotStdPlural
FROM         QuantityNotStdLanguage INNER JOIN
                      QuantityNotStd ON QuantityNotStdLanguage.IDQuantityNotStd = QuantityNotStd.IDQuantityNotStd
WHERE     (QuantityNotStd.EnabledToUser = 1) AND (QuantityNotStdLanguage.IDLanguage = @IDLanguage) AND (QuantityNotStdLanguage.IDQuantityNotStd = @IDQuantityNotStd)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDLanguage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDQuantityNotStd", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDQuantityNotStd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ds_Ingredient.GetQuantityNotStdLanguageDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ds_Ingredient.GetQuantityNotStdLanguageDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ds_Ingredient.GetQuantityNotStdLanguageDataTable dataTable = new ds_Ingredient.GetQuantityNotStdLanguageDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetQuantityNotStdLanguageDataTable GetQtaNotStdByIDQtaTypeIDLang(int IDIngredientQuantityType, int IDLanguage) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(IDIngredientQuantityType));
            this.Adapter.SelectCommand.Parameters[1].Value = ((int)(IDLanguage));
            ds_Ingredient.GetQuantityNotStdLanguageDataTable dataTable = new ds_Ingredient.GetQuantityNotStdLanguageDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetQuantityNotStdLanguageDataTable GetQuantityNotStdByIDLang(int IDLanguage) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(IDLanguage));
            ds_Ingredient.GetQuantityNotStdLanguageDataTable dataTable = new ds_Ingredient.GetQuantityNotStdLanguageDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetQuantityNotStdLanguageDataTable GetQuantityNotStdByIDQtaNotStdIDLanguage(int IDLanguage, int IDQuantityNotStd) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(IDLanguage));
            this.Adapter.SelectCommand.Parameters[1].Value = ((int)(IDQuantityNotStd));
            ds_Ingredient.GetQuantityNotStdLanguageDataTable dataTable = new ds_Ingredient.GetQuantityNotStdLanguageDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_Ingredient.GetQuantityNotStdLanguageDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_Ingredient dataSet) {
            return this.Adapter.Update(dataSet, "GetQuantityNotStdLanguage");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(global::System.Nullable<int> Original_IDQuantityNotStdLanguage, global::System.Nullable<int> Original_IDQuantityNotStd, global::System.Nullable<int> Original_IDLanguage, string Original_QuantityNotStdSingular, string Original_QuantityNotStdPlural) {
            if ((Original_IDQuantityNotStdLanguage.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_IDQuantityNotStdLanguage.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((Original_IDQuantityNotStd.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_IDQuantityNotStd.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Original_IDLanguage.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_IDLanguage.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_QuantityNotStdSingular == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_QuantityNotStdSingular));
            }
            if ((Original_QuantityNotStdPlural == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_QuantityNotStdPlural));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<int> IDQuantityNotStd, global::System.Nullable<int> IDLanguage, string QuantityNotStdSingular, string QuantityNotStdPlural) {
            if ((IDQuantityNotStd.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(IDQuantityNotStd.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((IDLanguage.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(IDLanguage.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((QuantityNotStdSingular == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(QuantityNotStdSingular));
            }
            if ((QuantityNotStdPlural == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(QuantityNotStdPlural));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<int> IDQuantityNotStd, global::System.Nullable<int> IDLanguage, string QuantityNotStdSingular, string QuantityNotStdPlural, global::System.Nullable<int> Original_IDQuantityNotStdLanguage, global::System.Nullable<int> Original_IDQuantityNotStd, global::System.Nullable<int> Original_IDLanguage, string Original_QuantityNotStdSingular, string Original_QuantityNotStdPlural, global::System.Nullable<int> IDQuantityNotStdLanguage) {
            if ((IDQuantityNotStd.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(IDQuantityNotStd.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((IDLanguage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(IDLanguage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((QuantityNotStdSingular == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(QuantityNotStdSingular));
            }
            if ((QuantityNotStdPlural == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(QuantityNotStdPlural));
            }
            if ((Original_IDQuantityNotStdLanguage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_IDQuantityNotStdLanguage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_IDQuantityNotStd.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_IDQuantityNotStd.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_IDLanguage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_IDLanguage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_QuantityNotStdSingular == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_QuantityNotStdSingular));
            }
            if ((Original_QuantityNotStdPlural == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_QuantityNotStdPlural));
            }
            if ((IDQuantityNotStdLanguage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(IDQuantityNotStdLanguage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<int> IDQuantityNotStd, global::System.Nullable<int> IDLanguage, string QuantityNotStdSingular, string QuantityNotStdPlural, global::System.Nullable<int> Original_IDQuantityNotStdLanguage, global::System.Nullable<int> Original_IDQuantityNotStd, global::System.Nullable<int> Original_IDLanguage, string Original_QuantityNotStdSingular, string Original_QuantityNotStdPlural) {
            return this.Update(IDQuantityNotStd, IDLanguage, QuantityNotStdSingular, QuantityNotStdPlural, Original_IDQuantityNotStdLanguage, Original_IDQuantityNotStd, Original_IDLanguage, Original_QuantityNotStdSingular, Original_QuantityNotStdPlural, Original_IDQuantityNotStdLanguage);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetIngredientsAlternativesDAL : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public GetIngredientsAlternativesDAL() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetIngredientsAlternatives";
            tableMapping.ColumnMappings.Add("IDIngredientAlternative", "IDIngredientAlternative");
            tableMapping.ColumnMappings.Add("IDIngredientMain", "IDIngredientMain");
            tableMapping.ColumnMappings.Add("IDIngredientSlave", "IDIngredientSlave");
            tableMapping.ColumnMappings.Add("AddedByUser", "AddedByUser");
            tableMapping.ColumnMappings.Add("AddedOn", "AddedOn");
            tableMapping.ColumnMappings.Add("CheckedBy", "CheckedBy");
            tableMapping.ColumnMappings.Add("CheckedOn", "CheckedOn");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[IngredientsAlternatives] WHERE (([IDIngredientAlternative] = @Original_IDIngredientAlternative) AND ([IDIngredientMain] = @Original_IDIngredientMain) AND ([IDIngredientSlave] = @Original_IDIngredientSlave) AND ([AddedByUser] = @Original_AddedByUser) AND ([AddedOn] = @Original_AddedOn) AND ((@IsNull_CheckedBy = 1 AND [CheckedBy] IS NULL) OR ([CheckedBy] = @Original_CheckedBy)) AND ((@IsNull_CheckedOn = 1 AND [CheckedOn] IS NULL) OR ([CheckedOn] = @Original_CheckedOn)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientAlternative", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientAlternative", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientMain", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientMain", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientSlave", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientSlave", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AddedByUser", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AddedByUser", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AddedOn", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AddedOn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CheckedBy", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckedBy", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CheckedBy", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckedBy", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CheckedOn", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckedOn", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CheckedOn", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckedOn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[IngredientsAlternatives] ([IDIngredientAlternative], [IDIngredientMain], [IDIngredientSlave], [AddedByUser], [AddedOn], [CheckedBy], [CheckedOn]) VALUES (@IDIngredientAlternative, @IDIngredientMain, @IDIngredientSlave, @AddedByUser, @AddedOn, @CheckedBy, @CheckedOn);
SELECT IDIngredientAlternative, IDIngredientMain, IDIngredientSlave, AddedByUser, AddedOn, CheckedBy, CheckedOn FROM IngredientsAlternatives WHERE (IDIngredientAlternative = @IDIngredientAlternative)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientAlternative", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientAlternative", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientMain", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientMain", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientSlave", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientSlave", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AddedByUser", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AddedByUser", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AddedOn", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AddedOn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CheckedBy", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckedBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CheckedOn", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckedOn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[IngredientsAlternatives] SET [IDIngredientAlternative] = @IDIngredientAlternative, [IDIngredientMain] = @IDIngredientMain, [IDIngredientSlave] = @IDIngredientSlave, [AddedByUser] = @AddedByUser, [AddedOn] = @AddedOn, [CheckedBy] = @CheckedBy, [CheckedOn] = @CheckedOn WHERE (([IDIngredientAlternative] = @Original_IDIngredientAlternative) AND ([IDIngredientMain] = @Original_IDIngredientMain) AND ([IDIngredientSlave] = @Original_IDIngredientSlave) AND ([AddedByUser] = @Original_AddedByUser) AND ([AddedOn] = @Original_AddedOn) AND ((@IsNull_CheckedBy = 1 AND [CheckedBy] IS NULL) OR ([CheckedBy] = @Original_CheckedBy)) AND ((@IsNull_CheckedOn = 1 AND [CheckedOn] IS NULL) OR ([CheckedOn] = @Original_CheckedOn)));
SELECT IDIngredientAlternative, IDIngredientMain, IDIngredientSlave, AddedByUser, AddedOn, CheckedBy, CheckedOn FROM IngredientsAlternatives WHERE (IDIngredientAlternative = @IDIngredientAlternative)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientAlternative", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientAlternative", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientMain", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientMain", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientSlave", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientSlave", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AddedByUser", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AddedByUser", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AddedOn", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AddedOn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CheckedBy", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckedBy", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CheckedOn", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckedOn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientAlternative", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientAlternative", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientMain", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientMain", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDIngredientSlave", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientSlave", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AddedByUser", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AddedByUser", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AddedOn", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AddedOn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CheckedBy", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckedBy", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CheckedBy", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckedBy", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CheckedOn", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckedOn", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CheckedOn", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CheckedOn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MyCookin.DAL.Properties.Settings.Default.DBRecipesConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT IDIngredientAlternative, IDIngredientMain, IDIngredientSlave, AddedByUser," +
                " AddedOn, CheckedBy, CheckedOn FROM dbo.IngredientsAlternatives";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT IDIngredientAlternative, IDIngredientMain, IDIngredientSlave, AddedByUser," +
                " AddedOn, CheckedBy, CheckedOn,Checked FROM dbo.IngredientsAlternatives\r\nWHERE I" +
                "DIngredientAlternative=@IDIngredientAlternative";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientAlternative", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientAlternative", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT IDIngredientAlternative, IDIngredientMain, IDIngredientSlave, AddedByUser," +
                " AddedOn, CheckedBy, CheckedOn,Checked FROM dbo.IngredientsAlternatives\r\nWHERE I" +
                "DIngredientMain=@IDIngredientMain AND Checked = @Checked";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDIngredientMain", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, "IDIngredientMain", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Checked", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "Checked", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ds_Ingredient.GetIngredientsAlternativesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ds_Ingredient.GetIngredientsAlternativesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ds_Ingredient.GetIngredientsAlternativesDataTable dataTable = new ds_Ingredient.GetIngredientsAlternativesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetIngredientsAlternativesDataTable GetAlternativeIngredientByIDIngredientAlternative(System.Guid IDIngredientAlternative) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDIngredientAlternative));
            ds_Ingredient.GetIngredientsAlternativesDataTable dataTable = new ds_Ingredient.GetIngredientsAlternativesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ds_Ingredient.GetIngredientsAlternativesDataTable GetAlternativeIngredientByIDMainIngr(System.Guid IDIngredientMain, bool Checked) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(IDIngredientMain));
            this.Adapter.SelectCommand.Parameters[1].Value = ((bool)(Checked));
            ds_Ingredient.GetIngredientsAlternativesDataTable dataTable = new ds_Ingredient.GetIngredientsAlternativesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_Ingredient.GetIngredientsAlternativesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ds_Ingredient dataSet) {
            return this.Adapter.Update(dataSet, "GetIngredientsAlternatives");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(global::System.Nullable<global::System.Guid> Original_IDIngredientAlternative, global::System.Nullable<global::System.Guid> Original_IDIngredientMain, global::System.Nullable<global::System.Guid> Original_IDIngredientSlave, global::System.Nullable<global::System.Guid> Original_AddedByUser, global::System.Nullable<global::System.DateTime> Original_AddedOn, global::System.Nullable<global::System.Guid> Original_CheckedBy, global::System.Nullable<global::System.DateTime> Original_CheckedOn) {
            if ((Original_IDIngredientAlternative.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_IDIngredientAlternative.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((Original_IDIngredientMain.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((System.Guid)(Original_IDIngredientMain.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Original_IDIngredientSlave.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((System.Guid)(Original_IDIngredientSlave.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_AddedByUser.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((System.Guid)(Original_AddedByUser.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Original_AddedOn.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_AddedOn.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_CheckedBy.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((System.Guid)(Original_CheckedBy.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_CheckedOn.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((System.DateTime)(Original_CheckedOn.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<global::System.Guid> IDIngredientAlternative, global::System.Nullable<global::System.Guid> IDIngredientMain, global::System.Nullable<global::System.Guid> IDIngredientSlave, global::System.Nullable<global::System.Guid> AddedByUser, global::System.Nullable<global::System.DateTime> AddedOn, global::System.Nullable<global::System.Guid> CheckedBy, global::System.Nullable<global::System.DateTime> CheckedOn) {
            if ((IDIngredientAlternative.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(IDIngredientAlternative.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((IDIngredientMain.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.Guid)(IDIngredientMain.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IDIngredientSlave.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.Guid)(IDIngredientSlave.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((AddedByUser.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.Guid)(AddedByUser.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((AddedOn.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(AddedOn.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((CheckedBy.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((System.Guid)(CheckedBy.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((CheckedOn.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(CheckedOn.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<global::System.Guid> IDIngredientAlternative, global::System.Nullable<global::System.Guid> IDIngredientMain, global::System.Nullable<global::System.Guid> IDIngredientSlave, global::System.Nullable<global::System.Guid> AddedByUser, global::System.Nullable<global::System.DateTime> AddedOn, global::System.Nullable<global::System.Guid> CheckedBy, global::System.Nullable<global::System.DateTime> CheckedOn, global::System.Nullable<global::System.Guid> Original_IDIngredientAlternative, global::System.Nullable<global::System.Guid> Original_IDIngredientMain, global::System.Nullable<global::System.Guid> Original_IDIngredientSlave, global::System.Nullable<global::System.Guid> Original_AddedByUser, global::System.Nullable<global::System.DateTime> Original_AddedOn, global::System.Nullable<global::System.Guid> Original_CheckedBy, global::System.Nullable<global::System.DateTime> Original_CheckedOn) {
            if ((IDIngredientAlternative.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(IDIngredientAlternative.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((IDIngredientMain.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((System.Guid)(IDIngredientMain.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((IDIngredientSlave.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((System.Guid)(IDIngredientSlave.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((AddedByUser.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.Guid)(AddedByUser.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((AddedOn.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(AddedOn.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((CheckedBy.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((System.Guid)(CheckedBy.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((CheckedOn.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(CheckedOn.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_IDIngredientAlternative.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((System.Guid)(Original_IDIngredientAlternative.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_IDIngredientMain.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((System.Guid)(Original_IDIngredientMain.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_IDIngredientSlave.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((System.Guid)(Original_IDIngredientSlave.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_AddedByUser.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((System.Guid)(Original_AddedByUser.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_AddedOn.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(Original_AddedOn.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_CheckedBy.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((System.Guid)(Original_CheckedBy.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_CheckedOn.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((System.DateTime)(Original_CheckedOn.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<global::System.Guid> IDIngredientMain, global::System.Nullable<global::System.Guid> IDIngredientSlave, global::System.Nullable<global::System.Guid> AddedByUser, global::System.Nullable<global::System.DateTime> AddedOn, global::System.Nullable<global::System.Guid> CheckedBy, global::System.Nullable<global::System.DateTime> CheckedOn, global::System.Nullable<global::System.Guid> Original_IDIngredientAlternative, global::System.Nullable<global::System.Guid> Original_IDIngredientMain, global::System.Nullable<global::System.Guid> Original_IDIngredientSlave, global::System.Nullable<global::System.Guid> Original_AddedByUser, global::System.Nullable<global::System.DateTime> Original_AddedOn, global::System.Nullable<global::System.Guid> Original_CheckedBy, global::System.Nullable<global::System.DateTime> Original_CheckedOn) {
            return this.Update(Original_IDIngredientAlternative, IDIngredientMain, IDIngredientSlave, AddedByUser, AddedOn, CheckedBy, CheckedOn, Original_IDIngredientAlternative, Original_IDIngredientMain, Original_IDIngredientSlave, Original_AddedByUser, Original_AddedOn, Original_CheckedBy, Original_CheckedOn);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GETSiteMapIngredientDAL : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public GETSiteMapIngredientDAL() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GETSiteMapIngredient";
            tableMapping.ColumnMappings.Add("SitemapURL", "SitemapURL");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MyCookin.DAL.Properties.Settings.Default.DBRecipesConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.USP_SiteMapIngredient";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDLanguage", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ds_Ingredient.GETSiteMapIngredientDataTable USP_SiteMapIngredient(global::System.Nullable<int> IDLanguage) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((IDLanguage.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(IDLanguage.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            ds_Ingredient.GETSiteMapIngredientDataTable dataTable = new ds_Ingredient.GETSiteMapIngredientDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private GetIngredientsCategoriesDAL _getIngredientsCategoriesDAL;
        
        private GetIngredientsCategoriesLanguagesDAL _getIngredientsCategoriesLanguagesDAL;
        
        private GetIngredientsIngredientsCategoriesDAL _getIngredientsIngredientsCategoriesDAL;
        
        private GetIngredientsQuantityTypesDAL _getIngredientsQuantityTypesDAL;
        
        private GetIngredientsQuantityTypesLanguagesDAL _getIngredientsQuantityTypesLanguagesDAL;
        
        private GetIngredientsAllowedQuantityTypesDAL _getIngredientsAllowedQuantityTypesDAL;
        
        private GetIngredientsDAL _getIngredientsDAL;
        
        private GetQuantityNotStdDAL _getQuantityNotStdDAL;
        
        private GetQuantityNotStdLanguageDAL _getQuantityNotStdLanguageDAL;
        
        private GetIngredientsAlternativesDAL _getIngredientsAlternativesDAL;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public GetIngredientsCategoriesDAL GetIngredientsCategoriesDAL {
            get {
                return this._getIngredientsCategoriesDAL;
            }
            set {
                this._getIngredientsCategoriesDAL = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public GetIngredientsCategoriesLanguagesDAL GetIngredientsCategoriesLanguagesDAL {
            get {
                return this._getIngredientsCategoriesLanguagesDAL;
            }
            set {
                this._getIngredientsCategoriesLanguagesDAL = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public GetIngredientsIngredientsCategoriesDAL GetIngredientsIngredientsCategoriesDAL {
            get {
                return this._getIngredientsIngredientsCategoriesDAL;
            }
            set {
                this._getIngredientsIngredientsCategoriesDAL = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public GetIngredientsQuantityTypesDAL GetIngredientsQuantityTypesDAL {
            get {
                return this._getIngredientsQuantityTypesDAL;
            }
            set {
                this._getIngredientsQuantityTypesDAL = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public GetIngredientsQuantityTypesLanguagesDAL GetIngredientsQuantityTypesLanguagesDAL {
            get {
                return this._getIngredientsQuantityTypesLanguagesDAL;
            }
            set {
                this._getIngredientsQuantityTypesLanguagesDAL = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public GetIngredientsAllowedQuantityTypesDAL GetIngredientsAllowedQuantityTypesDAL {
            get {
                return this._getIngredientsAllowedQuantityTypesDAL;
            }
            set {
                this._getIngredientsAllowedQuantityTypesDAL = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public GetIngredientsDAL GetIngredientsDAL {
            get {
                return this._getIngredientsDAL;
            }
            set {
                this._getIngredientsDAL = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public GetQuantityNotStdDAL GetQuantityNotStdDAL {
            get {
                return this._getQuantityNotStdDAL;
            }
            set {
                this._getQuantityNotStdDAL = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public GetQuantityNotStdLanguageDAL GetQuantityNotStdLanguageDAL {
            get {
                return this._getQuantityNotStdLanguageDAL;
            }
            set {
                this._getQuantityNotStdLanguageDAL = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public GetIngredientsAlternativesDAL GetIngredientsAlternativesDAL {
            get {
                return this._getIngredientsAlternativesDAL;
            }
            set {
                this._getIngredientsAlternativesDAL = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._getIngredientsCategoriesDAL != null) 
                            && (this._getIngredientsCategoriesDAL.Connection != null))) {
                    return this._getIngredientsCategoriesDAL.Connection;
                }
                if (((this._getIngredientsCategoriesLanguagesDAL != null) 
                            && (this._getIngredientsCategoriesLanguagesDAL.Connection != null))) {
                    return this._getIngredientsCategoriesLanguagesDAL.Connection;
                }
                if (((this._getIngredientsIngredientsCategoriesDAL != null) 
                            && (this._getIngredientsIngredientsCategoriesDAL.Connection != null))) {
                    return this._getIngredientsIngredientsCategoriesDAL.Connection;
                }
                if (((this._getIngredientsQuantityTypesDAL != null) 
                            && (this._getIngredientsQuantityTypesDAL.Connection != null))) {
                    return this._getIngredientsQuantityTypesDAL.Connection;
                }
                if (((this._getIngredientsQuantityTypesLanguagesDAL != null) 
                            && (this._getIngredientsQuantityTypesLanguagesDAL.Connection != null))) {
                    return this._getIngredientsQuantityTypesLanguagesDAL.Connection;
                }
                if (((this._getIngredientsAllowedQuantityTypesDAL != null) 
                            && (this._getIngredientsAllowedQuantityTypesDAL.Connection != null))) {
                    return this._getIngredientsAllowedQuantityTypesDAL.Connection;
                }
                if (((this._getIngredientsDAL != null) 
                            && (this._getIngredientsDAL.Connection != null))) {
                    return this._getIngredientsDAL.Connection;
                }
                if (((this._getQuantityNotStdDAL != null) 
                            && (this._getQuantityNotStdDAL.Connection != null))) {
                    return this._getQuantityNotStdDAL.Connection;
                }
                if (((this._getQuantityNotStdLanguageDAL != null) 
                            && (this._getQuantityNotStdLanguageDAL.Connection != null))) {
                    return this._getQuantityNotStdLanguageDAL.Connection;
                }
                if (((this._getIngredientsAlternativesDAL != null) 
                            && (this._getIngredientsAlternativesDAL.Connection != null))) {
                    return this._getIngredientsAlternativesDAL.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._getIngredientsCategoriesDAL != null)) {
                    count = (count + 1);
                }
                if ((this._getIngredientsCategoriesLanguagesDAL != null)) {
                    count = (count + 1);
                }
                if ((this._getIngredientsIngredientsCategoriesDAL != null)) {
                    count = (count + 1);
                }
                if ((this._getIngredientsQuantityTypesDAL != null)) {
                    count = (count + 1);
                }
                if ((this._getIngredientsQuantityTypesLanguagesDAL != null)) {
                    count = (count + 1);
                }
                if ((this._getIngredientsAllowedQuantityTypesDAL != null)) {
                    count = (count + 1);
                }
                if ((this._getIngredientsDAL != null)) {
                    count = (count + 1);
                }
                if ((this._getQuantityNotStdDAL != null)) {
                    count = (count + 1);
                }
                if ((this._getQuantityNotStdLanguageDAL != null)) {
                    count = (count + 1);
                }
                if ((this._getIngredientsAlternativesDAL != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(ds_Ingredient dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._getIngredientsQuantityTypesDAL != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.GetIngredientsQuantityTypes.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._getIngredientsQuantityTypesDAL.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._getIngredientsDAL != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.GetIngredients.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._getIngredientsDAL.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._getQuantityNotStdDAL != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.GetQuantityNotStd.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._getQuantityNotStdDAL.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._getIngredientsCategoriesDAL != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.GetIngredientsCategories.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._getIngredientsCategoriesDAL.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._getIngredientsCategoriesLanguagesDAL != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.GetIngredientsCategoriesLanguages.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._getIngredientsCategoriesLanguagesDAL.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._getIngredientsIngredientsCategoriesDAL != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.GetIngredientsIngredientsCategories.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._getIngredientsIngredientsCategoriesDAL.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._getIngredientsQuantityTypesLanguagesDAL != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.GetIngredientsQuantityTypesLanguages.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._getIngredientsQuantityTypesLanguagesDAL.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._getIngredientsAllowedQuantityTypesDAL != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.GetIngredientsAllowedQuantityTypes.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._getIngredientsAllowedQuantityTypesDAL.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._getQuantityNotStdLanguageDAL != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.GetQuantityNotStdLanguage.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._getQuantityNotStdLanguageDAL.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._getIngredientsAlternativesDAL != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.GetIngredientsAlternatives.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._getIngredientsAlternativesDAL.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(ds_Ingredient dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._getIngredientsQuantityTypesDAL != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.GetIngredientsQuantityTypes.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._getIngredientsQuantityTypesDAL.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._getIngredientsDAL != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.GetIngredients.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._getIngredientsDAL.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._getQuantityNotStdDAL != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.GetQuantityNotStd.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._getQuantityNotStdDAL.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._getIngredientsCategoriesDAL != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.GetIngredientsCategories.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._getIngredientsCategoriesDAL.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._getIngredientsCategoriesLanguagesDAL != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.GetIngredientsCategoriesLanguages.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._getIngredientsCategoriesLanguagesDAL.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._getIngredientsIngredientsCategoriesDAL != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.GetIngredientsIngredientsCategories.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._getIngredientsIngredientsCategoriesDAL.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._getIngredientsQuantityTypesLanguagesDAL != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.GetIngredientsQuantityTypesLanguages.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._getIngredientsQuantityTypesLanguagesDAL.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._getIngredientsAllowedQuantityTypesDAL != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.GetIngredientsAllowedQuantityTypes.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._getIngredientsAllowedQuantityTypesDAL.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._getQuantityNotStdLanguageDAL != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.GetQuantityNotStdLanguage.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._getQuantityNotStdLanguageDAL.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._getIngredientsAlternativesDAL != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.GetIngredientsAlternatives.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._getIngredientsAlternativesDAL.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(ds_Ingredient dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._getIngredientsAlternativesDAL != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.GetIngredientsAlternatives.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._getIngredientsAlternativesDAL.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._getQuantityNotStdLanguageDAL != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.GetQuantityNotStdLanguage.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._getQuantityNotStdLanguageDAL.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._getIngredientsAllowedQuantityTypesDAL != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.GetIngredientsAllowedQuantityTypes.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._getIngredientsAllowedQuantityTypesDAL.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._getIngredientsQuantityTypesLanguagesDAL != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.GetIngredientsQuantityTypesLanguages.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._getIngredientsQuantityTypesLanguagesDAL.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._getIngredientsIngredientsCategoriesDAL != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.GetIngredientsIngredientsCategories.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._getIngredientsIngredientsCategoriesDAL.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._getIngredientsCategoriesLanguagesDAL != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.GetIngredientsCategoriesLanguages.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._getIngredientsCategoriesLanguagesDAL.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._getIngredientsCategoriesDAL != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.GetIngredientsCategories.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._getIngredientsCategoriesDAL.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._getQuantityNotStdDAL != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.GetQuantityNotStd.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._getQuantityNotStdDAL.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._getIngredientsDAL != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.GetIngredients.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._getIngredientsDAL.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._getIngredientsQuantityTypesDAL != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.GetIngredientsQuantityTypes.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._getIngredientsQuantityTypesDAL.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(ds_Ingredient dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._getIngredientsCategoriesDAL != null) 
                        && (this.MatchTableAdapterConnection(this._getIngredientsCategoriesDAL.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._getIngredientsCategoriesLanguagesDAL != null) 
                        && (this.MatchTableAdapterConnection(this._getIngredientsCategoriesLanguagesDAL.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._getIngredientsIngredientsCategoriesDAL != null) 
                        && (this.MatchTableAdapterConnection(this._getIngredientsIngredientsCategoriesDAL.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._getIngredientsQuantityTypesDAL != null) 
                        && (this.MatchTableAdapterConnection(this._getIngredientsQuantityTypesDAL.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._getIngredientsQuantityTypesLanguagesDAL != null) 
                        && (this.MatchTableAdapterConnection(this._getIngredientsQuantityTypesLanguagesDAL.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._getIngredientsAllowedQuantityTypesDAL != null) 
                        && (this.MatchTableAdapterConnection(this._getIngredientsAllowedQuantityTypesDAL.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._getIngredientsDAL != null) 
                        && (this.MatchTableAdapterConnection(this._getIngredientsDAL.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._getQuantityNotStdDAL != null) 
                        && (this.MatchTableAdapterConnection(this._getQuantityNotStdDAL.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._getQuantityNotStdLanguageDAL != null) 
                        && (this.MatchTableAdapterConnection(this._getQuantityNotStdLanguageDAL.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._getIngredientsAlternativesDAL != null) 
                        && (this.MatchTableAdapterConnection(this._getIngredientsAlternativesDAL.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._getIngredientsCategoriesDAL != null)) {
                    revertConnections.Add(this._getIngredientsCategoriesDAL, this._getIngredientsCategoriesDAL.Connection);
                    this._getIngredientsCategoriesDAL.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._getIngredientsCategoriesDAL.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._getIngredientsCategoriesDAL.Adapter.AcceptChangesDuringUpdate) {
                        this._getIngredientsCategoriesDAL.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._getIngredientsCategoriesDAL.Adapter);
                    }
                }
                if ((this._getIngredientsCategoriesLanguagesDAL != null)) {
                    revertConnections.Add(this._getIngredientsCategoriesLanguagesDAL, this._getIngredientsCategoriesLanguagesDAL.Connection);
                    this._getIngredientsCategoriesLanguagesDAL.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._getIngredientsCategoriesLanguagesDAL.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._getIngredientsCategoriesLanguagesDAL.Adapter.AcceptChangesDuringUpdate) {
                        this._getIngredientsCategoriesLanguagesDAL.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._getIngredientsCategoriesLanguagesDAL.Adapter);
                    }
                }
                if ((this._getIngredientsIngredientsCategoriesDAL != null)) {
                    revertConnections.Add(this._getIngredientsIngredientsCategoriesDAL, this._getIngredientsIngredientsCategoriesDAL.Connection);
                    this._getIngredientsIngredientsCategoriesDAL.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._getIngredientsIngredientsCategoriesDAL.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._getIngredientsIngredientsCategoriesDAL.Adapter.AcceptChangesDuringUpdate) {
                        this._getIngredientsIngredientsCategoriesDAL.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._getIngredientsIngredientsCategoriesDAL.Adapter);
                    }
                }
                if ((this._getIngredientsQuantityTypesDAL != null)) {
                    revertConnections.Add(this._getIngredientsQuantityTypesDAL, this._getIngredientsQuantityTypesDAL.Connection);
                    this._getIngredientsQuantityTypesDAL.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._getIngredientsQuantityTypesDAL.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._getIngredientsQuantityTypesDAL.Adapter.AcceptChangesDuringUpdate) {
                        this._getIngredientsQuantityTypesDAL.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._getIngredientsQuantityTypesDAL.Adapter);
                    }
                }
                if ((this._getIngredientsQuantityTypesLanguagesDAL != null)) {
                    revertConnections.Add(this._getIngredientsQuantityTypesLanguagesDAL, this._getIngredientsQuantityTypesLanguagesDAL.Connection);
                    this._getIngredientsQuantityTypesLanguagesDAL.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._getIngredientsQuantityTypesLanguagesDAL.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._getIngredientsQuantityTypesLanguagesDAL.Adapter.AcceptChangesDuringUpdate) {
                        this._getIngredientsQuantityTypesLanguagesDAL.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._getIngredientsQuantityTypesLanguagesDAL.Adapter);
                    }
                }
                if ((this._getIngredientsAllowedQuantityTypesDAL != null)) {
                    revertConnections.Add(this._getIngredientsAllowedQuantityTypesDAL, this._getIngredientsAllowedQuantityTypesDAL.Connection);
                    this._getIngredientsAllowedQuantityTypesDAL.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._getIngredientsAllowedQuantityTypesDAL.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._getIngredientsAllowedQuantityTypesDAL.Adapter.AcceptChangesDuringUpdate) {
                        this._getIngredientsAllowedQuantityTypesDAL.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._getIngredientsAllowedQuantityTypesDAL.Adapter);
                    }
                }
                if ((this._getIngredientsDAL != null)) {
                    revertConnections.Add(this._getIngredientsDAL, this._getIngredientsDAL.Connection);
                    this._getIngredientsDAL.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._getIngredientsDAL.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._getIngredientsDAL.Adapter.AcceptChangesDuringUpdate) {
                        this._getIngredientsDAL.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._getIngredientsDAL.Adapter);
                    }
                }
                if ((this._getQuantityNotStdDAL != null)) {
                    revertConnections.Add(this._getQuantityNotStdDAL, this._getQuantityNotStdDAL.Connection);
                    this._getQuantityNotStdDAL.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._getQuantityNotStdDAL.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._getQuantityNotStdDAL.Adapter.AcceptChangesDuringUpdate) {
                        this._getQuantityNotStdDAL.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._getQuantityNotStdDAL.Adapter);
                    }
                }
                if ((this._getQuantityNotStdLanguageDAL != null)) {
                    revertConnections.Add(this._getQuantityNotStdLanguageDAL, this._getQuantityNotStdLanguageDAL.Connection);
                    this._getQuantityNotStdLanguageDAL.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._getQuantityNotStdLanguageDAL.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._getQuantityNotStdLanguageDAL.Adapter.AcceptChangesDuringUpdate) {
                        this._getQuantityNotStdLanguageDAL.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._getQuantityNotStdLanguageDAL.Adapter);
                    }
                }
                if ((this._getIngredientsAlternativesDAL != null)) {
                    revertConnections.Add(this._getIngredientsAlternativesDAL, this._getIngredientsAlternativesDAL.Connection);
                    this._getIngredientsAlternativesDAL.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._getIngredientsAlternativesDAL.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._getIngredientsAlternativesDAL.Adapter.AcceptChangesDuringUpdate) {
                        this._getIngredientsAlternativesDAL.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._getIngredientsAlternativesDAL.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._getIngredientsCategoriesDAL != null)) {
                    this._getIngredientsCategoriesDAL.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._getIngredientsCategoriesDAL]));
                    this._getIngredientsCategoriesDAL.Transaction = null;
                }
                if ((this._getIngredientsCategoriesLanguagesDAL != null)) {
                    this._getIngredientsCategoriesLanguagesDAL.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._getIngredientsCategoriesLanguagesDAL]));
                    this._getIngredientsCategoriesLanguagesDAL.Transaction = null;
                }
                if ((this._getIngredientsIngredientsCategoriesDAL != null)) {
                    this._getIngredientsIngredientsCategoriesDAL.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._getIngredientsIngredientsCategoriesDAL]));
                    this._getIngredientsIngredientsCategoriesDAL.Transaction = null;
                }
                if ((this._getIngredientsQuantityTypesDAL != null)) {
                    this._getIngredientsQuantityTypesDAL.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._getIngredientsQuantityTypesDAL]));
                    this._getIngredientsQuantityTypesDAL.Transaction = null;
                }
                if ((this._getIngredientsQuantityTypesLanguagesDAL != null)) {
                    this._getIngredientsQuantityTypesLanguagesDAL.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._getIngredientsQuantityTypesLanguagesDAL]));
                    this._getIngredientsQuantityTypesLanguagesDAL.Transaction = null;
                }
                if ((this._getIngredientsAllowedQuantityTypesDAL != null)) {
                    this._getIngredientsAllowedQuantityTypesDAL.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._getIngredientsAllowedQuantityTypesDAL]));
                    this._getIngredientsAllowedQuantityTypesDAL.Transaction = null;
                }
                if ((this._getIngredientsDAL != null)) {
                    this._getIngredientsDAL.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._getIngredientsDAL]));
                    this._getIngredientsDAL.Transaction = null;
                }
                if ((this._getQuantityNotStdDAL != null)) {
                    this._getQuantityNotStdDAL.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._getQuantityNotStdDAL]));
                    this._getQuantityNotStdDAL.Transaction = null;
                }
                if ((this._getQuantityNotStdLanguageDAL != null)) {
                    this._getQuantityNotStdLanguageDAL.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._getQuantityNotStdLanguageDAL]));
                    this._getQuantityNotStdLanguageDAL.Transaction = null;
                }
                if ((this._getIngredientsAlternativesDAL != null)) {
                    this._getIngredientsAlternativesDAL.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._getIngredientsAlternativesDAL]));
                    this._getIngredientsAlternativesDAL.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591