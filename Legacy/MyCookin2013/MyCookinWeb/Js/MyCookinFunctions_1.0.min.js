var WebServicesPath = "localhost"; var WebServicesMySqlPath = "localhost"; jQuery.support.cors = true; function HideScrollbars() { try { document.documentElement.style.overflow = 'hidden'; document.body.scroll = "no" } catch (err) { console.log("Ops..: " + err) } } function MOver(picimage) { try { Picture_Over = eval(picimage + "On.src"); document[picimage].src = Picture_Over } catch (err) { console.log("Ops..: " + err) } } function MOut(picimage) { try { Picture_Out = eval(picimage + "Off.src"); document[picimage].src = Picture_Out } catch (err) { console.log("Ops..: " + err) } } function ShowJQuiBoxDialog(BoxTitle, BoxText) { try { $get('lblResult').innerHTML = BoxText.toString(); $("#pnlResult").dialog({ modal: true, resizable: false, title: BoxTitle.toString(), buttons: { Ok: function () { $(this).dialog("close") } } }) } catch (err) { console.log("Ops..: " + err) } } function ShowJQuiBoxDialogWithRedirect(BoxTitle, BoxText, RedirectUrl) { try { $get('lblResult').innerHTML = BoxText.toString(); $("#pnlResult").dialog({ modal: true, resizable: false, title: BoxTitle.toString(), close: function () { window.location.href = RedirectUrl }, buttons: { Ok: function () { window.location.href = RedirectUrl } } }) } catch (err) { console.log("Ops..: " + err) } } function StartPopBox(pnlMainName, lnkName, pnlBoxName) { try { $(pnlMainName).popbox({ 'open': lnkName, 'box': pnlBoxName, 'arrow': '.arrow', 'arrow-border': '.arrow-border', 'close': '.close', 'closefunction': '' }) } catch (err) { console.log("Ops..: " + err) } } function StartPopBoxAsync(pnlMainName, lnkName, pnlBoxName) { try { $(pnlMainName).popbox({ 'open': lnkName, 'box': pnlBoxName, 'arrow': '.arrow', 'arrow-border': '.arrow-border', 'close': '.close', 'closefunction': '' }) } catch (err) { console.log("Ops..: " + err) } } function StartPopBoxWithCloseFunction(pnlMainName, lnkName, pnlBoxName) { try { $(pnlMainName).popbox({ 'open': lnkName, 'box': pnlBoxName, 'arrow': '.arrow', 'arrow-border': '.arrow-border', 'close': '.close', 'closefunction': 'StartTimer' }) } catch (err) { console.log("Ops..: " + err) } } $(function () { try { $("#pnlMainTab").tabs({ fx: { height: 'toggle', opacity: 'toggle' } }) } catch (err) { console.log("Ops..: " + err) } }); jQuery(function ($) { try { $.datepicker.setDefaults($.datepicker.regional['it']) } catch (err) { console.log("Ops..: " + err) } }); function AdultCalendar(FieldID, LanguageCode) { try { var CurrentDate = new Date(); $('input[id$=' + FieldID + ' ]').datepicker({ format: 'dd/mm/yyyy', weekStart: 1, startView: 'decade', startDate: Date.DateAdd('yyyy', -118, CurrentDate), endDate: Date.DateAdd('yyyy', -18, CurrentDate), language: LanguageCode }) } catch (err) { console.log("Ops..: " + err) } } function ValidationSummaryInBoxDialog(ButtonID, ValidationSummaryID, DivResultID, BoxTitle) { try { $(document).ready(function () { $('#' + ButtonID).click(function () { document.TimeID = setTimeout('CheckMessage(\'' + ValidationSummaryID + '\', \'' + DivResultID + '\',\' ' + BoxTitle + '\');', 5) }) }) } catch (err) { console.log("Ops..: " + err) } } function CheckMessage(ValidationSummaryID, DivResultID, BoxTitle) { try { if ($('div#' + ValidationSummaryID + ' UL' + '').length > 0) { $get('lblResult').innerHTML = ''; $("#pnlResult").dialog({ modal: true, resizable: false, title: BoxTitle.toString(), close: function () { $('div#' + ValidationSummaryID).empty() } }); clearTimeout(document.TimeID) } else { document.TimeID = setTimeout('CheckMessage(\'' + ValidationSummaryID + '\', \'' + DivResultID + '\',\' ' + BoxTitle + '\');', 5) } } catch (err) { console.log("Ops..: " + err) } } function ValidationSummaryWithTipsyTooltip(ButtonID, ValidationSummaryID, DivResultID, BoxTitle) { try { $(document).ready(function () { $('#' + ButtonID).click(function () { document.TimeID = setTimeout('CheckMessageForTooltip(\'' + ValidationSummaryID + '\', \'' + DivResultID + '\',\' ' + BoxTitle + '\');', 5) }) }) } catch (err) { console.log("Ops..: " + err) } } function CheckMessageForTooltip(ValidationSummaryID, DivResultID, BoxTitle) { try { if ($('div#' + ValidationSummaryID + ' UL' + '').length > 0) { $get('lblResult').innerHTML = ''; $("#pnlResult").hide(); $('.tipsyTooltipError').each(function () { $(this).tipsy('show') }); $('.tipsy[style*="left: 0px"]').each(function () { $(this).hide() }); clearTimeout(document.TimeID) } else { document.TimeID = setTimeout('CheckMessageForTooltip(\'' + ValidationSummaryID + '\', \'' + DivResultID + '\',\' ' + BoxTitle + '\');', 5) } } catch (err) { console.log("Ops..: " + err) } } function HideAllTipsyTooltipError() { try { $('.tipsyTooltipError').each(function () { $(this).tipsy('hide') }) } catch (err) { console.log("Ops..: " + err) } } function CallJCrop() { try { var minWidth; var minHeight; var CropAspectRatio; try { minWidth = $('#txtMinCropWidth').val(); minHeight = $('#txtMinCropHeight').val() } catch (e) { minWidth = 150; minHeight = 150 } try { CropAspectRatio = $('#txtCropAspectRatio').val() } catch (e) { CropAspectRatio = 1 } var jcrop_api; initJcrop(); function initJcrop() { jcrop_api = $.Jcrop('#imgUploadedImg', { onChange: showCoords, onSelect: showCoords, onRelease: clearCoords, aspectRatio: CropAspectRatio, minSize: [minWidth, minHeight] }); jcrop_api.animateTo([50, 50, 300, 300]) } function showCoords(c) { $('#txtX1').val(parseInt(c.x.toString(), 10)); $('#txtY1').val(parseInt(c.y.toString(), 10)); $('#txtX2').val(parseInt(c.x2.toString(), 10)); $('#txtY2').val(parseInt(c.y2.toString(), 10)); $('#txtW').val(parseInt(c.w.toString(), 10)); $('#txtH').val(parseInt(c.h.toString(), 10)) } function clearCoords() { $('#coords input').val('') } } catch (err) { console.log("Ops..: " + err) } } function CheckCrop(Title, Message) { try { if ($('#txtH').val() !== "" || $('#txtCropComplete').val() == "YES") { return true } else { ShowJQuiBoxDialog(Title, Message); return false } } catch (err) { console.log("Ops..: " + err); return false } } var confirmed = false; function JCOnfirm(objButton, BoxTitle, BoxText, ButtonOkTxt, ButtonNoTxt) { try { var btns = {}; btns[ButtonOkTxt] = function () { $(this).dialog("close"); confirmed = true; objButton.click() }; btns[ButtonNoTxt] = function () { $(this).dialog("close"); confirmed = false }; if (!confirmed) { $get('lblResult').innerHTML = BoxText.toString(); $("#pnlResult").dialog({ resizable: false, modal: true, title: BoxTitle.toString(), buttons: btns }); return false } else { confirmed = false; return true } } catch (err) { console.log("Ops..: " + err); return false } } function isNumberKey(evt) { try { var charCode = (evt.which) ? evt.which : evt.keyCode; if ((charCode > 47 && charCode < 58) || charCode == 44 || evt.keyCode == 46 || evt.keyCode == 8 || evt.keyCode == 37 || evt.keyCode == 39) return true; return false } catch (err) { console.log("Ops..: " + err); return false } } function isSpecialHTMLChar(evt) { try { var charCode = (evt.which) ? evt.which : event.keyCode; if ((charCode == 34) || (charCode == 35) || (charCode == 36) || (charCode == 38) || (charCode == 47) || (charCode == 60) || (charCode == 62) || (charCode == 36) || (charCode == 92) || (charCode == 124) || (charCode == 126)) return false; return true; } catch (err) { console.log("Ops..: " + err); return false; } } function isSpecialKey(evt) { try { var charCode = (evt.which) ? evt.which : event.keyCode; if ((charCode < 48 && charCode != 46) || (charCode >= 58 && charCode <= 64) || (charCode >= 91 && charCode <= 96) || (charCode >= 123)) return false; return true } catch (err) { console.log("Ops..: " + err); return false } } function noWrite(evt) { return false } function FocusOnLoad(IDTextBox) { try { $(document).ready(function () { $('#' + IDTextBox).focus() }) } catch (err) { console.log("Ops..: " + err) } } function ShowSocialButtons() { try { window.fbAsyncInit = function () { FB.init({ appId: "476759249023668", status: true, cookie: true, oauth: true, xfbml: true }); $("fblogin").show() }; (function (d) { var js, id = 'facebook-jssdk'; if (d.getElementById(id)) { return } js = d.createElement('script'); js.id = id; js.async = true; js.src = "//connect.facebook.net/en_US/all.js"; d.getElementsByTagName('head')[0].appendChild(js) }(document)) } catch (err) { console.log("Ops..: " + err) } } function clickButton(e, buttonid) { try { var evt = e ? e : window.event; var bt = document.getElementById(buttonid); if (bt) { if (evt.keyCode == 13) { bt.click(); return false } } } catch (err) { console.log("Ops..: " + err); return false } } function ActivateScroller(DivId) { try { $("#" + DivId).mCustomScrollbar({ autoHideScrollbar: true, advanced: { updateOnContentResize: true } }) } catch (err) { console.log("Ops..: " + err) } } function TextAreaAutoGrow(DivId) { try { $("#" + DivId).autosize() } catch (err) { console.log("Ops..: " + err) } } $.noty.defaults = { layout: 'bottomRight', theme: 'defaultTheme', type: 'information', text: '', dismissQueue: true, template: '<div class="noty_message"><span class="noty_text"></span><div class="noty_close"></div></div>', animation: { open: { height: 'toggle' }, close: { height: 'toggle' }, easing: 'swing', speed: 500 }, timeout: 5000, force: false, modal: false, closeWith: ['click'], callback: { onShow: function () { }, afterShow: function () { }, onClose: function () { }, afterClose: function () { } }, buttons: false }; $(document).ready(function () { try { $(".MyTooltip").tooltip({ position: { my: "center bottom-20", at: "center top", using: function (position, feedback) { $(this).css(position); $("<div>").addClass("arrow").addClass(feedback.vertical).addClass(feedback.horizontal).appendTo(this) } } }) } catch (err) { console.log("Ops..: " + err) } }); $(document).ready(function () { try { $('.tipsyTooltip').tipsy({ delayIn: 0, delayOut: 0, fade: true, gravity: 'w', html: true, live: false, offset: 0, opacity: 0.9, trigger: 'focus' }) } catch (err) { console.log("Ops..: " + err) } }); $(document).ready(function () { try { $('.tipsyTooltipError').tipsy({ delayIn: 0, delayOut: 0, fade: true, gravity: 'w', html: true, live: false, offset: 0, opacity: 0.9, trigger: 'manual' }) } catch (err) { console.log("Ops..: " + err) } }); $(document).ready(function () { try { $('.tipsyInfoNoteW').tipsy({ delayIn: 0, delayOut: 0, fade: true, gravity: 'w', html: true, live: false, offset: 0, opacity: 1, trigger: 'manual' }) } catch (err) { console.log("Ops..: " + err) } }); $(document).ready(function () { try { $('.tipsyInfoNote').tipsy({ delayIn: 0, delayOut: 0, fade: true, gravity: 'nw', html: true, live: false, offset: 0, opacity: 1, trigger: 'manual' }) } catch (err) { console.log("Ops..: " + err) } }); function checkEmail(email) { try { if (email === "") { return false } var emailReg = /^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/; if (emailReg.test(email)) { return true } else { return false } } catch (err) { console.log("Ops..: " + err); return false } } function hasSpecialChar_v1(stringToCheck) { try { var RegEx = /^[a-zA-Z0-9_.-]*$/; if (RegEx.test(stringToCheck)) { return true } else { return false } } catch (err) { console.log("Ops..: " + err); return false } } function hasSpecialChar_v2(stringToCheck) { try { var RegEx = /^[a-zA-Z0-9ÀÖäëïöüâêîôûáàéèíìóòúù ']*$/; if (stringToCheck.trim() != "") { if (RegEx.test(stringToCheck)) { return true } else { return false } } else { return false } } catch (err) { return false } } function htmlEncode(value) { try { return $('<div/>').text(value).html() } catch (err) { console.log("Ops..: " + err) } } function ShowJQuiModalPopUp(PanelID, TitleText, ImgToCropID, ButtoCropID) { try { var PopUpWidth = 700; try { PopUpWidth = $(ImgToCropID).width() + 35 } catch (err) { PopUpWidth = 700 } $(PanelID).dialog({ resizable: false, draggable: false, width: PopUpWidth, position: { my: "center center", at: "center", of: window }, title: TitleText.toString(), close: function () { DestroyJCropNew(ImgToCropID) }, closeOnEscape: true, modal: true, buttons: { Ok: function () { __doPostBack(ButtoCropID, ""); $(this).dialog('close') } } }) } catch (err) { console.log("Ops..: " + err) } } function DestroyJCropNew(ImgToCropID, ImageLoadedCheck) { try { var jcrop_api = $(ImgToCropID).data('Jcrop'); try { jcrop_api.destroy() } catch (err) { } } catch (err) { console.log("Ops..: " + err) } } function EditImageToCrop(ImgToCropID, IDMedia, MediaSizeType, FromBackupServer, AppendGuid, MinCropWidthID, MinCropHeightID, CropAspectRatioID, CropX1ID, CropY1ID, CropX2ID, CropY2ID, CropWidth, CropHeight, PanelID, TitleText, ImgToCropID, ButtoCropID) { try { CallJCropNew(MinCropWidthID, MinCropHeightID, CropAspectRatioID, ImgToCropID, CropX1ID, CropY1ID, CropX2ID, CropY2ID, CropWidth, CropHeight); ShowJQuiModalPopUp(PanelID, TitleText, ImgToCropID, ButtoCropID) } catch (err) { console.log("Ops..: " + err) } } var g_minWidth; var g_minHeight; var g_CropAspectRatio; var g_CropX1ID; var g_CropX2ID; var g_CropY1ID; var g_CropY2ID; var g_CropWidth; var g_CropHeight; var g_ImgToCropID; function CallJCropNew(MinCropWidthID, MinCropHeightID, CropAspectRatioID, ImgToCropID, CropX1ID, CropY1ID, CropX2ID, CropY2ID, CropWidth, CropHeight) { try { var minWidth; var minHeight; var CropAspectRatio; try { g_minWidth = $(MinCropWidthID).val(); g_minHeight = $(MinCropHeightID).val() } catch (e) { g_minWidth = 150; g_minHeight = 150 } try { g_CropAspectRatio = $(CropAspectRatioID).val() } catch (e) { g_CropAspectRatio = 1 } var jcrop_api; g_CropX1ID = CropX1ID; g_CropX2ID = CropX2ID; g_CropY1ID = CropY1ID; g_CropY2ID = CropY2ID; g_CropWidth = CropWidth; g_CropHeight = CropHeight; g_ImgToCropID = ImgToCropID; initJcrop() } catch (err) { console.log("Ops..: " + err) } } function initJcrop() { jcrop_api = $.Jcrop(g_ImgToCropID, { onChange: showCoords, onSelect: showCoords, onRelease: clearCoords, aspectRatio: g_CropAspectRatio, minSize: [g_minWidth, g_minHeight] }); jcrop_api.animateTo([50, 50, 300, 300]) } function showCoords(c) { $(g_CropX1ID).val(parseInt(c.x.toString(), 10)); $(g_CropY1ID).val(parseInt(c.y.toString(), 10)); $(g_CropX2ID).val(parseInt(c.x2.toString(), 10)); $(g_CropY2ID).val(parseInt(c.y2.toString(), 10)); $(g_CropWidth).val(parseInt(c.w.toString(), 10)); $(g_CropHeight).val(parseInt(c.h.toString(), 10)) } function clearCoords() { $(g_CropX1ID).val(''); $(g_CropY1ID).val(''); $(g_CropX2ID).val(''); $(g_CropY2ID).val(''); $(g_CropWidth).val(''); $(g_CropHeight).val('') } function ReplaceSpecialChar(TextToCheck, ReplaceChar) { return TextToCheck.replace(/[^a-zA-Z0-9]/g, ReplaceChar) } function ReplaceSpecialChar2(TextToCheck, ReplaceChar) { return TextToCheck.replace(/[$^|&:;\{\}\[\]\\\/\<\>]/gi, ReplaceChar) } function CheckMinuteField(txtHoursID, txtMinuteID) { var _minutes = parseInt($('#' + txtMinuteID).val(), 10); if (_minutes > 59) { var _hours = parseInt($('#' + txtHoursID).val(), 10); _hours = _hours + 1; _minutes = 0; $('#' + txtMinuteID).val(_minutes); $('#' + txtHoursID).val(_hours) } }
function InizializeMultiUpload(e, t, n, r, i, s, o, u, a, f, l, c, h, p, d, v, m, g, y) { var b = 0; var w = 0; var E = e; var S = t; try { E = parseInt(E) } catch (x) { E = 10 } try { S = parseInt(S) } catch (x) { S = 3 } $("#" + n).css({ display: "inline-block" }); $(r).css({ display: "none" }); $(i).css({ display: "none" }); var T = new plupload.Uploader({ runtimes: "html5,silverlight,flash,gears,html4", browse_button: n, container: s, max_file_size: S.toString() + "mb", multi_selection: true, unique_names: true, url: o + "?UploadConfig=" + u + "&baseFileName=" + a + "&IDMediaOwner=" + f, flash_swf_url: "/Js/PlUpload/plupload.flash.swf", silverlight_xap_url: "/Js/PlUpload/plupload.silverlight.xap", filters: [{ title: "Files", extensions: l }] }); T.bind("Init", function (e, t) { GetElementByID(c).innerHTML = ""; $(r).css({ display: "none" }) }); T.init(); T.bind("FilesAdded", function (e, t) { $(r).css({ display: "inline-block" }); GetElementByID(h).innerHTML = ""; var s = E; for (var l in t) { if (l < s) { w++; E--; GetElementByID(c).innerHTML += '<div id="' + t[l].id + '">' + t[l].name + " (" + plupload.formatSize(t[l].size) + ") <b></b></div>" } else { T.removeFile(t[l]) } } if (t.length >= E || 1 == 1) { $("#" + n).css({ display: "none" }); $(i).css({ display: "inline-block" }); if (a == "") { try { a = $("#hfBaseFileName").val() } catch (p) { } T.settings.url = o + "?UploadConfig=" + u + "&baseFileName=" + a + "&IDMediaOwner=" + f } T.start(); $(r).css({ display: "none" }) } }); T.bind("UploadProgress", function (e, t) { GetElementByID(t.id).getElementsByTagName("b")[0].innerHTML = "<span>" + t.percent + "%</span>" }); T.bind("FileUploaded", function (e, t, n) { if (n["response"].indexOf("Error:") > -1) { GetElementByID(t.id).getElementsByTagName("b")[0].innerHTML = "<span>" + n["response"].replace("Error:", "") + "</span>"; $(d).val($(d).val() + n["response"].replace("Error:", "") + htmlEncode("<br/>")); b++; ShowJQuiBoxDialog("Error", n["response"].replace("Error:", "")); if (b == w) { __doPostBack(v, "") } } else { GetElementByID(t.id).getElementsByTagName("b")[0].innerHTML = "<span>" + t.percent + "% </span>"; $(m).val($(m).val() + n["response"].replace("Success:", "") + ","); b++; if (b == w) { $(i).css({ display: "none" }); __doPostBack(g, ""); b = 0; w = 0 } } }); GetElementByID(y).onclick = function () { $(i).css({ display: "inline-block" }); if (a == "") { try { a = $("#hfBaseFileName").val() } catch (e) { } T.settings.url = o + "?UploadConfig=" + u + "&baseFileName=" + a + "&IDMediaOwner=" + f } T.start(); $(r).css({ display: "none" }); return false } } function GetElementByID(e) { return document.getElementById(e) }