//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("DBUsersProfileModel", "FK_UsersNotifications_UsersNotificationsTypes", "UsersNotificationsTypes", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(MyCookin.DAL.User.UsersNotificationsTypes), "UsersNotifications", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(MyCookin.DAL.User.UsersNotifications), true)]

#endregion

namespace MyCookin.DAL.User
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class DBUserNotificationsEntity : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new DBUserNotificationsEntity object using the connection string found in the 'DBUserNotificationsEntity' section of the application configuration file.
        /// </summary>
        public DBUserNotificationsEntity() : base("name=DBUserNotificationsEntity", "DBUserNotificationsEntity")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new DBUserNotificationsEntity object.
        /// </summary>
        public DBUserNotificationsEntity(string connectionString) : base(connectionString, "DBUserNotificationsEntity")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new DBUserNotificationsEntity object.
        /// </summary>
        public DBUserNotificationsEntity(EntityConnection connection) : base(connection, "DBUserNotificationsEntity")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UsersNotifications> UsersNotifications
        {
            get
            {
                if ((_UsersNotifications == null))
                {
                    _UsersNotifications = base.CreateObjectSet<UsersNotifications>("UsersNotifications");
                }
                return _UsersNotifications;
            }
        }
        private ObjectSet<UsersNotifications> _UsersNotifications;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UsersNotificationsTypes> UsersNotificationsTypes
        {
            get
            {
                if ((_UsersNotificationsTypes == null))
                {
                    _UsersNotificationsTypes = base.CreateObjectSet<UsersNotificationsTypes>("UsersNotificationsTypes");
                }
                return _UsersNotificationsTypes;
            }
        }
        private ObjectSet<UsersNotificationsTypes> _UsersNotificationsTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<vGetUsersNotificationsByIDUserAndIDLanguage> vGetUsersNotificationsByIDUserAndIDLanguage
        {
            get
            {
                if ((_vGetUsersNotificationsByIDUserAndIDLanguage == null))
                {
                    _vGetUsersNotificationsByIDUserAndIDLanguage = base.CreateObjectSet<vGetUsersNotificationsByIDUserAndIDLanguage>("vGetUsersNotificationsByIDUserAndIDLanguage");
                }
                return _vGetUsersNotificationsByIDUserAndIDLanguage;
            }
        }
        private ObjectSet<vGetUsersNotificationsByIDUserAndIDLanguage> _vGetUsersNotificationsByIDUserAndIDLanguage;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UsersNotifications EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUsersNotifications(UsersNotifications usersNotifications)
        {
            base.AddObject("UsersNotifications", usersNotifications);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UsersNotificationsTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUsersNotificationsTypes(UsersNotificationsTypes usersNotificationsTypes)
        {
            base.AddObject("UsersNotificationsTypes", usersNotificationsTypes);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the vGetUsersNotificationsByIDUserAndIDLanguage EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTovGetUsersNotificationsByIDUserAndIDLanguage(vGetUsersNotificationsByIDUserAndIDLanguage vGetUsersNotificationsByIDUserAndIDLanguage)
        {
            base.AddObject("vGetUsersNotificationsByIDUserAndIDLanguage", vGetUsersNotificationsByIDUserAndIDLanguage);
        }

        #endregion

        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="iDUser">No Metadata Documentation available.</param>
        /// <param name="iDLanguage">No Metadata Documentation available.</param>
        public ObjectResult<vGetUsersNotificationsByIDUserAndIDLanguage> USP_GetNotificationsByUser(Nullable<global::System.Guid> iDUser, Nullable<global::System.Int32> iDLanguage)
        {
            ObjectParameter iDUserParameter;
            if (iDUser.HasValue)
            {
                iDUserParameter = new ObjectParameter("IDUser", iDUser);
            }
            else
            {
                iDUserParameter = new ObjectParameter("IDUser", typeof(global::System.Guid));
            }
    
            ObjectParameter iDLanguageParameter;
            if (iDLanguage.HasValue)
            {
                iDLanguageParameter = new ObjectParameter("IDLanguage", iDLanguage);
            }
            else
            {
                iDLanguageParameter = new ObjectParameter("IDLanguage", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<vGetUsersNotificationsByIDUserAndIDLanguage>("USP_GetNotificationsByUser", iDUserParameter, iDLanguageParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="iDUser">No Metadata Documentation available.</param>
        /// <param name="iDLanguage">No Metadata Documentation available.</param>
        public ObjectResult<vGetUsersNotificationsByIDUserAndIDLanguage> USP_GetNotificationsByUser(Nullable<global::System.Guid> iDUser, Nullable<global::System.Int32> iDLanguage, MergeOption mergeOption)
        {
            ObjectParameter iDUserParameter;
            if (iDUser.HasValue)
            {
                iDUserParameter = new ObjectParameter("IDUser", iDUser);
            }
            else
            {
                iDUserParameter = new ObjectParameter("IDUser", typeof(global::System.Guid));
            }
    
            ObjectParameter iDLanguageParameter;
            if (iDLanguage.HasValue)
            {
                iDLanguageParameter = new ObjectParameter("IDLanguage", iDLanguage);
            }
            else
            {
                iDLanguageParameter = new ObjectParameter("IDLanguage", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<vGetUsersNotificationsByIDUserAndIDLanguage>("USP_GetNotificationsByUser", mergeOption, iDUserParameter, iDLanguageParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="iDUser">No Metadata Documentation available.</param>
        /// <param name="iDUserNotificationType">No Metadata Documentation available.</param>
        /// <param name="iDLanguage">No Metadata Documentation available.</param>
        public ObjectResult<vGetUsersNotificationsByIDUserAndIDLanguage> USP_IsNotificationEnabled(Nullable<global::System.Guid> iDUser, Nullable<global::System.Int32> iDUserNotificationType, Nullable<global::System.Int32> iDLanguage)
        {
            ObjectParameter iDUserParameter;
            if (iDUser.HasValue)
            {
                iDUserParameter = new ObjectParameter("IDUser", iDUser);
            }
            else
            {
                iDUserParameter = new ObjectParameter("IDUser", typeof(global::System.Guid));
            }
    
            ObjectParameter iDUserNotificationTypeParameter;
            if (iDUserNotificationType.HasValue)
            {
                iDUserNotificationTypeParameter = new ObjectParameter("IDUserNotificationType", iDUserNotificationType);
            }
            else
            {
                iDUserNotificationTypeParameter = new ObjectParameter("IDUserNotificationType", typeof(global::System.Int32));
            }
    
            ObjectParameter iDLanguageParameter;
            if (iDLanguage.HasValue)
            {
                iDLanguageParameter = new ObjectParameter("IDLanguage", iDLanguage);
            }
            else
            {
                iDLanguageParameter = new ObjectParameter("IDLanguage", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<vGetUsersNotificationsByIDUserAndIDLanguage>("USP_IsNotificationEnabled", iDUserParameter, iDUserNotificationTypeParameter, iDLanguageParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="iDUser">No Metadata Documentation available.</param>
        /// <param name="iDUserNotificationType">No Metadata Documentation available.</param>
        /// <param name="iDLanguage">No Metadata Documentation available.</param>
        public ObjectResult<vGetUsersNotificationsByIDUserAndIDLanguage> USP_IsNotificationEnabled(Nullable<global::System.Guid> iDUser, Nullable<global::System.Int32> iDUserNotificationType, Nullable<global::System.Int32> iDLanguage, MergeOption mergeOption)
        {
            ObjectParameter iDUserParameter;
            if (iDUser.HasValue)
            {
                iDUserParameter = new ObjectParameter("IDUser", iDUser);
            }
            else
            {
                iDUserParameter = new ObjectParameter("IDUser", typeof(global::System.Guid));
            }
    
            ObjectParameter iDUserNotificationTypeParameter;
            if (iDUserNotificationType.HasValue)
            {
                iDUserNotificationTypeParameter = new ObjectParameter("IDUserNotificationType", iDUserNotificationType);
            }
            else
            {
                iDUserNotificationTypeParameter = new ObjectParameter("IDUserNotificationType", typeof(global::System.Int32));
            }
    
            ObjectParameter iDLanguageParameter;
            if (iDLanguage.HasValue)
            {
                iDLanguageParameter = new ObjectParameter("IDLanguage", iDLanguage);
            }
            else
            {
                iDLanguageParameter = new ObjectParameter("IDLanguage", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<vGetUsersNotificationsByIDUserAndIDLanguage>("USP_IsNotificationEnabled", mergeOption, iDUserParameter, iDUserNotificationTypeParameter, iDLanguageParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="iDUserNotification">No Metadata Documentation available.</param>
        /// <param name="isEnabled">No Metadata Documentation available.</param>
        public ObjectResult<vGetUsersNotificationsByIDUserAndIDLanguage> USP_UpdateUserNotification(Nullable<global::System.Guid> iDUserNotification, Nullable<global::System.Boolean> isEnabled)
        {
            ObjectParameter iDUserNotificationParameter;
            if (iDUserNotification.HasValue)
            {
                iDUserNotificationParameter = new ObjectParameter("IDUserNotification", iDUserNotification);
            }
            else
            {
                iDUserNotificationParameter = new ObjectParameter("IDUserNotification", typeof(global::System.Guid));
            }
    
            ObjectParameter isEnabledParameter;
            if (isEnabled.HasValue)
            {
                isEnabledParameter = new ObjectParameter("IsEnabled", isEnabled);
            }
            else
            {
                isEnabledParameter = new ObjectParameter("IsEnabled", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<vGetUsersNotificationsByIDUserAndIDLanguage>("USP_UpdateUserNotification", iDUserNotificationParameter, isEnabledParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="iDUserNotification">No Metadata Documentation available.</param>
        /// <param name="isEnabled">No Metadata Documentation available.</param>
        public ObjectResult<vGetUsersNotificationsByIDUserAndIDLanguage> USP_UpdateUserNotification(Nullable<global::System.Guid> iDUserNotification, Nullable<global::System.Boolean> isEnabled, MergeOption mergeOption)
        {
            ObjectParameter iDUserNotificationParameter;
            if (iDUserNotification.HasValue)
            {
                iDUserNotificationParameter = new ObjectParameter("IDUserNotification", iDUserNotification);
            }
            else
            {
                iDUserNotificationParameter = new ObjectParameter("IDUserNotification", typeof(global::System.Guid));
            }
    
            ObjectParameter isEnabledParameter;
            if (isEnabled.HasValue)
            {
                isEnabledParameter = new ObjectParameter("IsEnabled", isEnabled);
            }
            else
            {
                isEnabledParameter = new ObjectParameter("IsEnabled", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<vGetUsersNotificationsByIDUserAndIDLanguage>("USP_UpdateUserNotification", mergeOption, iDUserNotificationParameter, isEnabledParameter);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DBUsersProfileModel", Name="UsersNotifications")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UsersNotifications : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new UsersNotifications object.
        /// </summary>
        /// <param name="iDUserNotification">Initial value of the IDUserNotification property.</param>
        /// <param name="iDUserNotificationType">Initial value of the IDUserNotificationType property.</param>
        /// <param name="iDUser">Initial value of the IDUser property.</param>
        /// <param name="isEnabled">Initial value of the IsEnabled property.</param>
        public static UsersNotifications CreateUsersNotifications(global::System.Guid iDUserNotification, global::System.Int32 iDUserNotificationType, global::System.Guid iDUser, global::System.Boolean isEnabled)
        {
            UsersNotifications usersNotifications = new UsersNotifications();
            usersNotifications.IDUserNotification = iDUserNotification;
            usersNotifications.IDUserNotificationType = iDUserNotificationType;
            usersNotifications.IDUser = iDUser;
            usersNotifications.IsEnabled = isEnabled;
            return usersNotifications;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid IDUserNotification
        {
            get
            {
                return _IDUserNotification;
            }
            set
            {
                if (_IDUserNotification != value)
                {
                    OnIDUserNotificationChanging(value);
                    ReportPropertyChanging("IDUserNotification");
                    _IDUserNotification = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IDUserNotification");
                    OnIDUserNotificationChanged();
                }
            }
        }
        private global::System.Guid _IDUserNotification;
        partial void OnIDUserNotificationChanging(global::System.Guid value);
        partial void OnIDUserNotificationChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IDUserNotificationType
        {
            get
            {
                return _IDUserNotificationType;
            }
            set
            {
                OnIDUserNotificationTypeChanging(value);
                ReportPropertyChanging("IDUserNotificationType");
                _IDUserNotificationType = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IDUserNotificationType");
                OnIDUserNotificationTypeChanged();
            }
        }
        private global::System.Int32 _IDUserNotificationType;
        partial void OnIDUserNotificationTypeChanging(global::System.Int32 value);
        partial void OnIDUserNotificationTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid IDUser
        {
            get
            {
                return _IDUser;
            }
            set
            {
                OnIDUserChanging(value);
                ReportPropertyChanging("IDUser");
                _IDUser = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IDUser");
                OnIDUserChanged();
            }
        }
        private global::System.Guid _IDUser;
        partial void OnIDUserChanging(global::System.Guid value);
        partial void OnIDUserChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsEnabled
        {
            get
            {
                return _IsEnabled;
            }
            set
            {
                OnIsEnabledChanging(value);
                ReportPropertyChanging("IsEnabled");
                _IsEnabled = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsEnabled");
                OnIsEnabledChanged();
            }
        }
        private global::System.Boolean _IsEnabled;
        partial void OnIsEnabledChanging(global::System.Boolean value);
        partial void OnIsEnabledChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBUsersProfileModel", "FK_UsersNotifications_UsersNotificationsTypes", "UsersNotificationsTypes")]
        public UsersNotificationsTypes UsersNotificationsTypes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UsersNotificationsTypes>("DBUsersProfileModel.FK_UsersNotifications_UsersNotificationsTypes", "UsersNotificationsTypes").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UsersNotificationsTypes>("DBUsersProfileModel.FK_UsersNotifications_UsersNotificationsTypes", "UsersNotificationsTypes").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<UsersNotificationsTypes> UsersNotificationsTypesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UsersNotificationsTypes>("DBUsersProfileModel.FK_UsersNotifications_UsersNotificationsTypes", "UsersNotificationsTypes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<UsersNotificationsTypes>("DBUsersProfileModel.FK_UsersNotifications_UsersNotificationsTypes", "UsersNotificationsTypes", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DBUsersProfileModel", Name="UsersNotificationsTypes")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UsersNotificationsTypes : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new UsersNotificationsTypes object.
        /// </summary>
        /// <param name="iDUserNotificationType">Initial value of the IDUserNotificationType property.</param>
        /// <param name="notificationType">Initial value of the NotificationType property.</param>
        /// <param name="notificationTypeEnabled">Initial value of the NotificationTypeEnabled property.</param>
        /// <param name="notificationTypeOrder">Initial value of the NotificationTypeOrder property.</param>
        /// <param name="isVisible">Initial value of the IsVisible property.</param>
        public static UsersNotificationsTypes CreateUsersNotificationsTypes(global::System.Int32 iDUserNotificationType, global::System.String notificationType, global::System.Boolean notificationTypeEnabled, global::System.Int32 notificationTypeOrder, global::System.Boolean isVisible)
        {
            UsersNotificationsTypes usersNotificationsTypes = new UsersNotificationsTypes();
            usersNotificationsTypes.IDUserNotificationType = iDUserNotificationType;
            usersNotificationsTypes.NotificationType = notificationType;
            usersNotificationsTypes.NotificationTypeEnabled = notificationTypeEnabled;
            usersNotificationsTypes.NotificationTypeOrder = notificationTypeOrder;
            usersNotificationsTypes.IsVisible = isVisible;
            return usersNotificationsTypes;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IDUserNotificationType
        {
            get
            {
                return _IDUserNotificationType;
            }
            set
            {
                if (_IDUserNotificationType != value)
                {
                    OnIDUserNotificationTypeChanging(value);
                    ReportPropertyChanging("IDUserNotificationType");
                    _IDUserNotificationType = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IDUserNotificationType");
                    OnIDUserNotificationTypeChanged();
                }
            }
        }
        private global::System.Int32 _IDUserNotificationType;
        partial void OnIDUserNotificationTypeChanging(global::System.Int32 value);
        partial void OnIDUserNotificationTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String NotificationType
        {
            get
            {
                return _NotificationType;
            }
            set
            {
                OnNotificationTypeChanging(value);
                ReportPropertyChanging("NotificationType");
                _NotificationType = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("NotificationType");
                OnNotificationTypeChanged();
            }
        }
        private global::System.String _NotificationType;
        partial void OnNotificationTypeChanging(global::System.String value);
        partial void OnNotificationTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean NotificationTypeEnabled
        {
            get
            {
                return _NotificationTypeEnabled;
            }
            set
            {
                OnNotificationTypeEnabledChanging(value);
                ReportPropertyChanging("NotificationTypeEnabled");
                _NotificationTypeEnabled = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("NotificationTypeEnabled");
                OnNotificationTypeEnabledChanged();
            }
        }
        private global::System.Boolean _NotificationTypeEnabled;
        partial void OnNotificationTypeEnabledChanging(global::System.Boolean value);
        partial void OnNotificationTypeEnabledChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 NotificationTypeOrder
        {
            get
            {
                return _NotificationTypeOrder;
            }
            set
            {
                OnNotificationTypeOrderChanging(value);
                ReportPropertyChanging("NotificationTypeOrder");
                _NotificationTypeOrder = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("NotificationTypeOrder");
                OnNotificationTypeOrderChanged();
            }
        }
        private global::System.Int32 _NotificationTypeOrder;
        partial void OnNotificationTypeOrderChanging(global::System.Int32 value);
        partial void OnNotificationTypeOrderChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsVisible
        {
            get
            {
                return _IsVisible;
            }
            set
            {
                OnIsVisibleChanging(value);
                ReportPropertyChanging("IsVisible");
                _IsVisible = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsVisible");
                OnIsVisibleChanged();
            }
        }
        private global::System.Boolean _IsVisible;
        partial void OnIsVisibleChanging(global::System.Boolean value);
        partial void OnIsVisibleChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBUsersProfileModel", "FK_UsersNotifications_UsersNotificationsTypes", "UsersNotifications")]
        public EntityCollection<UsersNotifications> UsersNotifications
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UsersNotifications>("DBUsersProfileModel.FK_UsersNotifications_UsersNotificationsTypes", "UsersNotifications");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UsersNotifications>("DBUsersProfileModel.FK_UsersNotifications_UsersNotificationsTypes", "UsersNotifications", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DBUsersProfileModel", Name="vGetUsersNotificationsByIDUserAndIDLanguage")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class vGetUsersNotificationsByIDUserAndIDLanguage : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new vGetUsersNotificationsByIDUserAndIDLanguage object.
        /// </summary>
        /// <param name="iDUserNotification">Initial value of the IDUserNotification property.</param>
        /// <param name="iDUserNotificationType">Initial value of the IDUserNotificationType property.</param>
        /// <param name="iDUser">Initial value of the IDUser property.</param>
        /// <param name="isEnabled">Initial value of the IsEnabled property.</param>
        /// <param name="notificationType">Initial value of the NotificationType property.</param>
        /// <param name="notificationTypeEnabled">Initial value of the NotificationTypeEnabled property.</param>
        /// <param name="notificationTypeOrder">Initial value of the NotificationTypeOrder property.</param>
        /// <param name="iDUserNotificationLanguage">Initial value of the IDUserNotificationLanguage property.</param>
        /// <param name="iDLanguage">Initial value of the IDLanguage property.</param>
        /// <param name="notificationQuestion">Initial value of the NotificationQuestion property.</param>
        /// <param name="isVisible">Initial value of the IsVisible property.</param>
        public static vGetUsersNotificationsByIDUserAndIDLanguage CreatevGetUsersNotificationsByIDUserAndIDLanguage(global::System.Guid iDUserNotification, global::System.Int32 iDUserNotificationType, global::System.Guid iDUser, global::System.Boolean isEnabled, global::System.String notificationType, global::System.Boolean notificationTypeEnabled, global::System.Int32 notificationTypeOrder, global::System.Int32 iDUserNotificationLanguage, global::System.Int32 iDLanguage, global::System.String notificationQuestion, global::System.Boolean isVisible)
        {
            vGetUsersNotificationsByIDUserAndIDLanguage vGetUsersNotificationsByIDUserAndIDLanguage = new vGetUsersNotificationsByIDUserAndIDLanguage();
            vGetUsersNotificationsByIDUserAndIDLanguage.IDUserNotification = iDUserNotification;
            vGetUsersNotificationsByIDUserAndIDLanguage.IDUserNotificationType = iDUserNotificationType;
            vGetUsersNotificationsByIDUserAndIDLanguage.IDUser = iDUser;
            vGetUsersNotificationsByIDUserAndIDLanguage.IsEnabled = isEnabled;
            vGetUsersNotificationsByIDUserAndIDLanguage.NotificationType = notificationType;
            vGetUsersNotificationsByIDUserAndIDLanguage.NotificationTypeEnabled = notificationTypeEnabled;
            vGetUsersNotificationsByIDUserAndIDLanguage.NotificationTypeOrder = notificationTypeOrder;
            vGetUsersNotificationsByIDUserAndIDLanguage.IDUserNotificationLanguage = iDUserNotificationLanguage;
            vGetUsersNotificationsByIDUserAndIDLanguage.IDLanguage = iDLanguage;
            vGetUsersNotificationsByIDUserAndIDLanguage.NotificationQuestion = notificationQuestion;
            vGetUsersNotificationsByIDUserAndIDLanguage.IsVisible = isVisible;
            return vGetUsersNotificationsByIDUserAndIDLanguage;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid IDUserNotification
        {
            get
            {
                return _IDUserNotification;
            }
            set
            {
                if (_IDUserNotification != value)
                {
                    OnIDUserNotificationChanging(value);
                    ReportPropertyChanging("IDUserNotification");
                    _IDUserNotification = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IDUserNotification");
                    OnIDUserNotificationChanged();
                }
            }
        }
        private global::System.Guid _IDUserNotification;
        partial void OnIDUserNotificationChanging(global::System.Guid value);
        partial void OnIDUserNotificationChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IDUserNotificationType
        {
            get
            {
                return _IDUserNotificationType;
            }
            set
            {
                if (_IDUserNotificationType != value)
                {
                    OnIDUserNotificationTypeChanging(value);
                    ReportPropertyChanging("IDUserNotificationType");
                    _IDUserNotificationType = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IDUserNotificationType");
                    OnIDUserNotificationTypeChanged();
                }
            }
        }
        private global::System.Int32 _IDUserNotificationType;
        partial void OnIDUserNotificationTypeChanging(global::System.Int32 value);
        partial void OnIDUserNotificationTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid IDUser
        {
            get
            {
                return _IDUser;
            }
            set
            {
                if (_IDUser != value)
                {
                    OnIDUserChanging(value);
                    ReportPropertyChanging("IDUser");
                    _IDUser = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IDUser");
                    OnIDUserChanged();
                }
            }
        }
        private global::System.Guid _IDUser;
        partial void OnIDUserChanging(global::System.Guid value);
        partial void OnIDUserChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsEnabled
        {
            get
            {
                return _IsEnabled;
            }
            set
            {
                if (_IsEnabled != value)
                {
                    OnIsEnabledChanging(value);
                    ReportPropertyChanging("IsEnabled");
                    _IsEnabled = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IsEnabled");
                    OnIsEnabledChanged();
                }
            }
        }
        private global::System.Boolean _IsEnabled;
        partial void OnIsEnabledChanging(global::System.Boolean value);
        partial void OnIsEnabledChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String NotificationType
        {
            get
            {
                return _NotificationType;
            }
            set
            {
                if (_NotificationType != value)
                {
                    OnNotificationTypeChanging(value);
                    ReportPropertyChanging("NotificationType");
                    _NotificationType = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("NotificationType");
                    OnNotificationTypeChanged();
                }
            }
        }
        private global::System.String _NotificationType;
        partial void OnNotificationTypeChanging(global::System.String value);
        partial void OnNotificationTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean NotificationTypeEnabled
        {
            get
            {
                return _NotificationTypeEnabled;
            }
            set
            {
                if (_NotificationTypeEnabled != value)
                {
                    OnNotificationTypeEnabledChanging(value);
                    ReportPropertyChanging("NotificationTypeEnabled");
                    _NotificationTypeEnabled = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("NotificationTypeEnabled");
                    OnNotificationTypeEnabledChanged();
                }
            }
        }
        private global::System.Boolean _NotificationTypeEnabled;
        partial void OnNotificationTypeEnabledChanging(global::System.Boolean value);
        partial void OnNotificationTypeEnabledChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 NotificationTypeOrder
        {
            get
            {
                return _NotificationTypeOrder;
            }
            set
            {
                if (_NotificationTypeOrder != value)
                {
                    OnNotificationTypeOrderChanging(value);
                    ReportPropertyChanging("NotificationTypeOrder");
                    _NotificationTypeOrder = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("NotificationTypeOrder");
                    OnNotificationTypeOrderChanged();
                }
            }
        }
        private global::System.Int32 _NotificationTypeOrder;
        partial void OnNotificationTypeOrderChanging(global::System.Int32 value);
        partial void OnNotificationTypeOrderChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IDUserNotificationLanguage
        {
            get
            {
                return _IDUserNotificationLanguage;
            }
            set
            {
                if (_IDUserNotificationLanguage != value)
                {
                    OnIDUserNotificationLanguageChanging(value);
                    ReportPropertyChanging("IDUserNotificationLanguage");
                    _IDUserNotificationLanguage = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IDUserNotificationLanguage");
                    OnIDUserNotificationLanguageChanged();
                }
            }
        }
        private global::System.Int32 _IDUserNotificationLanguage;
        partial void OnIDUserNotificationLanguageChanging(global::System.Int32 value);
        partial void OnIDUserNotificationLanguageChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IDLanguage
        {
            get
            {
                return _IDLanguage;
            }
            set
            {
                if (_IDLanguage != value)
                {
                    OnIDLanguageChanging(value);
                    ReportPropertyChanging("IDLanguage");
                    _IDLanguage = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IDLanguage");
                    OnIDLanguageChanged();
                }
            }
        }
        private global::System.Int32 _IDLanguage;
        partial void OnIDLanguageChanging(global::System.Int32 value);
        partial void OnIDLanguageChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String NotificationQuestion
        {
            get
            {
                return _NotificationQuestion;
            }
            set
            {
                if (_NotificationQuestion != value)
                {
                    OnNotificationQuestionChanging(value);
                    ReportPropertyChanging("NotificationQuestion");
                    _NotificationQuestion = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("NotificationQuestion");
                    OnNotificationQuestionChanged();
                }
            }
        }
        private global::System.String _NotificationQuestion;
        partial void OnNotificationQuestionChanging(global::System.String value);
        partial void OnNotificationQuestionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String NotificationComment
        {
            get
            {
                return _NotificationComment;
            }
            set
            {
                OnNotificationCommentChanging(value);
                ReportPropertyChanging("NotificationComment");
                _NotificationComment = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("NotificationComment");
                OnNotificationCommentChanged();
            }
        }
        private global::System.String _NotificationComment;
        partial void OnNotificationCommentChanging(global::System.String value);
        partial void OnNotificationCommentChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsVisible
        {
            get
            {
                return _IsVisible;
            }
            set
            {
                if (_IsVisible != value)
                {
                    OnIsVisibleChanging(value);
                    ReportPropertyChanging("IsVisible");
                    _IsVisible = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IsVisible");
                    OnIsVisibleChanged();
                }
            }
        }
        private global::System.Boolean _IsVisible;
        partial void OnIsVisibleChanging(global::System.Boolean value);
        partial void OnIsVisibleChanged();

        #endregion

    
    }

    #endregion

    
}
